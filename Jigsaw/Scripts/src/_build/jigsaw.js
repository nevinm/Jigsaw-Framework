/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.1.11 Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.1.11',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        ap = Array.prototype,
        apsp = ap.splice,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite and existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part, length = ary.length;
            for (i = 0; i < length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                        //End of the line. Keep at least one non-dot
                        //path segment at the front so it can be mapped
                        //correctly to disk. Otherwise, there is likely
                        //no path mapping for a path starting with '..'.
                        //This can still fail, but catches the most reasonable
                        //uses of ..
                        break;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI,
                baseParts = baseName && baseName.split('/'),
                normalizedBaseParts = baseParts,
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name && name.charAt(0) === '.') {
                //If have a base name, try to normalize against it,
                //otherwise, assume it is a top-level require that will
                //be relative to baseUrl in the end.
                if (baseName) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = name.split('/');
                    lastIndex = name.length - 1;

                    // If wanting node ID compatibility, strip .js from end
                    // of IDs. Have to do this here, and not in nameToUrl
                    // because node allows either .js or non .js to map
                    // to same file.
                    if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                        name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                    }

                    name = normalizedBaseParts.concat(name);
                    trimDots(name);
                    name = name.join('/');
                } else if (name.indexOf('./') === 0) {
                    // No baseName, so this is ID is resolved relative
                    // to baseUrl, pull off the leading dot.
                    name = name.substring(2);
                }
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);
                context.require([id]);
                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        normalizedName = normalize(name, parentName, applyMap);
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                //Array splice in the values since the context code has a
                //local var ref to defQueue, so cannot just reassign the one
                //on context.
                apsp.apply(defQueue,
                           [defQueue.length, 0].concat(globalDefQueue));
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return  getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map,
                    modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    this.fetch();
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error. However,
                            //only do it for define()'d  modules. require
                            //errbacks should not be called for failures in
                            //their callbacks (#699). However if a global
                            //onError is set, use that.
                            if ((this.events.error && this.map.isDefine) ||
                                req.onError !== defaultOnError) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                err.requireType = this.map.isDefine ? 'define' : 'require';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                req.onResourceLoad(context, this.map, this.depMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                                     .replace(currDirRegExp, '')
                                     .replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if(args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs ? url +
                                        ((url.indexOf('?') === -1 ? '?' : '&') +
                                         config.urlArgs) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    return onError(makeError('scripterror', 'Script error for: ' + data.id, evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ?
                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/jrburke/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/jrburke/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation that a build has been done so that
                //only one script needs to be loaded anyway. This may need to be
                //reevaluated if other use cases become common.
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one.
                if (!cfg.baseUrl) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                 //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, '')
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
    };

    define.amd = {
        jQuery: true
    };


    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this));

define("../libs/require", function(){});

/// <reference path="definitions/_definitions.d.ts" />
/// <reference path="definitions/Q.d.ts" />
/// <reference path="definitions/jquery.d.ts" />
/// <reference path="definitions/jqueryui.d.ts" />
/// <reference path="definitions/require.d.ts" />
// Post build commandB
// node "$(ProjectDir)scripts\libs\r.js" - o "$(ProjectDir)scripts\src\_build\build.json"
(function () {
    require.config({
        baseUrl: './scripts/src',
        paths: {
            "text": "../text",
            "codeeffects.control": "../codeeffects/codeeffects.min",
            "jquery-ui": "../smartadmin/libs/jqueryui-ui-1.10.3.min"
        }
    });

    define("jquery", [], function () {
        return $;
    });

    if (JigsawConfig.Mobile) {
        // If the mobile framework should be loaded then redirect all request to it's modules
        require.config({
            map: {
                '*': {
                    "app-desktop": "app-mobile",
                    "data-desktop": "data-mobile",
                    // template mappings
                    "templates/app": "templates/app-mobile",
                    "templates/data": "templates/data-mobile",
                    'templates/data.customer': 'templates/data.customer-mobile'
                }
            }
        });
    }

    // Configure Underscore templates to use a global variable, instead of using a with
    // block. This should increase the performance.
    // IMPORTANT!! all templates will use the 'rc' variable by default to access the data passed
    _.templateSettings['variable'] = 'rc';

    checkFingerPrints();

    require(['app'].concat(JigsawConfig.AvailableModules), function (app) {
        var modules = _.toArray(arguments);

        _.each(modules, function (m) {
            if (m['__init__']) {
                m['__init__']();
            }
        });

        // initialize the history after all module-files are loaded and initialized
        app.history.start();
    });

    function checkFingerPrints() {
        var FINGERPRINT = 'FingerPrint';
        var fingerPrint = localStorage.getItem(FINGERPRINT);
        if (fingerPrint !== JigsawConfig.FingerPrint) {
            localStorage.clear();
            console.log('application finger print changed, all caches cleared');
        }
        localStorage.setItem(FINGERPRINT, JigsawConfig.FingerPrint);
    }
})();

define("entry_point", function(){});

define('templates/app',["require", "exports"], function(require, exports) { 
    function __underscore(template) {
        var generate = _.template(template);
        generate.raw = template;
        return generate;
    }
    exports.CoreMain = function() { return "<div class=\"all-space\"><header id=\"top-region\"><div id=\"title-bar\" class=\"clear-fix\"><div id=\"logo\" class=\"pull-left\">Jigsaw</div><ol class=\"breadcrumb\" data-bind=\"foreach: breadcrumb.enumerate()\"><li><a data-bind=\"attr: {href: href}, text: text\"></a></li></ol><div id=\"caption\">Jigsaw [Beta Enviroment] - David Weir - Supervisor</div></div></header><div id=\"ribbon-bar\" class=\"ribbon\" data-bind=\"menuAlike: \'#globalMenuContent\', var: { collapsed: ko.observable(false).extend({ persist: \'ribbonBarCollapsed\' }) }\"><div class=\"dropdown\"><a class=\"global-menu-button\" role=\"button\" data-toggle=\"dropdown\" data-target=\"#\" href=\"#\">File <span class=\"caret\"></span></a><ul class=\"dropdown-menu multi-level\" role=\"menu\" aria-labelledby=\"dropdownMenu\" data-bind=\"foreach: menu.items\" style=\"margin-top: 15px;\"><li class=\"dropdown-submenu\"><a tabindex=\"-1\" href=\"#\" data-bind=\"text: header\"> </a><ul class=\"dropdown-menu\" data-bind=\"foreach: items\"><li><a tabindex=\"-1\" href=\"#\" data-bind=\"click: content, html: text\"></a></li></ul></li></ul></div><div data-bind=\" css:{ \'collapsed\': collapsed()}\"><div id=\"tabStrip\" class=\"\" data-bind=\"ribbonTabsSwiper : { tabs: ribbon.items, collapsed: collapsed, speed: 500 }\"><div class=\"tabs\"><ul class=\"nav nav-tabs\" data-bind=\"foreach: { data: ribbon.items }\"><li><a data-bind=\"text: header, keyTipsGroup: { group: header }\" href=\"#\"></a></li></ul></div><div class=\"swiper-container navbar-inverse\"><div class=\"swiper-wrapper\" data-bind=\"foreach: { data: ribbon.items }\"><div class=\"swiper-slide\"><div class=\"content-slide\"><div data-bind=\"var: { ribbonTabKeyTip: header }\"><div class=\"ribbon-tab\"><div data-bind=\"foreach: items\"><div class=\"ribbon-section\"><div data-bind=\"foreachRibbonItem: items\"></div><!--<span class=\"section-title\" data-bind=\"text: header\"></span>--></div><div class=\"ribbon-section-sep\"></div></div><div class=\"ribbon-section content-slide-end\"></div></div></div></div></div></div></div></div><div class=\"quick-start\" data-bind=\"foreachRibbonQuickStart: quickStart\"></div><div class=\"ribbon-collapse txt-color-blueLight\"><i class=\"fa\" data-bind=\"css: { \'fa-arrow-circle-down\': collapsed(), \'fa-arrow-circle-up\' : !collapsed() }, checkbox2: collapsed, keyTips: { key: \'QZ\'}\"> </i></div></div></div><div class=\"all-space overflow-hidden\" data-bind=\"measurePrev: \'top\', kendoResize: {}\"><div data-bind=\"messageQueue: messageQueue\"></div><section id=\"active-content\"></section><section id=\"main-content\" data-bind=\"measurePrev: \'top\', kendoResize: {}\"><div class=\"busy\"></div></section></div><div class=\"k-overlay\" data-bind=\"fadeVisible: isBusy\"></div></div>"; };
    exports.Dialog = __underscore("<%var size = rc.size == 1? \'\': (rc.size == 0)?  \'modal-sm\':  \'modal-lg\';%><div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\"><div class=\"modal-dialog <%= size  %> \"><div class=\"modal-content\"></div></div></div>");
    exports.DragWrap = function() { return "<div class=\"drag-hint drag-hint-wrapper\"><div class=\"drag-indicator\"><span class=\"k-icon\"></span></div></div>"; };
    exports.InputBoxMessage = __underscore("<div><p><%= rc.message %></p><input data-bind=\"value: value, focus: 800\" /><p><a class=\"k-button\" data-bind=\"click: ok\">Ok</a><a class=\"k-button\" data-bind=\"click: cancel\">Cancel</a></p></div>");
    exports.LoadingScreen = function() { return "<div class=\"loading-screen\"><div><div>Loading...</div><img class=\"logo\" src=\"images/logo_small.png\" /><h2>Jigsaw</h2><h3>Enterprise Resource Planner</h3><img src=\"images/ajax-loader.gif\" /></div></div>"; };
    exports.LoginForm = function() { return "<section id=\"login-form\"><div data-bind=\"messageQueue: messageQueue\"></div><form data-bind=\"submit: submitForm, css: { processing: processingForm }\"><fieldset><legend>Log in Form</legend><ol><li><label for=\"UserName\">User name</label><input id=\"UserName\" type=\"text\" value=\"\" name=\"UserName\" required data-bind=\"value: user\"></li><li><label for=\"Password\">Password</label><input id=\"Password\" type=\"password\" name=\"Password\" required data-bind=\"value: password, capsLockWarning: {}\"></li><li><input id=\"RememberMe\" type=\"checkbox\" value=\"true\" name=\"RememberMe\"><label class=\"checkbox\" for=\"RememberMe\">Remember me?</label></li></ol><input type=\"submit\" value=\"Log in\" data-bind=\"enable: !processingForm()\" /><input type=\"button\" value=\"Cancel\" data-bind=\"click: cancel\"/></fieldset></form></section>"; };
    exports.QuestionMessage = __underscore("<div data-bind=\"markZIndexBase: 1\"><div class=\"modal-body\"><p><%= rc.message %></p></div><div class=\"modal-footer\"><a class=\"btn btn-primary\" data-bind=\"click: yes, keyTips : { key : \'Y\' }\">Yes</a><a class=\"btn btn-danger\" data-bind=\"click: no,  keyTips : { key : \'N\' }\">No</a><% if (rc.type == 0) { %><a class=\"btn btn-default\" data-bind=\"click: cancel, keyTips : { key : \'C\' }\">Cancel</a><% } %></div></div>");
    exports.SideLayout = __underscore("<div data-bind=\"kendoSplitter: {orientation: \'horizontal\', height: \'auto\'}, css: {\'sidebar-left\': sidebarPosition() == 0, \'sidebar-right\': sidebarPosition() == 1}\"><% if (rc.sidebarLeft) { %><div data-bind=\"kendoSplitterPane: {collapsible: true, size: sidebarSize.px}\"><div id=\"sideLayout-sidebar\"><div class=\"busy\"></div></div></div><% } %><div data-bind=\"kendoSplitterPane: {collapsible: false}\"><div id=\"sideLayout-content\"><div class=\"busy\"></div></div></div><% if (!rc.sidebarLeft) { %><div  data-bind=\"kendoSplitterPane: {collapsible: true, size: sidebarSize.px}\"><div id=\"sideLayout-sidebar\"><div class=\"busy\"></div></div></div><% } %></div>");
    exports.styles = "/* app *//* this file contains core module collection files, and are added b the core module*//*Layout styles*/#sideLayout-sidebar {bottom: 0;left: 0;position: absolute;right: 0;top: 0;}#sideLayout-sidebar > .k-panelbar {bottom: 1px;left: 0;position: absolute;right: 0;top: 0;overflow: hidden;border: none;}#sideLayout-sidebar > .k-panelbar .k-content {border: none;}#sideLayout-sidebar .pin-unpin.checkbox {position: absolute;top: 5px;}#sideLayout-sidebar.sidebar-right .minifyme {-webkit-transform: rotate(180deg);-moz-transform: rotate(180deg);-ms-transform: rotate(180deg);-o-transform: rotate(180deg);transform: rotate(180deg);left: -3px;right: auto;}#sideLayout-sidebar.sidebar-right .minifyme:hover {left: 0;}#sidebar-collapsed {display: none;}#sidebar-expanded {display: block;margin-top: 30px;}#sidebar.pin-unpin-collapsed #sidebar-collapsed {display: block;}#sidebar.pin-unpin-collapsed #sidebar-expanded {display: none;}#viewLayout-content {position: absolute;left: 4px;top: 4px;right: 4px;bottom: 4px;}#top-region #logo {margin: -2px 0 0 2px;border-right: 1px solid;background-image: url(../../../images/logo_small.png);background-position: 2px center;background-repeat: no-repeat;padding: 2px 2px 2px 24px;-moz-background-size: 22px auto;-o-background-size: 22px auto;-webkit-background-size: 22px auto;background-size: 22px auto;background-color: transparent;padding-right: 10px;width: auto;}#top-region #caption {text-align: center;}#top-region .breadcrumb {float: left;margin: 0 0 0 10px;padding: 0;}#main-content {bottom: 0;left: 0;position: absolute;right: 0;top: 0;}#main-content .k-splitbar {opacity: 0.1;}#active-content.empty-region {position: relative;}#jigsaw-root {bottom: 0;left: 0;position: absolute;right: 0;top: 0;overflow: hidden;/*never show scroll bars for the body*/}#jigsaw-root #maincontent-messagequeue {bottom: 0;left: 0;position: absolute;right: 0;top: 0;}#jigsaw-root .k-splitter {height: auto;bottom: 0;left: 0;position: absolute;right: 0;top: 0;}.pin-unpin-collapsed {cursor: pointer;}.ribbon .quick-start {position: absolute;right: 30px;top: -10px;}.ribbon .quick-start > * {float: left;}.ribbon .up-down {position: absolute;right: -5px;top: 3px;}.ribbon #tabStrip .tabs {margin-bottom: -8px;}.ribbon #tabStrip .tabs .nav-tabs > li {margin-right: 4px;}.ribbon #tabStrip .tabs .nav-tabs > li > a {border-bottom: 0px;border-top-width: 0 !important;box-shadow: 0 -2px 0 #222222;font-weight: bold;margin-top: 1px !important;padding: 2px 20px;border-left: 1px solid #080808;border-right: 1px solid #080808;}.ribbon #tabStrip .tabs .nav-tabs > li.active > a {box-shadow: 0 -2px 0 #57889c;background-color: #222222;border-color: #080808;color: white;text-decoration: underline;}.ribbon #tabStrip .swiper-slide:last-child {/*fix for last slide breaking to next line*/margin-right: -10px;}.ribbon .swiper-container {height: 80px;padding: 0.3em 0.92em;overflow: visible;margin-top: 5px;}@media screen and (max-width: 1300px) {.ribbon .swiper-container .swiper-slide {width: 1300px;}}@media screen and (min-width: 1300px) {.ribbon .swiper-container .swiper-slide {width: 100vw;}}.ribbon .swiper-container .ribbon-tab {-pie-watch-ancestors: 2;z-index: 30;padding: 5px;min-width: 500px;height: 80px;}.ribbon .swiper-container .ribbon-tab .ribbon-section a.btn {font-size: 86%;box-shadow: inherit;padding: 12px 12px;}.ribbon .swiper-container .ribbon-tab .ribbon-section a.btn i {font-size: 3em;}.ribbon .swiper-container .ribbon-tab .ribbon-section a.btn p {margin-bottom: 0px;}.ribbon .swiper-container .ribbon-tab .content-slide-end {/*background-color: red;*/height: 70px;float: none;overflow: hidden;}.ribbon .ribbon-collapse {z-index: 1;position: absolute;height: 78px;width: 25px;right: 4px;top: 19px;font-size: 1.5em;padding-left: 5px;padding-top: 55px;background-color: #454545;}.ribbon .ribbon-collapse i {cursor: pointer;}.ribbon .collapsed .swiper-container {height: 32px;}.ribbon .collapsed .swiper-container .ribbon-tab {height: 30px;}.ribbon .collapsed .swiper-container .ribbon-tab .ribbon-section-sep {height: 20px;}.ribbon .collapsed .swiper-container .ribbon-tab .ribbon-section a.btn {padding: 0px 5px;}.ribbon .collapsed .swiper-container .ribbon-tab .ribbon-section a.btn p {display: none;}.ribbon .collapsed .swiper-container .ribbon-tab .ribbon-section a.btn i {font-size: 2em;}.ribbon .collapsed .swiper-container .ribbon-tab .content-slide-end {height: 25px;}.ribbon .collapsed .ribbon-collapse {padding-top: 4px;height: 30px;}.KeyTips__popup {position: absolute;width: 16px;height: 17px;overflow: hidden;line-height: 17px;font-family: \"Lucida Sans\", Verdana, Helvetica, Sans-Serif;font-size: 11px;text-align: center;cursor: default;display: none;-ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(opacity=80)\";opacity: 0.8;z-index: 24;}.keytips-up .KeyTips__popup {margin-top: -20px;}.fullscreen-mode {left: 0;top: 0;position: fixed !important;z-index: 30;bottom: 0;right: 0;}/* Patch for conflict with kendos style  */.form-control {box-sizing: border-box !important;}.splitter-bar-vertical {width: 6px;background: #aaa;}.splitter-bar-horizontal {height: 6px;background: #aaa;}#parentLayout {height: 100%;width: 100%;}#parentLayout .ui-widget-content {border: 0px solid white;}.modal-backdrop.fade.in {opacity: 0.9;}";
    exports.ViewLayout = __underscore("<% if (rc.sidebarLeft) { %><div id=\"parentayout\" data-bind=\"splitter: { type: \'v\', dock:\'left\', sizeLeft: sidebarSize, maxLeft: 400, minLeft: 200, docked: sidebarLocked, toggleDockHandler: \'toggleSidebar\', dockSize: 50 }\"><% } else { %><div id=\"parentayout\" data-bind=\"splitter: { type: \'v\', dock:\'right\', sizeRight: sidebarSize, minRight: 200, maxRight: 400, docked: sidebarLocked, toggleDockHandler: \'toggleSidebar\', dockSize: 50 }\"><% } %><% if (rc.sidebarLeft) { %><div><div id=\"sideLayout-sidebar\" class=\"sidebar-left\"><div class=\"busy\"></div></div></div><% } %><div class=\"overflow-visible\"><% if (!rc.viewbarBottom) { %><div class=\"overflow-visible\" data-bind=\"splitter: { type: \'v\',  dock:\'right\', sizeRight: viewbarSize, minRight: 400, maxRight: 700, docked: viewbarLocked }\" style=\"width: 100%; height: 100%\"><div id=\"viewLayout-content\" class=\"k-state-active\"><div class=\"busy\"></div></div><div class=\"overflow-visible viewbar-right\"><div id=\"viewLayout-viewbar\" class=\"viewbar-right\"><div class=\"busy\"></div></div></div></div><% } else { %><div class=\"overflow-visible\" data-bind=\"splitter: { type: \'h\', dock:\'bottom\', sizeBottom: viewbarSize, minTop: 200,  minBottom: 200,  docked: viewbarLocked }\" style=\"width: 100%; height: 100%\"><div class=\"overflow-visible\"><div id=\"viewLayout-content\" class=\"k-state-active\"><div class=\"busy\"></div></div></div><div class=\"overflow-visible viewbar-bottom\"><div id=\"viewLayout-viewbar\" class=\"viewbar-bottom\"><div class=\"busy\"></div></div></div></div><% } %></div><% if (!rc.sidebarLeft) { %><div><div id=\"sideLayout-sidebar\" class=\"sidebar-right\"><div class=\"busy\"></div></div></div><% } %></div>");
    exports.messages = { 
        Error:function() { return "<div class=\"alert alert-block alert-danger\" data-bind=\"var: { collapsed: ko.observable(false) }\"><div class=\"clearfix\"><h4 class=\"alert-heading pull-left\">Error! <span data-bind=\"text: title\"></span></h4><div class=\"pull-right\"><a data-bind=\"click: function() { window.location.reload() }\">reload</a><span class=\"up-down\" data-bind=\"checkbox: collapsed\"></span><a href=\"#\" data-bind=\"click: function() { $parent.remove($data); }\" class=\"close\">×</a></div></div><div data-bind=\"text: body, visible: !collapsed()\"></div></div>"; },
        Generic:__underscore("<div class=\"alert alert-info <%= rc.alert %>\" data-bind=\"var: { collapsed: ko.observable(false) }\"><div class=\"clearfix\"><h4 class=\"alert-heading pull-left\"><%= rc.header %> <span data-bind=\"text: title\"></span></h4><div class=\"pull-right\"><span class=\"up-down\" data-bind=\"checkbox: collapsed\"></span><a href=\"#\" data-bind=\"click: function() { $parent.remove($data); }\" class=\"close\">×</a></div></div><div data-bind=\"text: body, visible: !collapsed()\"></div></div>"),
        
    };
    exports.notification = { 
        Notification:function() { return "<!-- Notification quick start template --><div class=\"dropdown\"><a class=\"btn btn-link btn-sm\" data-toggle=\"dropdown\"  data-bind=\"keyTipsGroup : { keyStartWith: \'Q\', group: \'quick-notification-summary\'}\" href=\"#\"><span class=\"notification\" data-bind=\"css: { global: isGlobal }\"><span class=\"notification-count\" data-bind=\"text: errorCount() + successCount() + warningCount()\"></span><span class=\"caret\"> </span></span></a><ul class=\"dropdown-menu\"><li><span class=\"label label-default\">Quick Notification Summary </span></li><li><a href=\"#\" data-bind=\"click: showNotificationsClick(2), keyTips : { parentGroup: \'quick-notification-summary\' }\"><span data-bind=\"text: errorCount\"></span> Errors</a></li><li><a href=\"#\" data-bind=\"click: showNotificationsClick(0), keyTips : { parentGroup: \'quick-notification-summary\' }\"><span data-bind=\"text: successCount\"></span> Successful actions</a></li><li><a href=\"#\" data-bind=\"click: showNotificationsClick(1), keyTips : { parentGroup: \'quick-notification-summary\' }\"><span data-bind=\"text: warningCount\"></span> Warnings</a></li></ul></div>"; },
        NotificationsCollapsed:function() { return "<li class=\"myitems-item\"><a href=\"javascript:void(0)\"><i class=\"fa fa-lg fa-fw fa-comment\"></i><span class=\"badge bg-color-red pull-right inbox-badge\" data-bind=\"text: total\"></span></a></li>"; },
        RibbonNotificationPanel:function() { return "<div class=\"notification-list k-block\" data-bind=\"foreach: notifications\"><div class=\"notification\"><img class=\"small\" data-bind=\"attr: {src: Level === \'Success\'? \'images/success.png\': Level === \'Error\'? \'images/error-small.png\': \'images/warning.png\' }\" /><span data-bind=\"notificationTemplate: $data\"></span>by <span class=\"user-name\" data-bind=\"text: \'@\' + (Author || \'anonymous\')\"></span><span class=\"date\" data-bind=\"text: TimeStamp.toLocaleTimeString()\"></span></div></div>"; },
        SidebarNotifications:function() { return "<li><a href=\"javascript:void(0)\"><i class=\"fa fa-lg fa-fw fa-comment\"></i><span class=\"menu-item-parent\" data-bind=\"keyTips: { key : \'NN\' }\">Notifications</span><span class=\"badge bg-color-red pull-right\" data-bind=\"text: total\"></span></a><ul><li data-bind=\"with: local\"><a href=\"javascript:void(0)\"><i class=\"fa fa-lg fa-fw fa-comment-o\"></i><span class=\"menu-item-parent\" data-bind=\"keyTips: { key : \'SL\' }\">Local Notifications</span><span class=\"badge bg-color-greenLight pull-right inbox-badge\" data-bind=\"text: count\"></span></a><ul data-bind=\"foreach: storage.items\"><li><a class=\"notification\"><i class=\"fa\" data-bind=\"css: {\'fa-ban\': Level === \'Error\',\'fa-warning\': Level === \'Warning\',\'fa-check\': Level === \'Success\' }\" /><span data-bind=\"notificationTemplate: $data\"></span>&ensp;by <span class=\"user-name\" data-bind=\"text: \'@\' + (Author || \'anonymous\')\"></span>&ensp;<span class=\"date\" data-bind=\"text: TimeStamp.toLocaleTimeString()\"></span></a></li></ul></li><li data-bind=\"with: global\"><a href=\"javascript:void(0)\"><i class=\"fa fa-lg fa-fw fa-comment\"></i><span class=\"menu-item-parent\" data-bind=\"keyTips: { key : \'SG\' }\">Global Notifications</span><span class=\"badge bg-color-greenLight pull-right inbox-badge\" data-bind=\"text: count\"></span></a><ul data-bind=\"foreach: storage.items\"><li><div class=\"notification\"><i class=\"fa\" data-bind=\"css: {\'fa-ban\': Level === \'Error\',\'fa-warning\': Level === \'Warning\',\'fa-check\': Level === \'Success\' }\" /><span data-bind=\"notificationTemplate: $data\"></span>&ensp;by <span class=\"user-name\" data-bind=\"text: \'@\' + (Author || \'anonymous\')\"></span>&ensp;<span class=\"date\" data-bind=\"text: TimeStamp.toLocaleTimeString()\"></span></div></li></ul></li></ul></li>"; },
        styles:"/* app - notification */.quick-start .notification {background-image: url(images/local-notifications.png);background-position: 2px center;background-repeat: no-repeat;padding: 2px 2px 2px 22px;-moz-background-size: 20px auto;-o-background-size: 20px auto;-webkit-background-size: 20px auto;background-size: 20px auto;background-color: transparent;margin-top: 5px;margin-left: -10px;margin-right: -10px;}.quick-start .notification.global {background-image: url(images/global-notifications.png);background-position: 2px center;background-repeat: no-repeat;padding: 2px 2px 2px 22px;-moz-background-size: 20px auto;-o-background-size: 20px auto;-webkit-background-size: 20px auto;background-size: 20px auto;background-color: transparent;}.quick-start .notification .notification-count {background-color: #FF0000;border: 1px solid #000000;border-radius: 7px 7px 7px 7px;color: #FFFFFF;display: inline;font-weight: bold;left: -5px;padding: 0 3px;position: relative;right: 0;top: -8px;}.notification-list .user-name {color: green;font-weight: bold;}.notification-list .date {color: gray;margin-left: 5px;font-size: 80%;margin-top: 5px;margin-bottom: 1px;}#ribbon-bar .date {float: right;}#ribbon-bar .k-tabstrip > .k-content:nth-child(2) .ribbon-section:nth-last-child(2) {/* this makes the ribbon notification panel to cover all remaining space inin the ribbon bar, it\'s assumed that the panel is on the last ribbon-section */float: none;overflow: hidden;}#tabStrip .swiper-wrapper .swiper-slide:first-child .content-slide .ribbon-tab .ribbon-section:nth-last-child(2) {/* this makes the ribbon notification panel to cover all remaining space inin the ribbon bar, it\'s assumed that the panel is on the last ribbon-sectionfloat: none;overflow: hidden;*/width: 250px;/*.notification-list {width: 90%;}*/}.ribbon .notification-list {height: 60px;}.ribbon .collapsed .notification-list {height: 10px;}nav ul li .notification a {padding: 0 !important;}",
        SyncPendingChanges:function() { return "<div><img data-bind=\"attr: {src: online() ? \'images/online.png\' : \'images/offline.png\',title: online() ? \'online\' : \'offline\',}\" style=\"margin-bottom: -8px;\"></img><span data-bind=\"visible: pendingChangesCount\"><span data-bind=\"text: pendingChangesCount\"></span>pending changes</span><span class=\"k-button\" data-bind=\"qclick: sync\">sync</span></div>"; },
        
    };
    exports.ribbon = { 
        Button:function() { return "<a class=\"btn txt-color-white\" data-bind=\"click: content, tooltip: {title :  description, placement: \'bottom\' },  keyTipsGroup : { parentGroup: ribbonTabKeyTip, group: text }\" href=\"#\"><span class=\"txt-color-blueDark\"><i data-bind=\"attr: { class: cssClass }\"> </i></span><p data-bind=\"html: text\"></p></a>"; },
        Select:function() { return "<span class=\"dropdown\"><a class=\"btn txt-color-white\" data-toggle=\"dropdown\" data-bind=\"keyTipsGroup : { parentGroup: ribbonTabKeyTip, group: text  }\" href=\"#\"><span class=\"txt-color-blueDark\"><i data-bind=\"attr: { class: cssClass }\"> </i></span><p><span data-bind=\"html: text\"></span> &nbsp;<span class=\"caret\"> </span></p></a><ul class=\"dropdown-menu\" data-bind=\"foreach: options\"><li data-bind=\"css: { \'k-state-active\': $parent.selected() == $data },click: function () { $parent.selected($data) },keyTips : { parentGroup: $parent.text}\"><a href=\"#\" data-bind=\"text: $data\"></a></li></ul></span>"; },
        
    };
    exports.sidebar = { 
        Sidebar:function() { return "<div id=\"sidebar\" class=\"all-space\" data-bind=\"css: { \'minified\': collapsed }, pinunpin: collapsed\"><span class=\"minifyme\" data-bind=\"click: $jigsawPinUnpinCheckbox.negate\"><i class=\"fa fa-arrow-circle-left hit\"></i></span><nav id=\"sidebar-collapsed\"></nav><nav id=\"sidebar-expanded\" data-bind=\"jarvisMenu: {}\"></nav></div>"; },
        
    };
    exports.userSettings = { 
        Notification:function() { return "<!-- Notification quick start template --><div class=\"dropdown\"><a class=\"btn btn-link btn-sm\" data-toggle=\"dropdown\" data-bind=\"keyTipsGroup : { key: \'QT\', group: \'user-quick-access-toolbar\'}\" href=\"#\"><span class=\"user-settings\"><span class=\"caret\"> </span></span></a><ul class=\"dropdown-menu\"><li><span class=\"label label-default\">User Quick Access Toolbar</span></li><li class=\"\" data-bind=\"click: signButtonClicked, keyTips : { parentGroup: \'user-quick-access-toolbar\' }\"><a href=\"#\" data-bind=\"text: signButtonText\"></a></li><li class=\"\" data-bind=\"click: showUserDetailsButtonClicked, keyTips : { parentGroup: \'user-quick-access-toolbar\' }\"><a href=\"#\">Show User Details</a></li><li class=\"\" data-bind=\"qclick: settingsButtonClicked, keyTips : { parentGroup: \'user-quick-access-toolbar\' }\"><a href=\"#\">My Settings</a></li></ul></div>"; },
        styles:"/* app - user settings */.user-settings {background-image: url(images/user-account.png);background-position: 2px center;background-repeat: no-repeat;padding: 2px 2px 2px 22px;-moz-background-size: 20px auto;-o-background-size: 20px auto;-webkit-background-size: 20px auto;background-size: 20px auto;background-color: transparent;margin-top: 5px;margin-left: -10px;}",
        UserSettings:function() { return "<h1>User Settings</h1><div><div>Font Size<span data-bind=\"expandOptions: {value: fontSize, text: [\'Small\', \'Medium\', \'Large\']}\"></span></div><h2>Layout Settings</h2><div>Sidebar Position<span data-bind=\"expandOptions: { value: sidebarPosition, text: [\'Left\', \'Right\'] }\"></span></div><div>Viewbar Position<span data-bind=\"expandOptions: { value: viewbarPosition, text: [\'Bottom\', \'Right\'] }\"></span></div></div>"; },
        
    };
    exports.widget = { 
        expandOptions:__underscore("<% _.each(rc.text, function(name, i) { %><span data-bind=\"checkbox: value() == <%= i %>, click: function () { value(<%= i %>); }\"><%= name %></span><% }) %>"),
        VirtualScrollButton:function() { return "<!-- template for the buttons used in the virtual scroll custom binding --><div class=\"virtual-scroll-button k-button\"><span class=\"k-icon\"></span></div>"; },
        
    };
});

/// <reference path="definitions/_definitions.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('app',["require", "exports", 'templates/app'], function(require, exports, templates) {
    /** returns a promise that is resolved when the animation finishes */
    $.fn.deferredAnimate = function (properties, duration, queue) {
        if (typeof queue === "undefined") { queue = false; }
        var result = Q.defer();

        this.stop(false, true).animate(properties, {
            duration: duration,
            complete: function () {
                return result.resolve(true);
            },
            queue: queue
        });

        return result.promise;
    };

    $(document).on('click', 'a[href="#"]', function (e) {
        return e.preventDefault();
    });

    /** low level functions to control network */
    (function (ajax) {
        function retrieveFromServer(func) {
            return Q(func()).fail(function (e) {
                // if the server is offline desconnect the application
                if (isOfflineError(e)) {
                    connection.disconnect();
                }

                return Q.reject(e);
            });
        }

        function get(url, data) {
            return retrieveFromServer(function () {
                return $.get(url, data);
            });
        }
        ajax.get = get;

        function post(url, data) {
            // WebApi doesn't support native jquery parameter encode on the server,
            // thanks to http://weblog.west-wind.com/posts/2012/May/08/Passing-multiple-POST-parameters-to-Web-API-Controller-Methods
            return retrieveFromServer(function () {
                return $.ajax({
                    url: url,
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(data)
                });
            });
        }
        ajax.post = post;

        function fileDownload(url, data) {
            // for now uses the jquery fileDownload plugin
            return Q($.fileDownload(url, { data: data })).fail(function (e) {
                // if the server is offline desconnect the application
                if (isOfflineError(e)) {
                    connection.disconnect();
                }

                return Q.reject(e);
            });
        }
        ajax.fileDownload = fileDownload;

        /** returns tru if the given error was returned from a request where the server
        was offline */
        function isOfflineError(error) {
            return error.status === 0 || error.status === 404;
        }
        ajax.isOfflineError = isOfflineError;

        (function (connection) {
            /** when true the application will act as offline, even if the server is available */
            connection.forceOffline = ko.observable(false);

            /** This class can be used to track throught it's single instance if the application is online or not */
            var disconected = ko.observable(false);
            var _reconectingPromise = null;

            connection.isOnline = ko.computed(function () {
                return !connection.forceOffline() && !disconected();
            });

            function online(ping) {
                if (typeof ping === "undefined") { ping = false; }
                if (connection.forceOffline()) {
                    return Q(false);
                } else if (!disconected()) {
                    return Q(true);
                } else if (this._reconectingPromise) {
                    return _reconectingPromise;
                } else if (ping) {
                    return reconnect();
                } else {
                    return Q(false);
                }
            }
            connection.online = online;

            function disconnect() {
                disconected(true);
                signalR.ping.stop();
            }
            connection.disconnect = disconnect;

            function reconnect() {
                if (!_reconectingPromise) {
                    _reconectingPromise = Q($.get('ping.js')).then(function () {
                        disconected(false);
                        return true;
                    }).fail(function () {
                        disconected(true);
                        signalR.ping.stop();
                        return false;
                    }).finally(function () {
                        return _reconectingPromise = null;
                    });
                }

                return _reconectingPromise;
            }
            connection.reconnect = reconnect;

            /* add some additional code to detect when the application goes offline using SignalR,
            also tries to reconnect every 1min */
            var signalR;
            (function (signalR) {
                signalR.ping = $.connection('ping');

                signalR.ping.disconnected(function () {
                    disconected(true);

                    setTimeout(function () {
                        _reconectingPromise = Q(signalR.ping.start()).then(function () {
                            disconected(false);
                            return true;
                        }).fail(function () {
                            disconected(true);
                            return false;
                        }).finally(function () {
                            return _reconectingPromise = null;
                        });
                    }, 60000); // try to reconnect in one minute
                }).start();
            })(signalR || (signalR = {}));
        })(ajax.connection || (ajax.connection = {}));
        var connection = ajax.connection;
    })(exports.ajax || (exports.ajax = {}));
    var ajax = exports.ajax;

    (function (Common) {
        var KeyValuePair = (function () {
            function KeyValuePair(key, value) {
                this.key = key;
                this.value = value;
            }
            return KeyValuePair;
        })();

        var Dict = (function () {
            function Dict() {
                this._storage = [];
            }
            Dict.prototype.contains = function (key) {
                return _.some(this._storage, function (pair) {
                    return pair.key === key;
                });
            };

            Dict.prototype.add = function (key, value) {
                if (this.contains(key)) {
                    throw new Error('the key is already present on the dictionary');
                } else {
                    this._storage.push(new KeyValuePair(key, value));
                }
            };

            Dict.prototype.remove = function (key) {
                var pair = _.find(this._storage, function (pair) {
                    return pair.key === key;
                });
                Utils.remove(this._storage, pair);
            };

            Dict.prototype.get = function (key) {
                var pair = _.find(this._storage, function (pair) {
                    return pair.key === key;
                });
                return pair && pair.value;
            };

            Dict.prototype.keys = function () {
                return _.map(this._storage, function (pair) {
                    return pair.key;
                });
            };

            Dict.prototype.values = function () {
                return _.map(this._storage, function (pair) {
                    return pair.value;
                });
            };
            return Dict;
        })();
        Common.Dict = Dict;

        /** represents a disposable collection that gets disposed later */
        var Trash = (function () {
            function Trash() {
                this._trash = [];
            }
            Trash.prototype.recycle = function () {
                var items = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    items[_i] = arguments[_i + 0];
                }
                this._trash.push.apply(this._trash, items);
            };

            Trash.prototype.dispose = function () {
                _.each(this._trash, function (item) {
                    return item && item.dispose();
                });

                // prepare the trash for a new recycle cycle
                this._trash = [];
            };
            return Trash;
        })();
        Common.Trash = Trash;

        function bulkDispose() {
            var disposables = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                disposables[_i] = arguments[_i + 0];
            }
            _.each(disposables, function (disposable) {
                return disposable && disposable.dispose();
            });
        }
        Common.bulkDispose = bulkDispose;

        function mergeDisposables() {
            var disposables = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                disposables[_i] = arguments[_i + 0];
            }
            return {
                dispose: function () {
                    return _.each(disposables, function (disposable) {
                        return disposable.dispose();
                    });
                }
            };
        }
        Common.mergeDisposables = mergeDisposables;

        /** syncronizes some promises such as that only one of them is executing at a given time */
        var PromiseQueue = (function () {
            function PromiseQueue() {
                this._executing = false;
                this._queue = [];
            }
            PromiseQueue.prototype.enqueue = function (promise) {
                var _this = this;
                var result = Q.defer();

                if (this._executing) {
                    this._queue.push(function () {
                        return promise().then(function (x) {
                            result.resolve(x);
                            return x;
                        }).fail(function (x) {
                            result.reject(x);

                            // catch the exception so it continues executing after this promise
                            return x;
                        });
                    });
                } else {
                    this._executing = true;
                    promise().then(function (x) {
                        result.resolve(x);
                        return _this.continueQueue();
                    }).fail(function (x) {
                        result.reject(x);
                        return _this.continueQueue();
                    }).done();
                }

                return result.promise;
            };

            PromiseQueue.prototype.continueQueue = function () {
                var _this = this;
                var next = this._queue.pop();
                if (next) {
                    return next().then(function () {
                        return _this.continueQueue();
                    }).fail(function () {
                        return _this.continueQueue();
                    });
                } else {
                    this._executing = false;
                    return Q(true);
                }
            };
            return PromiseQueue;
        })();
        Common.PromiseQueue = PromiseQueue;

        /** Base class for all viewModels, handles attaching/detaching THIS knockout viewModel
        every time the view is rendered/closed */
        var ViewModelBase = (function () {
            function ViewModelBase() {
                this._activeViews = 0;
            }
            return ViewModelBase;
        })();
        Common.ViewModelBase = ViewModelBase;

        var ReadyRemoteSource = (function () {
            function ReadyRemoteSource(value) {
                this.value = value;
                this.isReady = true;
            }
            ReadyRemoteSource.prototype.refresh = function () {
                return Q(this.value);
            };

            ReadyRemoteSource.prototype.download = function () {
                return Q(this.value);
            };
            return ReadyRemoteSource;
        })();
        Common.ReadyRemoteSource = ReadyRemoteSource;

        var PromiseRemoteSource = (function () {
            function PromiseRemoteSource() {
                this._downloadPromise = null;
                this._value = null;
                this._isReady = false;
            }
            PromiseRemoteSource.prototype.refresh = function () {
                if (this.isReady) {
                    // if the template has been resolved, delete that value and schedule a new download
                    this._downloadPromise = null;
                }

                return this.download();
            };

            PromiseRemoteSource.prototype.download = function () {
                var _this = this;
                if (!this._downloadPromise) {
                    this._downloadPromise = this.getPromise().then(function (value) {
                        _this._value = value;
                        _this._isReady = true;
                    });
                }

                return this._downloadPromise;
            };

            /** to be overwritten on derived classes */
            PromiseRemoteSource.prototype.getPromise = function () {
                throw new Error('not implemented');
            };

            Object.defineProperty(PromiseRemoteSource.prototype, "isReady", {
                get: function () {
                    return this._isReady;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(PromiseRemoteSource.prototype, "value", {
                get: function () {
                    return this._value;
                },
                enumerable: true,
                configurable: true
            });
            return PromiseRemoteSource;
        })();
        Common.PromiseRemoteSource = PromiseRemoteSource;

        /** this class handles the downloading of a remote resource */
        var RemoteResource = (function (_super) {
            __extends(RemoteResource, _super);
            function RemoteResource(url, options) {
                _super.call(this);
                this.url = url;
                this.options = options;
            }
            RemoteResource.prototype.getPromise = function () {
                return ajax.get(this.url, this.options);
            };
            return RemoteResource;
        })(PromiseRemoteSource);
        Common.RemoteResource = RemoteResource;

        var ComposeRemoteSource = (function () {
            function ComposeRemoteSource(source, modifier) {
                this.source = source;
                this.modifier = modifier;
            }
            ComposeRemoteSource.prototype.refresh = function () {
                var _this = this;
                return this.source.refresh().then(function () {
                    return _this.value;
                });
            };

            ComposeRemoteSource.prototype.download = function () {
                var _this = this;
                return this.source.download().then(function () {
                    return _this.value;
                });
            };

            Object.defineProperty(ComposeRemoteSource.prototype, "isReady", {
                get: function () {
                    return this.source.isReady;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(ComposeRemoteSource.prototype, "value", {
                get: function () {
                    return this.modifier(this.source.value);
                },
                enumerable: true,
                configurable: true
            });
            return ComposeRemoteSource;
        })();
        Common.ComposeRemoteSource = ComposeRemoteSource;

        var Event = (function () {
            function Event() {
                this.callback = $.Callbacks();
            }
            Event.prototype.add = function (handler) {
                var _this = this;
                this.callback.add(handler);

                return {
                    dispose: function () {
                        return _this.callback.remove(handler);
                    }
                };
            };

            Event.prototype.fire = function () {
                var args = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    args[_i] = arguments[_i + 0];
                }
                this.callback.fire.apply(this.callback, args);
            };
            return Event;
        })();
        Common.Event = Event;

        /** name for the resize event, formely named 'resize' but enters in conflict with an event named
        the same way */
        Common.RESIZE = 'resize-event';

        Common.resizeEvent = $.Event(Common.RESIZE);

        function triggerResize(element) {
            element.trigger(Common.resizeEvent);
        }
        Common.triggerResize = triggerResize;

        var DelayedCallbacks = (function () {
            function DelayedCallbacks() {
                this._handlers = [];
            }
            DelayedCallbacks.prototype.add = function (handler) {
                var _this = this;
                this._handlers.push(handler);

                return {
                    dispose: function () {
                        return Utils.remove(_this._handlers, handler);
                    }
                };
            };

            DelayedCallbacks.prototype.fire = function () {
                var args = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    args[_i] = arguments[_i + 0];
                }
                var promises = _.map(this._handlers, function (handler) {
                    return handler.apply(null, args);
                });
                return Q.all(promises);
            };
            return DelayedCallbacks;
        })();
        Common.DelayedCallbacks = DelayedCallbacks;

        var PromiseGateway = (function () {
            function PromiseGateway(getValue) {
                this.getValue = getValue;
                this._storage = new Dict();
            }
            PromiseGateway.prototype.resolve = function (key) {
                var _this = this;
                if (this._storage.contains(key)) {
                    return this._storage.get(key);
                } else {
                    var promise = this.getValue(key).then(function (x) {
                        _this._storage.remove(key);
                        return x;
                    });
                    this._storage.add(key, promise);
                    return promise;
                }
            };
            return PromiseGateway;
        })();
        Common.PromiseGateway = PromiseGateway;

        /** inspired by PRISM interaction requests, to help comunicating loosely coupled components */
        var InteractionRequest = (function () {
            function InteractionRequest() {
            }
            InteractionRequest.prototype.request = function (data) {
                if (!this._handler) {
                    throw new Error('a handler has not been specified for this InteracionRequest');
                }

                return this._handler(data);
            };

            InteractionRequest.prototype.handle = function (handler) {
                if (this._handler) {
                    throw new Error('a handler has already been specified for this InteractionRequest');
                }

                this._handler = handler;
            };
            return InteractionRequest;
        })();
        Common.InteractionRequest = InteractionRequest;

        var PrioritySet = (function () {
            function PrioritySet() {
                var _this = this;
                this._storage = ko.observableArray();
                this.items = this._storage.map(function (x) {
                    return x.item;
                }).filter(function (x) {
                    return _this.filterItems(x);
                });
            }
            PrioritySet.prototype.filterItems = function (x) {
                return true;
            };

            Object.defineProperty(PrioritySet.prototype, "length", {
                get: function () {
                    return this._storage().length;
                },
                enumerable: true,
                configurable: true
            });

            PrioritySet.prototype.add = function (item, priority) {
                var _this = this;
                if (typeof priority === "undefined") { priority = 0; }
                // adds a new item to the storage array, but considering it's priority
                // so it maintains the array ordered by priority
                var storage = this._storage(), storageItem = { item: item, priority: priority };

                for (var i = 0; i < this.length; i++) {
                    if (priority < storage[i].priority) {
                        this._storage.splice(i, 0, storageItem);
                        return { dispose: function () {
                                return _this._storage.remove(storageItem);
                            } };
                    }
                }

                // else insert the item at the end of the array
                this._storage.push(storageItem);
                return { dispose: function () {
                        return _this._storage.remove(storageItem);
                    } };
            };

            PrioritySet.prototype.addAll = function (items, priority) {
                var _this = this;
                if (typeof priority === "undefined") { priority = 0; }
                var disposables = _.map(items, function (x) {
                    return _this.add(x, priority);
                });
                return mergeDisposables.apply(null, disposables);
            };
            return PrioritySet;
        })();
        Common.PrioritySet = PrioritySet;

        var Breadcrumb = (function () {
            function Breadcrumb(data, next) {
                this.data = data;
                this.next = ko.observable();
                if (next) {
                    this.next(next);
                }
            }
            /** returns all the elements from the breadcrumb */
            Breadcrumb.prototype.enumerate = function () {
                var _this = this;
                return ko.computed(function () {
                    var result = [_this.data], next = _this.next();

                    while (next) {
                        result.push(next.data);
                        next = next.next();
                    }

                    return result;
                });
            };
            return Breadcrumb;
        })();
        Common.Breadcrumb = Breadcrumb;
    })(exports.Common || (exports.Common = {}));
    var Common = exports.Common;

    (function (Knockout) {
        /** triggers the resize event on the target element when the observable value is changed */
        ko.bindingHandlers['resizeWhen'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = valueAccessor(), subscription = value.subscribe(function () {
                    return Common.triggerResize($(element));
                });

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    subscription.dispose();
                });
            }
        };

        ko.bindingHandlers['eventWhen'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = valueAccessor(), subscription = value.fire.subscribe(function () {
                    return $(element).trigger(value.event);
                });

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    subscription.dispose();
                });
            }
        };

        /** default text binding, returns the text in the inside of the element if the target binding
        has no value. */
        ko.bindingHandlers['dtext'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = valueAccessor(), defaultText = $(element).html(), computed = ko.computed(function () {
                    return value() || defaultText;
                });

                ko.applyBindingsToNode(element, { text: computed }, bindingContext);

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    computed.dispose();
                });
            }
        };

        /** executes an action when enter is pressed */
        ko.bindingHandlers['pressEnter'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var func = ko.unwrap(valueAccessor());
                $(element).keydown(function (e) {
                    if (e.keyCode === 13) {
                        $(element).change(); // triggeer change event so knockout can pick up changes, if any
                        func.call(viewModel, e);
                    }
                });
            }
        };

        /** knockout binding to help with debuging */
        ko.bindingHandlers['debug'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                console.log('knockout binding: ', element, valueAccessor());

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    console.log('disposed binding: ', element, valueAccessor());
                });
            }
        };

        var Door = (function () {
            function Door() {
                this.guardians = [];
                this._isOpen = false;
            }
            Door.prototype.add = function (guardian) {
                var _this = this;
                this.guardians.push(guardian);

                return {
                    dispose: function () {
                        return Utils.remove(_this.guardians, guardian);
                    }
                };
            };

            /** returns a promise that checks if ALL guardians accept the passed key, in
            which case the promise is resolved. Otherwise fails.
            Note: Only one key can be tested at a single time, and an error is thrown otherwise. */
            Door.prototype.open = function (key, silent) {
                var _this = this;
                if (typeof silent === "undefined") { silent = false; }
                if (!this._isOpen) {
                    var promises = _.map(this.guardians, function (guardian) {
                        return guardian(key, silent);
                    });

                    this._isOpen = true;
                    this._lastKey = key;
                    this._lastPromise = Q.all(promises).then(function () {
                        return Q(key);
                    }).fail(function () {
                        return Q.reject(key);
                    }).finally(function () {
                        return _this._isOpen = false;
                    });

                    return this._lastPromise;
                } else if (key === this._lastKey) {
                    return this._lastPromise;
                } else {
                    return Q.reject(new Error('the door can only handle one item at a time.'));
                }
            };
            return Door;
        })();
        Knockout.Door = Door;

        /**
        guarded observable, contains a list of promises that are used to filter a .guarded
        observable if all promises are resolved
        */
        ko['guarded'] = function (initialValue) {
            var NOPASSING = {}, passing = ko.observable(NOPASSING), guarded = ko.observable(initialValue), guardedReadOnly = ko.computed(function () {
                return guarded();
            }), door = new Door(), prepare = new Door(), outsider = ko.computed({
                read: function () {
                    return passing() !== NOPASSING ? passing() : guarded();
                },
                write: inject
            }), disposeBase = outsider.dispose;

            function inject(value, silent) {
                if (typeof silent === "undefined") { silent = false; }
                passing(value);

                return door.open(value, silent).then(function () {
                    return prepare.open(value);
                }).then(function (key) {
                    if (key === passing()) {
                        guarded(key);
                        passing(NOPASSING);
                    }
                    return key;
                }).fail(function (key) {
                    if (key === passing()) {
                        passing(NOPASSING);
                    }
                    return Q.reject(key);
                });
            }

            // the guarded observable is read-only
            outsider['guarded'] = guardedReadOnly;
            outsider['guard'] = function (guardian) {
                return door.add(guardian);
            };
            outsider['prepare'] = function (guardian) {
                return prepare.add(guardian);
            };
            outsider['inject'] = inject;
            outsider['dispose'] = function () {
                // dispose logic
                guardedReadOnly.dispose();
                delete outsider['guarded'];

                // also call base method
                disposeBase.apply(outsider, arguments);
            };

            return outsider;
        };

        function persistExtender(target, value) {
            var options = !_.isString(value) ? value : {
                key: value,
                parse: _.identity,
                stringify: _.identity
            };

            var previousValue = persistExtender.storageGetItem(options.key);
            if (previousValue) {
                // if there's a previous value then set the observable with that value
                target(options.parse(JSON.parse(previousValue)));
            }

            target.subscribe(function (value) {
                var json = JSON.stringify(options.stringify(value));

                // store the latest value every time the observable changes
                persistExtender.storageSetItem(options.key, json);
            });

            return target;
        }
        Knockout.persistExtender = persistExtender;

        /** localStorage functions can't be mocked when testing this function, that's why this module
        exist so the tests can mock these instead */
        (function (persistExtender) {
            function storageGetItem(key) {
                return localStorage.getItem(key);
            }
            persistExtender.storageGetItem = storageGetItem;

            function storageSetItem(key, value) {
                localStorage.setItem(key, value);
            }
            persistExtender.storageSetItem = storageSetItem;
        })(Knockout.persistExtender || (Knockout.persistExtender = {}));
        var persistExtender = Knockout.persistExtender;

        /** extends the knockout observables to store the last value of the observable in the localstorage */
        ko.extenders['persist'] = persistExtender;

        /** returns an observable array that is persisted on the user localStorage with the specified key */
        function persistedArray(options) {
            var options = _.defaults(options, {
                parse: _.identity,
                stringify: _.identity
            });

            return ko.observableArray().extend({
                persist: {
                    key: options.key,
                    parse: function (deserialized) {
                        return _.map(deserialized, options.parse);
                    },
                    stringify: function (array) {
                        return _.map(array, options.stringify);
                    }
                }
            });
        }
        Knockout.persistedArray = persistedArray;

        /** extends knockout observables and adds a writeable computed observable as a property
        of the target observable named 'px'*/
        ko.extenders['px'] = function (target, writeable) {
            target['px'] = ko.computed({
                read: function () {
                    return target() + 'px';
                },
                write: function (newValue) {
                    if (writeable) {
                        var parsed = parseFloat(newValue);

                        // if the value can be parsed
                        if (!isNaN(parsed)) {
                            target(parsed);
                        }
                        //console.log('px extender value changed ', newValue);
                    } else {
                        throw new Error('knockout computed pixel value not writeable');
                    }
                }
            });

            return target;
        };

        /** similar to the with binding but targets bindings extended with the mirror extender */
        ko.bindingHandlers['throttledWith'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = valueAccessor(), options = !ko.isObservable(value) ? value : { target: value, delay: 500 }, mirror = ko.computed(function () {
                    return options.target();
                }).extend({ rateLimit: options.delay || 500 });

                ko.applyBindingsToNode(element, { with: mirror }, bindingContext);

                // .busy CSS class styles are described on the app module styles
                // wait some time before removing the .busy class so the with binding can finish rendering the content
                var disposable1 = options.target.subscribe(function () {
                    return $(element).addClass('busy');
                }), disposable2 = mirror.subscribe(function () {
                    return setTimeout(function () {
                        return $(element).removeClass('busy');
                    }, 50);
                });

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    disposable1.dispose();
                    disposable2.dispose();
                    mirror.dispose();
                });

                return { controlsDescendantBindings: true };
            }
        };

        /** associates the click handler of a button with an async task. After click
        when the promise is still running the button will have the class "q-working"  */
        ko.bindingHandlers['qclick'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var className = "q-working", $element = $(element), value = ko.unwrap(valueAccessor());

                function clickHandler() {
                    // execute the method and add the class while the promise is still unresolved
                    var promise = value.apply(viewModel);

                    $element.addClass(className);
                    function removeClass() {
                        $element.removeClass(className);
                    }

                    promise.done(removeClass, removeClass);
                }

                $element.bind('click', clickHandler);

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $element.unbind('click', clickHandler);
                });
            }
        };

        function makeToggleVisibleBinding(name, hide, show) {
            ko.bindingHandlers[name] = {
                init: function (element, valueAccessor) {
                    // Initially set the element to be instantly vi
                    $(element).toggle(ko.unwrap(valueAccessor()));
                },
                update: function (element, valueAccessor) {
                    // Whenever the value subsequently changes, slo
                    ko.unwrap(valueAccessor()) ? hide(element) : show(element);
                }
            };
        }
        makeToggleVisibleBinding('fadeVisible', function (x) {
            return $(x).fadeIn();
        }, function (x) {
            return $(x).fadeOut();
        });
        makeToggleVisibleBinding('slideVisible', function (x) {
            return $(x).slideDown();
        }, function (x) {
            return $(x).slideUp();
        });

        /** renders a backbone view inside the given element. the view is closed once the binding
        is cancelled */
        ko.bindingHandlers['view'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var view = ko.unwrap(valueAccessor()), region = new Marionette.Region({ element: $(element) });

                region.show(view).then(function () {
                    // apply bindings if the view doesn't have a view model associated
                    if (!view.options.viewModel) {
                        ko.applyBindingsToDescendants(bindingContext, element);
                    }
                }).done();

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    region.close();
                });

                return { controlsDescendantBindings: true };
            }
        };

        var StringTemplateSource = (function () {
            function StringTemplateSource(template) {
                this.template = template;
            }
            StringTemplateSource.prototype.text = function () {
                return this.template;
            };
            return StringTemplateSource;
        })();

        Knockout.StringTemplateEngine = new ko.nativeTemplateEngine();
        Knockout.StringTemplateEngine['makeTemplateSource'] = function (template) {
            return new StringTemplateSource(template);
        };

        function renderTemplate(element, template, bindingContext) {
            ko.renderTemplate(template, bindingContext, { templateEngine: Knockout.StringTemplateEngine }, element, "replaceChildren");
        }
        Knockout.renderTemplate = renderTemplate;

        function renderTemplateAsync(element, template, bindingContext) {
            Utils.async(function () {
                return renderTemplate(element, template, bindingContext);
            });
        }
        Knockout.renderTemplateAsync = renderTemplateAsync;

        /** renders a string template received as an argument */
        ko.bindingHandlers['stringTemplate'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                renderTemplate(element, ko.unwrap(valueAccessor()), bindingContext);
            }
        };

        /** watch an observableArray for changes to it's elements, and executes the added/removed
        callback for each case */
        function watchObservableArray(array, elementAdded, elementRemoved) {
            return array.subscribe(function (changes) {
                _.each(changes, function (change) {
                    if (change.status === 'added') {
                        elementAdded(change.value);
                    } else if (change.status === 'deleted') {
                        elementRemoved(change.value);
                    }
                });
            }, null, 'arrayChange');
        }
        Knockout.watchObservableArray = watchObservableArray;

        var pageReadyPromise = Q.delay(true, 1500);

        var Stabilizer = (function () {
            function Stabilizer() {
                this.binds = [];
                this.ready = Q.defer();
            }
            Stabilizer.prototype.flow = function () {
                var reflow = false;

                _.each(this.binds, function (bind) {
                    var size = bind.measure();
                    if (size !== bind.previousValue) {
                        reflow = true;
                    }
                    bind.previousValue = size;
                });

                if (reflow) {
                    _.each(this.binds, function (bind) {
                        return bind.resize();
                    });
                    this.scheduleReflow();
                } else {
                    this.binds = null;
                    this.ready.resolve(true);
                }
            };

            Stabilizer.prototype.scheduleReflow = function (timeout) {
                var _this = this;
                if (typeof timeout === "undefined") { timeout = 1500; }
                console.log('reflow');
                setTimeout(function () {
                    return _this.flow();
                }, timeout);
            };

            Stabilizer.prototype.start = function () {
                this.scheduleReflow(500);
                return this.ready.promise;
            };

            Stabilizer.prototype.register = function (measure, resize) {
                if (this.binds !== null) {
                    this.binds.push({
                        measure: measure,
                        resize: resize,
                        previousValue: -1
                    });
                } else {
                    resize();
                }
            };
            return Stabilizer;
        })();
        Knockout.Stabilizer = Stabilizer;

        Knockout.flowStabilizer = new Stabilizer();

        ko.bindingHandlers['measurePrev'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), elementPrev = $element.prev(), direction = ko.unwrap(valueAccessor());

                Knockout.flowStabilizer.register(elementSize, elementResized);

                $element.prevAll().bind(Common.RESIZE, elementResized);

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $element.prevAll().unbind(Common.RESIZE, elementResized);
                });

                function elementSize() {
                    // measure previous elements and set the correct position attribute on the target element
                    return elementPrev.position().top + elementPrev.outerHeight(true);
                }

                function elementResized() {
                    Utils.async(function () {
                        var originalValue = $element.position()[direction], size = elementSize(), animationProperties = {};

                        if (originalValue != size) {
                            animationProperties[direction] = size;

                            // without animation
                            $element.css(animationProperties);
                            Common.triggerResize($element);
                        }
                    });
                }
            }
        };

        /** raise the 'resize' event when the Jigsaw resize event is raised for the current element */
        ko.bindingHandlers['kendoResize'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element);

                $element.bind(Common.RESIZE, elementResized);

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $element.unbind(Common.RESIZE, elementResized);
                });

                function elementResized() {
                    $element.resize();
                }
            }
        };

        /** must be applied to img elements and sets the image source assuming that the property returns
        the image byte information in base64, and as PNG */
        ko.bindingHandlers['imgSrc'] = {
            update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = ko.unwrap(valueAccessor()), binding = "data: image/png; base64," + value;
                $(element).attr('src', binding);
            }
        };

        ko.bindingHandlers['checkbox'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), value = valueAccessor();

                $element.addClass('checkbox');

                if (ko.isWriteableObservable(value)) {
                    $element.click(function (e) {
                        if ($element.hasClass('checked')) {
                            value(false);
                        } else {
                            value(true);
                        }
                        return false;
                    });
                }

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $element.unbind('click');
                });
            },
            update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = ko.unwrap(valueAccessor());

                if (value) {
                    $(element).addClass('checked');
                } else {
                    $(element).removeClass('checked');
                }
            }
        };

        ko.bindingHandlers['checkbox2'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), value = valueAccessor();

                if (ko.isWriteableObservable(value)) {
                    $element.click(function (e) {
                        if ($element.hasClass('checked')) {
                            value(false);
                        } else {
                            value(true);
                        }
                        return false;
                    });
                }

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $element.unbind('click');
                });
            },
            update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = ko.unwrap(valueAccessor());

                if (value) {
                    $(element).addClass('checked');
                } else {
                    $(element).removeClass('checked');
                    //$(element).removeClass('checked');
                }
            }
        };

        ko.bindingHandlers['dropdown'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), $menu = $(element).next(), value = valueAccessor();

                if (value.notCloseWithin) {
                    $menu.on('click', function (e) {
                        return e.stopPropagation();
                    });
                }

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $menu.unbind('click');
                });
            }
        };

        ko.bindingHandlers['dropdownMouseEnter'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element);

                $element.mouseenter(function (e) {
                    $element.addClass('open');
                });

                $element.mouseleave(function (e) {
                    $element.removeClass('open');
                });

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $element.unbind('mouseenter mouseleave');
                });
            }
        };

        ko.bindingHandlers['jarviswidget'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element);

                $element.jarvisWidgets({
                    grid: 'article',
                    widgets: '.jarviswidget',
                    localStorage: true,
                    deleteSettingsKey: '#deletesettingskey-options',
                    settingsKeyLabel: 'Reset settings?',
                    deletePositionKey: '#deletepositionkey-options',
                    positionKeyLabel: 'Reset position?',
                    sortable: true,
                    buttonsHidden: false,
                    // toggle button
                    toggleButton: false,
                    toggleClass: 'fa fa-minus | fa fa-plus',
                    toggleSpeed: 200,
                    onToggle: function () {
                    },
                    // delete btn
                    deleteButton: false,
                    deleteClass: 'fa fa-times',
                    deleteSpeed: 200,
                    onDelete: function () {
                    },
                    // edit btn
                    editButton: false,
                    editPlaceholder: '.jarviswidget-editbox',
                    editClass: 'fa fa-chevron-down | fa fa-chevron-up',
                    editSpeed: 200,
                    onEdit: function () {
                    },
                    // color button
                    colorButton: false,
                    // full screen
                    fullscreenButton: true,
                    fullscreenClass: 'fa fa-expand | fa fa-compress',
                    fullscreenDiff: 3,
                    onFullscreen: function () {
                    },
                    // custom btn
                    customButton: false,
                    customClass: 'folder-10 | next-10',
                    customStart: function () {
                        alert('Hello you, this is a custom button...');
                    },
                    customEnd: function () {
                        alert('bye, till next time...');
                    },
                    // order
                    buttonOrder: '%refresh% %custom% %edit% %toggle% %fullscreen% %delete%',
                    opacity: 1.0,
                    dragHandle: '> header',
                    placeholderClass: 'jarviswidget-placeholder',
                    indicator: true,
                    indicatorTime: 600,
                    ajax: true,
                    timestampPlaceholder: '.jarviswidget-timestamp',
                    timestampFormat: 'Last update: %m%/%d%/%y% %h%:%i%:%s%',
                    refreshButton: true,
                    refreshButtonClass: 'fa fa-refresh',
                    labelError: 'Sorry but there was a error:',
                    labelUpdated: 'Last Update:',
                    labelRefresh: 'Refresh',
                    labelDelete: 'Delete widget:',
                    afterLoad: function () {
                    },
                    rtl: false,
                    onChange: function () {
                    },
                    onSave: function () {
                    },
                    ajaxnav: null
                });

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $element.data('jarvisWidgets', null);
                });
            }
        };

        ko.bindingHandlers['visibleExtended'] = {
            'update': function (element, valueAccessor) {
                var $element = $(element), wrapper = ko.unwrap(valueAccessor()), value = ko.utils.unwrapObservable(wrapper.value()), slide = wrapper.slide || false;

                if (slide) {
                    if (value) {
                        $element.slideDown(200);
                    } else {
                        $element.slideUp(200);
                    }

                    return;
                }
                //call knockout visible data-bind
            }
        };

        ko.bindingHandlers['toogleFullScreen'] = {
            init: function (element, valueAccessor) {
                var $element = $(element), options = ko.unwrap(valueAccessor()), selector = options.wrapperSelector, $wrapper = selector[0] === '#' ? $element.parents(selector) : $element.parents(selector).first(), toggled = false, classes = options.class.split('|');

                $element.children().addClass(classes[0]);

                $element.click(function () {
                    if (toggled) {
                        $wrapper.removeClass('fullscreen-mode');

                        //$wrapper.unwrap();
                        $element.children().removeClass(classes[1]).addClass(classes[0]);
                    } else {
                        $wrapper.addClass('fullscreen-mode');

                        //$wrapper.wrap('<div class="fullscreen-mode"/>');
                        $element.children().removeClass(classes[0]).addClass(classes[1]);
                    }

                    toggled = !toggled;
                });

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $element.unbind('click');
                });
            }
        };

        /** used internally by TemplateSelector to store possible template candidates.
        each template is tested using a match method in the candidate */
        var TemplateCandidate = (function () {
            function TemplateCandidate(template, match) {
                this.template = template;
                this.match = match;
            }
            return TemplateCandidate;
        })();

        /** Used to build a dinamically template selector, that can select a single template
        from a list of candidate templates to render a given viewmodel
        pass the 'template'  */
        var TemplateSelector = (function () {
            function TemplateSelector(fallbackTemplate) {
                if (typeof fallbackTemplate === "undefined") { fallbackTemplate = ""; }
                this.fallbackTemplate = fallbackTemplate;
                this._candidates = [];
            }
            TemplateSelector.prototype.candidate = function (template, match) {
                this._candidates.push(new TemplateCandidate(template, match));
            };

            /** finds the first candidate which template can render the passed viewModel */
            TemplateSelector.prototype.select = function (viewModel) {
                var candidate = _.find(this._candidates, function (c) {
                    return c.match(viewModel);
                });

                if (candidate) {
                    return candidate.template;
                } else {
                    return this.fallbackTemplate;
                }
            };
            return TemplateSelector;
        })();
        Knockout.TemplateSelector = TemplateSelector;

        /** creates a new binding with the specified name that renders the given element */
        function makeTemplateSelector(bindingName, fallbackTemplate) {
            var templateSelector = new Knockout.TemplateSelector(fallbackTemplate);

            ko.bindingHandlers[bindingName] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    ko.applyBindingsToNode(element, {
                        template: {
                            name: function (x) {
                                return templateSelector.select(x);
                            },
                            data: valueAccessor(),
                            templateEngine: Knockout.StringTemplateEngine
                        }
                    }, viewModel);

                    return { 'controlsDescendantBindings': true };
                }
            };

            return templateSelector;
        }
        Knockout.makeTemplateSelector = makeTemplateSelector;

        /** declares the given binding name and returns a template collection that can be used to
        specify the templates used by this binding */
        function makeForeachWithTemplateSelector(bindingName, fallbackTemplate) {
            var templateSelector = new Knockout.TemplateSelector(fallbackTemplate);

            ko.bindingHandlers[bindingName] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    ko.applyBindingsToNode(element, {
                        template: {
                            name: function (x) {
                                return templateSelector.select(x);
                            },
                            foreach: valueAccessor(),
                            templateEngine: Knockout.StringTemplateEngine
                        }
                    }, bindingContext);

                    return { controlsDescendantBindings: true };
                }
            };

            return templateSelector;
        }
        Knockout.makeForeachWithTemplateSelector = makeForeachWithTemplateSelector;

        /** inside a foreach binding, bind an item context to a binding so when the element is
        clicked the context is passed to the observable. Optionally some options can be passed
        to toggle classes when the element is selected */
        ko.bindingHandlers['foreachSelected'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), value = valueAccessor(), options = ko.isObservable(value) ? { value: value } : value, isSelected = ko.computed(function () {
                    return options.value() === bindingContext.$data;
                }), cssBindingOptions = {};
                options = _.defaults(options, { selectedClass: 'k-state-selected' });

                $element.click(function (e) {
                    // mark the context as selected when the element is clicked
                    options.value(bindingContext.$data);
                    e.preventDefault();
                });

                cssBindingOptions[options.selectedClass] = isSelected;
                ko.applyBindingsToNode(element, {
                    css: cssBindingOptions
                }, bindingContext);

                // TODO: Deselect the currently selected item after a lost click... if that's possible to detect with JS
                //function deselectHandler(e: JQueryEventObject) {
                //     if (!e.isDefaultPrevented() && $(e.target).is('div') && options.value() === bindingContext.$data) {
                //        options.value(null);
                //    }
                //}
                //$('body').click(deselectHandler);
                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    isSelected.dispose();
                    $element.unbind('click');
                    //$('body').unbind('click', deselectHandler);
                });
            }
        };

        ko.bindingHandlers['var'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var innerBindingContext = bindingContext.extend(valueAccessor());
                ko.applyBindingsToDescendants(innerBindingContext, element);

                return { controlsDescendantBindings: true };
            }
        };

        /** shows a list of options to select one of them mst likely from an enum */
        ko.bindingHandlers['expandOptions'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var options = ko.unwrap(valueAccessor()), template = templates.widget.expandOptions(options);

                renderTemplateAsync(element, template, options);

                return { controlsDescendantBindings: true };
            }
        };

        /** binds two observables optionally specifing map functions between the observable values */
        function bind(options) {
            var ignoreSync = false, subscription = options.from.subscribe(function (value) {
                if (!ignoreSync) {
                    var correspondingValue = options.forward(value);
                    ignoreSync = true;
                    options.to(correspondingValue);
                    ignoreSync = false;
                }
            }), subscription1 = options.to.subscribe(function (value) {
                if (!ignoreSync) {
                    var correspondingValue = options.backward(value);
                    ignoreSync = true;
                    options.from(correspondingValue);
                    ignoreSync = false;
                }
            }), initialImage = options.forward(options.from());

            // check that the observables are synced
            if (initialImage !== options.to()) {
                options.to(initialImage);
            }

            return {
                dispose: function () {
                    subscription.dispose();
                    subscription1.dispose();
                }
            };
        }
        Knockout.bind = bind;

        /** adds two elements to the target element, that when hovered make the element
        children scroll in their direction.
        Scroll function on hover thanks to http://jsfiddle.net/gaby/xmAvh/ */
        ko.bindingHandlers['virtualScroll'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), children = $element.children().wrapAll("<div class='virtual-scroll-wrapper'></div>").parent(), leftElement = $(templates.widget.VirtualScrollButton()), rightElement = $(templates.widget.VirtualScrollButton());

                $element.addClass('virtual-scroll').prepend(leftElement).append(rightElement);

                var amount = '';
                function scroll() {
                    children.animate({ scrollLeft: amount }, 100, 'linear', function () {
                        if (amount != '') {
                            scroll();
                        }
                    });
                }

                leftElement.hover(function () {
                    amount = '+=10';
                    scroll();
                }, function () {
                    amount = '';
                });
                rightElement.hover(function () {
                    amount = '-=10';
                    scroll();
                }, function () {
                    amount = '';
                });

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    leftElement.unbind('hover');
                    rightElement.unbind('hover');
                });
            }
        };

        /** intended to be used for elements inside a virtualScroll, when the passed value evaluates to true,
        the binding will bring the given element into view */
        ko.bindingHandlers['virtualScrollFocus'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            }
        };

        /** convenience functions to extend existing binding functions, so all extenders are kept in a single place */
        (function (extend) {
            var extenders = new Common.Dict();

            function registerExtender(bindingName) {
                // register binding on extenders dictionary
                extenders.add(bindingName, []);

                var binding = ko.bindingHandlers[bindingName], init = binding.init, update = binding.update, preprocess = binding.preprocess;

                if (init) {
                    binding.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var result = init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                        _.each(extenders.get(bindingName), function (handler) {
                            return handler.init && handler.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                        });
                        return result;
                    };
                }

                if (update) {
                    binding.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                        var result = update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                        _.each(extenders.get(bindingName), function (handler) {
                            return handler.update && handler.update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                        });
                        return result;
                    };
                }

                binding.preprocess = function (value, name, addBindingCallback) {
                    _.each(extenders.get(bindingName), function (handler) {
                        return handler.preprocess && handler.preprocess(value, name, addBindingCallback);
                    });

                    if (preprocess) {
                        return preprocess(value, name, addBindingCallback);
                    } else {
                        return value;
                    }
                };
            }

            function binding(name, options) {
                if (!extenders.contains(name)) {
                    registerExtender(name);
                }

                extenders.get(name).push(options);
            }
            extend.binding = binding;

            function bindingInit(name, init) {
                binding(name, { init: init });
            }
            extend.bindingInit = bindingInit;

            function bindingUpdate(name, update) {
                binding(name, { update: update });
            }
            extend.bindingUpdate = bindingUpdate;

            function bindingPreprocess(name, preprocess) {
                binding(name, { preprocess: preprocess });
            }
            extend.bindingPreprocess = bindingPreprocess;

            /** can be used as preprocessor function on bindings that can be used without any binding value */
            function emptyBindingPreprocess(value) {
                return value || '{}';
            }
            extend.emptyBindingPreprocess = emptyBindingPreprocess;
        })(Knockout.extend || (Knockout.extend = {}));
        var extend = Knockout.extend;

        function makeBindingHandlerNotifyResize(bindingName) {
            Knockout.extend.bindingUpdate(bindingName, function (element) {
                return Utils.async(function () {
                    return Common.triggerResize($(element));
                });
            });
        }
        makeBindingHandlerNotifyResize('visible');

        /** creates a new binding called 'mark'+name, that creates a new field on the context
        for child bindings named '$jigsaw'+name; containing the specified mark */
        function createContextMarkBinding(name, mark) {
            var bindingName = 'mark' + name, contextKey = '$jigsaw' + name;

            // create the binging
            ko.bindingHandlers[bindingName] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = {};
                    options[contextKey] = mark ? mark() : valueAccessor();

                    var context = bindingContext.extend(options);

                    ko.applyBindingsToDescendants(context, element);
                    return { controlsDescendantBindings: true };
                }
            };

            return {
                bindingName: bindingName,
                contextKey: contextKey
            };
        }
        Knockout.createContextMarkBinding = createContextMarkBinding;

        var Ribbon;
        (function (Ribbon) {
            var RibbonTabStrip = (function (_super) {
                __extends(RibbonTabStrip, _super);
                function RibbonTabStrip(element, collapsed, options) {
                    if (typeof options === "undefined") { options = {}; }
                    var _this = this;
                    _super.call(this, element, _.defaults(options, {
                        animation: false
                    }));
                    this.collapsed = collapsed;
                    this.disposables = [];
                    this.lastTab = null;

                    var firstTabActivated = true;

                    // Triggered just after a tab is being made visible, but before the end of the animation
                    this.bind('activate', function () {
                        // don't active any tab if the ribbonTabStrip is initialized collapsed
                        if (!firstTabActivated || !collapsed()) {
                            _this.tabActivated();
                        } else {
                            // first tab activated and initialized collapsed
                            _this.collapse();
                        }
                        firstTabActivated = false;
                    });

                    this.disposables.push(collapsed.subscribe(function (x) {
                        if (x) {
                            _this.collapse();
                        } else {
                            _this.expand();
                        }
                    }));
                }
                RibbonTabStrip.prototype.collapse = function () {
                    this.wrapper.find('.k-tabstrip-items > li').removeClass('k-tab-on-top k-state-active');
                    this.wrapper.find('.k-content').css({ display: 'none', position: 'absolute', left: 0, right: 0 });

                    this.triggerResize();
                };

                RibbonTabStrip.prototype.expand = function () {
                    this.wrapper.find('.k-content').css({ position: 'relative', left: 0, right: 0 });
                    this.select(this.lastTab);

                    this.triggerResize();
                };

                RibbonTabStrip.prototype.triggerResize = function () {
                    Common.triggerResize(this.wrapper);
                    Common.triggerResize(this.wrapper.parent('.ribbon')); // trigger the resize event on the ribbon object
                };

                RibbonTabStrip.prototype.tabActivated = function () {
                    this.lastTab = this.select();
                    this.collapsed(false);
                };

                RibbonTabStrip.prototype.destroy = function () {
                    _super.prototype.destroy.call(this);
                    this.unbind('activate');
                    _.forEach(this.disposables, function (disposable) {
                        return disposable.dispose();
                    });
                };
                return RibbonTabStrip;
            })(kendo.ui.TabStrip);

            ko.bindingHandlers['ribbonTabStrip'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.unwrap(valueAccessor());

                    // process descendant bindings before creating the tab-strip
                    ko.applyBindingsToDescendants(bindingContext, element);

                    //setTimeout(()=> tabStrip.triggerResize(), 500);
                    var tabStrip = new RibbonTabStrip(element, options.collapsed);

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        tabStrip.destroy();
                    });

                    return { controlsDescendantBindings: true };
                }
            };
        })(Ribbon || (Ribbon = {}));

        (function (Keytips) {
            var CustomKeyTipTree = (function () {
                function CustomKeyTipTree(root) {
                    this.root = root;
                }
                /**
                depth first search through the tree with certain predicate p
                */
                CustomKeyTipTree.prototype._dfs = function (node, p) {
                    if (p(node)) {
                        return node;
                    } else {
                        if (node.children) {
                            for (var i = 0; i < node.children.length; i++) {
                                var result = this._dfs(node.children[i], p);
                                if (result != null)
                                    return result;
                            }
                        }
                        return null;
                    }
                };

                CustomKeyTipTree.prototype.findNodeByLabel = function (label) {
                    return this._dfs(this.root, function (element) {
                        return element.label == label;
                    });
                };

                CustomKeyTipTree.prototype.findNodeByJQueryElement = function (element) {
                    return this._dfs(this.root, function (node) {
                        return node.element == element;
                    });
                };
                return CustomKeyTipTree;
            })();

            var CustomKeyTipNode = (function () {
                function CustomKeyTipNode(element, label, key, action, after, zindex) {
                    if (typeof zindex === "undefined") { zindex = 0; }
                    this.element = element;
                    this.label = label;
                    this.key = key;
                    this.action = action;
                    this.after = after;
                    this.zindex = zindex;
                    this.children = [];
                }
                CustomKeyTipNode.prototype.addChild = function (child) {
                    if (!child.key) {
                        child.key = this.getNewChildrenKey(child.zindex);
                    }

                    child.parent = this;

                    for (var i = 0; i < this.children.length; i++) {
                        if (child.zindex > this.children[i].zindex) {
                            this.children.splice(i, 0, child);
                            return;
                        }
                    }

                    this.children.push(child);
                };

                CustomKeyTipNode.prototype.removeChild = function (child) {
                    //console.log(child);
                    var index = this.children.indexOf(child);

                    if (index > -1) {
                        this.children.splice(index, 1);
                    }
                };

                CustomKeyTipNode.prototype.validKey = function (key, zindex) {
                    return !_.some(this.children, function (x) {
                        return x.key.indexOf(key) == 0 && x.zindex == zindex;
                    });
                };

                CustomKeyTipNode.prototype.getNewChildrenKey = function (zindex) {
                    for (var i = 65; i <= 90; i++) {
                        if (this.validKey(String.fromCharCode(i), zindex))
                            return String.fromCharCode(i);
                    }
                    return 'ZZ';
                };

                CustomKeyTipNode.prototype.getNewChildrenKeyStartWith = function (start, zindex) {
                    for (var i = 65; i <= 90; i++) {
                        if (this.validKey(start + String.fromCharCode(i), zindex))
                            return start + String.fromCharCode(i);
                    }
                    return 'ZZ';
                };
                return CustomKeyTipNode;
            })();

            var CustomKeyTipLeaf = (function () {
                function CustomKeyTipLeaf(element, key, action, after, zindex) {
                    if (typeof zindex === "undefined") { zindex = 0; }
                    this.element = element;
                    this.key = key;
                    this.action = action;
                    this.after = after;
                    this.zindex = zindex;
                }
                return CustomKeyTipLeaf;
            })();

            var zIndexBaseBindingInfo = createContextMarkBinding('ZIndexBase');

            ko.bindingHandlers['keyTips'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = ko.unwrap(valueAccessor()), parent = (value.parentGroup) ? tree.findNodeByLabel(value.parentGroup) : root, zindex = (value.zindex || 0) + (bindingContext[zIndexBaseBindingInfo.contextKey] || 0), key = value.key || parent.getNewChildrenKey(zindex), leaf = new CustomKeyTipLeaf(element, key, function () {
                        return $(element).click();
                    }, null, zindex);

                    parent.addChild(leaf);

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        // TODO add binding disposal
                        leaf.parent.removeChild(leaf);
                    });
                }
            };

            ko.bindingHandlers['keyTipsGroup'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = ko.unwrap(valueAccessor()), parent = (value.parentGroup) ? tree.findNodeByLabel(value.parentGroup) : root, zindex = (value.zindex || 0) + (bindingContext[zIndexBaseBindingInfo.contextKey] || 0), key = (value.key) ? value.key : ((value.keyStartWith) ? parent.getNewChildrenKeyStartWith(value.keyStartWith, zindex) : parent.getNewChildrenKey(zindex)), node = new CustomKeyTipNode(element, value.group, key, function () {
                        return $(element).click();
                    }, null, zindex);

                    parent.addChild(node);

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        node.parent.removeChild(node);
                    });
                }
            };

            ko.bindingHandlers['keyTipsKendoTab'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = ko.unwrap(valueAccessor()), parent = (value.parentGroup) ? tree.findNodeByLabel(value.parentGroup) : root, zindex = (value.zindex || 0) + (bindingContext[zIndexBaseBindingInfo.contextKey] || 0), key = (value.key) ? value.key : parent.getNewChildrenKey(zindex), node = new CustomKeyTipNode($(element).find('a')[0], value.group, key, function () {
                        return $(element).find('a').get(0).click();
                    }, null, zindex);

                    parent.addChild(node);

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        // TODO add binding disposal
                        node.parent.removeChild(node);
                    });
                }
            };

            ko.bindingHandlers['keyTipsInput'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = ko.unwrap(valueAccessor()), parent = (value.parentGroup) ? tree.findNodeByLabel(value.parentGroup) : root, zindex = (value.zindex || 0) + (bindingContext[zIndexBaseBindingInfo.contextKey] || 0), key = value.key || parent.getNewChildrenKey(zindex), leaf = new CustomKeyTipLeaf($(element).parent()[0], key, function () {
                        return $(element).focus();
                    }, null, zindex);

                    parent.addChild(leaf);

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        leaf.parent.removeChild(leaf);
                    });
                }
            };

            ko.bindingHandlers['keyTipsGrid'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = ko.unwrap(valueAccessor()), parent = (value.parentGroup) ? tree.findNodeByLabel(value.parentGroup) : root, zindex = (value.zindex || 0) + (bindingContext[zIndexBaseBindingInfo.contextKey] || 0), key = value.key || parent.getNewChildrenKey(zindex), leaf = new CustomKeyTipLeaf($(element).parent()[0], key, function () {
                        return $(element).find('table').get(0).focus();
                    }, null, zindex);

                    parent.addChild(leaf);

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        leaf.parent.removeChild(leaf);
                    });
                }
            };

            var KeyTipsController = (function () {
                function KeyTipsController(root) {
                    var _this = this;
                    this.keyTipPopups = [];
                    this.stack = '';

                    this.settings = {
                        popupClass: 'KeyTips__popup',
                        offsets: {
                            label: {
                                left: -20,
                                top: 2
                            },
                            button: {
                                left: -3,
                                top: -3
                            },
                            anchor: {
                                left: 2,
                                top: 9
                            },
                            text: {
                                left: -3,
                                top: -3
                            },
                            other: {
                                left: -3,
                                top: -3
                            }
                        },
                        b: 1
                    };

                    this.root = tree.root;

                    this.lastKeyTipsGroupSelected = tree.root;

                    this.keyTipsSelection = '';

                    $(document).keydown(function (e) {
                        return _this.handleKeyDown(e);
                    });
                    $(document).click(function (e) {
                        return _this.handleClick(e);
                    });
                }
                KeyTipsController.prototype.handleClick = function (e) {
                    if (this.keyTipsShowing) {
                        this.reset();
                    }
                };

                KeyTipsController.prototype.handleKeyDown = function (e) {
                    var _this = this;
                    //Esc presed
                    if (e.keyCode == 27 && this.keyTipsShowing) {
                        this.back();
                    } else if (this.keyTipsShowing && (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40)) {
                        this.reset();
                    } else if (this.shiftAndAltPressed(e)) {
                        if (this.keyTipsShowing) {
                            this.reset();
                        } else {
                            $(document.activeElement).blur();
                            this.showKeyTipsGroupSelection();
                        }
                    } else if (this.keyTipsShowing) {
                        this.keyTipsSelection = String.fromCharCode(e.keyCode);

                        if (this.keyTipsSelection.length == 1) {
                            setTimeout(function () {
                                return _this.handleKeyTipsSelection();
                            }, 250);
                        }
                    }
                };

                KeyTipsController.prototype.handleKeyTipsSelection = function () {
                    this.handleKeyTipPressed();
                    this.keyTipsSelection = '';
                };

                KeyTipsController.prototype.handleKeyTipPressed = function () {
                    var temp = this.stack + this.keyTipsSelection;
                    var zindex = _.max(_.map(this.lastKeyTipsGroupSelected.children, function (x) {
                        return x.zindex;
                    }));

                    var flag = _.some(this.lastKeyTipsGroupSelected.children, function (x) {
                        return x.key.indexOf(temp) == 0 && x.zindex == zindex && $(x.element).is(":visible");
                    });
                    this.stack = (flag) ? temp : this.stack;

                    for (var i = 0; i < this.lastKeyTipsGroupSelected.children.length; i++) {
                        var child = this.lastKeyTipsGroupSelected.children[i];
                        if (child.key == this.stack && child.zindex == zindex && $(child.element).is(":visible")) {
                            this.hideKeyTipsGroupSelection();
                            this.keyTipsShowing = false;
                            child.action();
                            this.stack = '';
                            if (child.children) {
                                this.lastKeyTipsGroupSelected = child;
                                this.showKeyTipsGroupSelection();
                            } else {
                                this.reset();
                            }
                        } else if (this.stack.length > 0 && child.key.indexOf(this.stack) != 0) {
                            this.keyTipPopups[i].css("display", 'none');
                        }
                    }
                };

                KeyTipsController.prototype.shiftAndAltPressed = function (e) {
                    return (e.keyCode == 16 && e.altKey) || (e.keyCode == 18 && e.shiftKey);
                };

                KeyTipsController.prototype.back = function () {
                    this.stack = '';
                    if (this.lastKeyTipsGroupSelected.after)
                        this.lastKeyTipsGroupSelected.after();
                    this.hideKeyTipsGroupSelection();
                    if (this.lastKeyTipsGroupSelected.parent) {
                        this.lastKeyTipsGroupSelected = this.lastKeyTipsGroupSelected.parent;
                        this.showKeyTipsGroupSelection();
                    } else {
                        this.reset();
                    }
                };

                KeyTipsController.prototype.showKeyTipsGroupSelection = function () {
                    if (this.keyTipPopups.length == 0) {
                        var zindex = _.max(_.map(this.lastKeyTipsGroupSelected.children, function (x) {
                            return x.zindex;
                        }));
                        for (var i = 0; i < this.lastKeyTipsGroupSelected.children.length; i++) {
                            var children = this.lastKeyTipsGroupSelected.children[i];
                            var popup = this.createPopup(children.element, children.key, this.settings);

                            if (children.zindex == zindex) {
                                popup.toggle(true);
                            }

                            this.keyTipPopups.push(popup);
                        }
                    }

                    this.keyTipsShowing = true;
                };

                KeyTipsController.prototype.hideKeyTipsGroupSelection = function () {
                    $.each(this.keyTipPopups, function () {
                        $(this).remove();
                    });

                    this.keyTipPopups = [];
                };

                KeyTipsController.prototype.reset = function () {
                    if (this.lastKeyTipsGroupSelected.after)
                        this.lastKeyTipsGroupSelected.after();
                    this.stack = '';
                    this.lastKeyTipsGroupSelected = this.root;
                    this.hideKeyTipsGroupSelection();
                    this.keyTipsShowing = false;
                };

                KeyTipsController.prototype.getOffset = function (element, settings) {
                    var $el = $(element);

                    if ($el.is("label")) {
                        return settings.offsets.label;
                    } else if ($el.is(":button, :submit, :reset, :image")) {
                        return settings.offsets.button;
                    } else if ($el.is("a")) {
                        return settings.offsets.anchor;
                    } else if ($el.is(":text, textarea")) {
                        return settings.offsets.text;
                    } else {
                        return settings.offsets.other;
                    }
                };

                KeyTipsController.prototype.getPopupLocation = function (element, settings) {
                    var $el = $(element), popupLocation, offset;

                    if ($el.is(":hidden") || $el.css("visibility") === "hidden") {
                        return false;
                    }

                    popupLocation = $el.offset();
                    offset = this.getOffset(element, settings);

                    return {
                        left: popupLocation.left + offset.left,
                        top: popupLocation.top + offset.top
                    };
                };

                KeyTipsController.prototype.createPopup = function (field, accessKey, settings) {
                    var popup = $("<div/>").text(accessKey).addClass(settings.popupClass).prependTo(field);

                    return popup;
                };
                return KeyTipsController;
            })();

            var root = new CustomKeyTipNode(null, null, null, null, null), tree = new CustomKeyTipTree(root), controller = new KeyTipsController(root);
        })(Knockout.Keytips || (Knockout.Keytips = {}));
        var Keytips = Knockout.Keytips;

        (function (HtmlTunneling) {
            var HtmlTunnel = (function () {
                function HtmlTunnel() {
                }
                HtmlTunnel.prototype.setEntrance = function (entrance) {
                    this.entrance = entrance;
                };

                HtmlTunnel.prototype.setExit = function (exit) {
                    if (!this.exit)
                        this.exit = exit;
                };

                HtmlTunnel.prototype.makeFlow = function () {
                    //console.log($(this.exit));
                    //console.log($(this.entrance).html());
                    $(this.exit).html($(this.entrance).html());

                    //$(this.entrance).empty();
                    console.log('FLOW DONE!!');
                };

                HtmlTunnel.prototype.isComplete = function () {
                    return (this.entrance && this.exit) ? true : false;
                };

                HtmlTunnel.prototype.flowsCount = function () {
                };

                HtmlTunnel.prototype.getEntrance = function () {
                    return this.entrance;
                };

                HtmlTunnel.prototype.getExit = function () {
                    return this.exit;
                };
                return HtmlTunnel;
            })();
            HtmlTunneling.HtmlTunnel = HtmlTunnel;

            var HtmlTunnelsDict = {};

            ko.bindingHandlers['htmlTunnel'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = ko.unwrap(valueAccessor()), id = options.id, end = options.end;

                    if (!HtmlTunnelsDict[id]) {
                        HtmlTunnelsDict[id] = new HtmlTunneling.HtmlTunnel();
                    }

                    var tunnel = HtmlTunnelsDict[id];

                    if (end === 'entrance') {
                        tunnel.setEntrance(element);
                    } else {
                        tunnel.setExit(element);
                    }

                    if (tunnel.isComplete()) {
                        tunnel.makeFlow();

                        ko.applyBindingsToDescendants(bindingContext, tunnel.getExit());
                    }

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        for (var id in HtmlTunnelsDict) {
                            var t = HtmlTunnelsDict[id];

                            if (t.getEntrance() == element) {
                                var exit = t.getExit();

                                var children = $(exit).children();

                                _.forEach(children, function (x) {
                                    var bindedElement = $(x).children('a')[0];

                                    ko.cleanNode(bindedElement);
                                });
                            }

                            if (t.getExit() == element) {
                                delete HtmlTunnelsDict[id];
                            }
                        }
                    });
                }
            };
        })(Knockout.HtmlTunneling || (Knockout.HtmlTunneling = {}));
        var HtmlTunneling = Knockout.HtmlTunneling;

        var PinUnpinStatus;
        (function (PinUnpinStatus) {
            PinUnpinStatus[PinUnpinStatus["Expanded"] = 0] = "Expanded";
            PinUnpinStatus[PinUnpinStatus["Collapsed"] = 1] = "Collapsed";
            PinUnpinStatus[PinUnpinStatus["Preview"] = 2] = "Preview";
        })(PinUnpinStatus || (PinUnpinStatus = {}));

        ko.bindingHandlers['pinunpin'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), collapsedInitially = valueAccessor(), status = ko.observable(collapsedInitially && ko.unwrap(collapsedInitially) ? 1 /* Collapsed */ : 0 /* Expanded */), checkboxObservable = ko.computed({
                    read: function () {
                        return status() === 0 /* Expanded */;
                    },
                    write: function (value) {
                        return status(value ? 0 /* Expanded */ : 1 /* Collapsed */);
                    }
                }), collapsedObservable = ko.computed(function () {
                    return status() === 1 /* Collapsed */;
                }), context = bindingContext.extend({
                    '$jigsawPinUnpinCheckbox': checkboxObservable
                });

                ko.applyBindingsToNode(element, { css: { 'pin-unpin-collapsed': collapsedObservable } }, bindingContext);
                ko.applyBindingsToDescendants(context, element);

                // this can be used as a helper for the click handler, in case the checkbox binding isn't appropiate
                checkboxObservable['negate'] = function (_, e) {
                    checkboxObservable(!checkboxObservable());
                    e.preventDefault();
                    e.stopPropagation();
                };

                $element.click(function () {
                    if (status() === 1 /* Collapsed */) {
                        status(2 /* Preview */);
                    }
                });

                /** detect click outside the bounds of an element, thanks to http://stackoverflow.com/a/7385673/763705 */
                function clickOutsideBounds(e) {
                    if (status() === 2 /* Preview */ && !$element.is(e.target) && $element.has(e.target).length === 0) {
                        status(1 /* Collapsed */);
                    }
                }

                $(document).mouseup(clickOutsideBounds);

                if (collapsedInitially && ko.isObservable(collapsedInitially)) {
                    status.subscribe(function (x) {
                        return collapsedInitially(x === 1 /* Collapsed */);
                    });
                }

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $element.unbind('click');
                    $(document).unbind('mouseup', clickOutsideBounds);
                });

                return { controlsDescendantBindings: true };
            }
        };

        (function (SwiperEffect) {
            var MinimumHeight = 300;

            var RibbonTabSwiper = (function () {
                function RibbonTabSwiper(settings) {
                    var _this = this;
                    this.settings = settings;
                    this.disposables = [];
                    this.container = null;
                    this.ribbonTabSwiper = null;
                    this.N = 0;
                    this.tabActiveClass = 'active';
                    this.lastHeight = null;
                    this.element = settings.element;

                    this.tabs = settings.tabs;
                    this.collapsed = settings.collapsed;
                    this.speed = settings.speed;

                    this.container = $(this.element).find('.swiper-container')[0];

                    //$(this.element).find('.swiper-slide').css('width', screen.width);
                    this.initSwiper();

                    this.collapseSubscription();

                    this.tabsSubscription();

                    //set first tab as active
                    $(this.element).find(".tabs li").first().addClass(this.tabActiveClass);

                    //set tabs handler
                    $(this.element).on('touchstart mousedown click', '.tabs a', function (e) {
                        return _this.tabsHandler(e);
                    });

                    $(this.element).on('touchend click', '.content-slide-end', function (e) {
                        return _this.endsOfEachSlideClickHandler(e);
                    });

                    //patch to recalculate swipe slider margins
                    setTimeout(function () {
                        return _this.refresh();
                    }, 5000);

                    //handle window resize for responsive behavior
                    $(window).resize(function () {
                        return _this.handleViewPortResize();
                    });
                }
                RibbonTabSwiper.prototype.updateTabsStatus = function () {
                    $(this.element).find(".tabs " + "." + this.tabActiveClass).removeClass(this.tabActiveClass);
                    $(this.element).find(".tabs li").eq(this.ribbonTabSwiper.activeIndex).addClass(this.tabActiveClass);
                };

                RibbonTabSwiper.prototype.initSwiper = function () {
                    var _this = this;
                    this.ribbonTabSwiper = new Swiper(this.container, {
                        speed: this.speed,
                        onSlideChangeStart: function () {
                            _this.updateTabsStatus();
                        },
                        onTouchStart: function () {
                            _this.wrapperPositionBefore = _this.ribbonTabSwiper.getWrapperTranslate();
                        },
                        onTouchEnd: function () {
                            _this.wrapperPositionAfter = _this.ribbonTabSwiper.getWrapperTranslate();
                            _this.updateTabsStatus();
                        },
                        freeMode: true,
                        //freeModeFluid: true,
                        slidesPerView: 'auto'
                    });
                };

                RibbonTabSwiper.prototype.collapseSubscription = function () {
                    var _this = this;
                    this.disposables.push(this.collapsed.subscribe(function (x) {
                        if (x) {
                            _this.collapse();
                        } else {
                            _this.expand();
                        }
                    }));
                };

                RibbonTabSwiper.prototype.tabsSubscription = function () {
                    var _this = this;
                    this.N = $(this.element).find(".tabs li").length;

                    this.disposables.push(this.tabs.subscribe(function (x) {
                        if (x.length < _this.N) {
                            _this.popSlider();

                            _this.activateSlide(0);
                        }

                        if (x.length > _this.N) {
                            _this.pushSlider();

                            _this.activateSlide(_this.N);
                        }

                        _this.N = x.length;
                    }));
                };

                RibbonTabSwiper.prototype.activateSlide = function (index) {
                    var tab = $(this.element).find(".tabs li").get(index);
                    setTimeout(function () {
                        return $(tab).children().first().click();
                    }, 200);
                };

                RibbonTabSwiper.prototype.tabsHandler = function (e) {
                    e.preventDefault();

                    $(this.element).find(".tabs " + "." + this.tabActiveClass).removeClass(this.tabActiveClass);

                    var $target = $(e.currentTarget).parent();

                    $target.addClass(this.tabActiveClass);

                    this.ribbonTabSwiper.swipeTo($target.index());
                };

                RibbonTabSwiper.prototype.refresh = function () {
                    this.ribbonTabSwiper.reInit(true);
                };

                RibbonTabSwiper.prototype.pushSlider = function () {
                    this.refresh();
                };

                RibbonTabSwiper.prototype.popSlider = function () {
                    this.refresh();
                };

                RibbonTabSwiper.prototype.collapse = function () {
                    this.refresh();
                    this.triggerResize();
                };

                RibbonTabSwiper.prototype.expand = function () {
                    this.refresh();
                    this.triggerResize();
                };

                RibbonTabSwiper.prototype.triggerResize = function () {
                    Common.triggerResize($(this.element).parent().parent());
                };

                RibbonTabSwiper.prototype.handleViewPortResize = function () {
                    var currentHeight = $(document).height();

                    if (currentHeight != this.lastHeight && currentHeight < MinimumHeight) {
                        this.collapsed(true);
                        this.lastHeight = currentHeight;
                    }
                };

                RibbonTabSwiper.prototype.destroy = function () {
                    $(this.element).unbind('touchstart touchend mousedown click');

                    this.ribbonTabSwiper.destroy();

                    _.forEach(this.disposables, function (disposable) {
                        return disposable.dispose();
                    });
                };

                RibbonTabSwiper.prototype.endsOfEachSlideClickHandler = function (e) {
                    if (this.wrapperPositionAfter <= this.wrapperPositionBefore) {
                        this.ribbonTabSwiper.swipeNext();
                    } else {
                        this.ribbonTabSwiper.swipePrev();
                    }
                };
                return RibbonTabSwiper;
            })();

            ko.bindingHandlers['ribbonTabsSwiper'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    // bind our child elements (which will create the virtual foreach elements)
                    ko.applyBindingsToDescendants(bindingContext, element);

                    var options = ko.unwrap(valueAccessor()), speed = options.speed || 200, emptySpaces = options.emptySpaces || false, ribbonTabsSwiper = new RibbonTabSwiper({ element: element, tabs: options.tabs, collapsed: options.collapsed, speed: speed, emptySpaces: emptySpaces });

                    /*                ko.utils.domNodeDisposal.addDisposeCallback(element, () => {
                    ribbonTabsSwiper.destroy();
                    });*/
                    // tell KO we have already bound the children
                    return { controlsDescendantBindings: true };
                }
            };
        })(Knockout.SwiperEffect || (Knockout.SwiperEffect = {}));
        var SwiperEffect = Knockout.SwiperEffect;
    })(exports.Knockout || (exports.Knockout = {}));
    var Knockout = exports.Knockout;

    (function (DragDrop) {
        /** this variable holds data that is being dragged */
        var DragData = null;

        function makeDraggable(element, value) {
            var $element = $(element);

            if (!value.cursorOffset) {
                value.cursorOffset = { left: 5, bottom: 30 };
            }

            return $element.draggable({
                appendTo: "body",
                scope: value.group,
                //filter: "No alternative found",
                axis: value.axis,
                cursorAt: value.cursorOffset,
                zIndex: 20000,
                helper: function (item) {
                    var dragHint;
                    if (_.isString(value.hint)) {
                        if (value.data() !== null) {
                            dragHint = $(value.hint);
                            var data = ko.unwrap(value.data);
                            ko.applyBindings(data, dragHint[0]);
                            ko.cleanNode(dragHint[0]);
                        } else {
                            $element.draggable("disable");
                            return $('<div style="display: none;"></div>');
                        }
                    } else {
                        // else just clone the given element
                        var hintTarget = value.hintTarget ? $element.find(value.hintTarget) : $element;
                        dragHint = hintTarget.clone().height($element.height()).width($element.width());
                    }

                    if (!value.wrap) {
                        return dragHint.addClass('drag-hint');
                    } else {
                        return $(templates.DragWrap()).addClass('drag-hint').append(dragHint);
                    }
                },
                start: function (e) {
                    DragData = ko.unwrap(value.data);
                    $element.addClass('dragging');
                },
                stop: function (e) {
                    DragData = null;
                    $element.removeClass('dragging');
                    try  {
                        $element.draggable("enable");
                    } catch (e) {
                        // Do nothing if the element is not a draggable
                    }
                }
            });
        }
        DragDrop.makeDraggable = makeDraggable;

        ko.bindingHandlers['jQueryUIDraggable'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = ko.unwrap(valueAccessor()), draggable = makeDraggable(element, value);

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    draggable && draggable.draggable() && draggable.draggable("destroy");
                });
            }
        };

        function makeDropTarget(element, dropViewModel, value) {
            var $element = $(element);

            return $element.droppable({
                scope: value.group,
                tolerance: 'touch',
                drop: function () {
                    DragData && value.drop.call(dropViewModel, DragData);
                    $element.removeClass('can-drop');
                },
                hoverClass: 'can-drop',
                over: function (e, ui) {
                    ui.helper.addClass('can-drop');
                },
                out: function (e, ui) {
                    ui.helper.removeClass('can-drop');
                }
            });
        }
        DragDrop.makeDropTarget = makeDropTarget;

        ko.bindingHandlers['jQueryUIDropTarget'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), value = ko.unwrap(valueAccessor()), target = value.toParent ? $element.parents(value.toParent)[0] : element, dropTarget = makeDropTarget(target, viewModel, value);

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    dropTarget && dropTarget.droppable() && dropTarget.droppable("destroy");
                });
            }
        };
    })(exports.DragDrop || (exports.DragDrop = {}));
    var DragDrop = exports.DragDrop;

    (function (Collection) {
        

        

        var SetCollection = (function () {
            function SetCollection() {
                this.items = ko.observableArray();
            }
            SetCollection.prototype.add = function (item) {
                this.items.push(item);
            };

            SetCollection.prototype.remove = function () {
                var items = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    items[_i] = arguments[_i + 0];
                }
                this.items.removeAll(items);
            };

            /** to be implemented in derived classes, always returns true */
            SetCollection.prototype.belongsTo = function (item) {
                return true;
            };
            return SetCollection;
        })();
        Collection.SetCollection = SetCollection;

        /** this class is intended to compose a collection from different collections, where
        each collection represent a disjunt set in the space of <T> */
        var MultiSetCollection = (function () {
            /** if 'storeMissingItems' == true then all elements that doesn't below to any set
            will be stored in a special part created just for them */
            function MultiSetCollection(storeMissingItems) {
                if (typeof storeMissingItems === "undefined") { storeMissingItems = false; }
                var _this = this;
                this.storeMissingItems = storeMissingItems;
                this.items = ko.observableArray();
                this.parts = ko.observableArray();
                this.missingItems = new SetCollection();
                // TODO improve union algorithm between parts
                ko.computed(function () {
                    var partItems = _.map(_this.parts(), function (part) {
                        return part.items();
                    });
                    if (storeMissingItems) {
                        partItems.push(_this.missingItems.items());
                    }
                    var items = _.union.apply(_, partItems);
                    return _this.mapItems(items);
                }).extend({ throttle: 500 }).subscribe(function (items) {
                    // remove all items without sending any notification
                    _this.items().splice(0);
                    _this.items.push.apply(_this.items, items);
                });
            }
            /** modifies the resulting array in some way just before updating it */
            MultiSetCollection.prototype.mapItems = function (items) {
                return items;
            };

            /** adds a new part to compose the items of this collection */
            MultiSetCollection.prototype.blendWith = function () {
                var collections = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    collections[_i] = arguments[_i + 0];
                }
                this.parts.push.apply(this.parts, collections);
            };

            MultiSetCollection.prototype.add = function (item) {
                // find the collection where this items fits
                var collection = _.find(this.parts(), function (x) {
                    return x.belongsTo(item);
                });
                if (collection) {
                    collection.add(item);
                } else if (this.storeMissingItems) {
                    this.missingItems.add(item);
                } else {
                    throw new Error('there is no place where I can add the passed item');
                }
            };

            MultiSetCollection.prototype.remove = function (item) {
                var collection = _.find(this.parts(), function (x) {
                    return x.belongsTo(item);
                });
                if (collection) {
                    collection.remove(item);
                } else if (this.storeMissingItems) {
                    this.missingItems.remove(item);
                } else {
                    throw new Error('the given item does not belong to any set');
                }
            };

            MultiSetCollection.prototype.belongsTo = function (item) {
                return _.any(this.parts(), function (x) {
                    return x.belongsTo(item);
                }) || this.storeMissingItems;
            };

            MultiSetCollection.prototype.findPartContaining = function (item) {
                return _.find(this.parts(), function (part) {
                    return part.belongsTo(item);
                });
            };
            return MultiSetCollection;
        })();
        Collection.MultiSetCollection = MultiSetCollection;
    })(exports.Collection || (exports.Collection = {}));
    var Collection = exports.Collection;

    /** features borrowed from Backbone.Marionette in order to remove all references
    to these libraries from Jigsaw */
    (function (Marionette) {
        /** combination between Backbone and Marionette base View class */
        var View = (function () {
            function View(options) {
                this.options = options;
                /** returns the array of elements created after the view was rendered */
                this.element = null;
                this._renderedEvent = new Common.Event();
                this._closedEvent = new Common.Event();
            }
            Object.defineProperty(View.prototype, "isClosed", {
                get: function () {
                    return this.element === null;
                },
                enumerable: true,
                configurable: true
            });

            /** helper function to set the view model after the view has been created.
            It will throw an exception if there's already a viewmodel setted */
            View.prototype.withViewModel = function (viewModel) {
                if (this.options.viewModel) {
                    throw new Error('a view can only have one view-model associated');
                }
                this.options.viewModel = viewModel;

                return this;
            };

            /** returns the data that should be used to generate the template if any */
            View.prototype.templateData = function () {
                return null;
            };

            /** renders the current view, this method should be protected. */
            View.prototype.renderOverride = function () {
                var _this = this;
                return Q(this.options.template(this.templateData())).then(function (template) {
                    _this.element = $(template);
                });
            };

            View.prototype.render = function () {
                var _this = this;
                if (!this.isClosed) {
                    this.close();
                }

                return this.renderOverride().finally(function () {
                    _this._renderedEvent.fire();
                });
            };

            View.prototype.rendered = function (handler) {
                return this._renderedEvent.add(handler);
            };

            View.prototype.find = function (selector) {
                return this.element.find(selector);
            };

            View.prototype.close = function () {
                if (this.isClosed)
                    return;

                if (this.element) {
                    // clean knockout bindings if a view model was specified
                    if (this.options.viewModel) {
                        this.element.each(function (_, element) {
                            ko.cleanNode(element);
                        });
                    }

                    this._closedEvent.fire();

                    this.element = null;
                }
            };

            View.prototype.closed = function (handler) {
                return this._closedEvent.add(handler);
            };

            /** this method is called by the parent region when the view is attached to the DOM,
            don't call it. */
            View.prototype.domReady = function () {
                var _this = this;
                if (this.options.viewModel) {
                    this.element.each(function (_, element) {
                        if (element.nodeType !== Node.TEXT_NODE) {
                            ko.applyBindings(_this.options.viewModel, element);
                        }
                    });
                }
            };
            return View;
        })();
        Marionette.View = View;

        /** returns a function that can be used as a templateFunction for views */
        function urlTemplate(url, data) {
            var template;
            return result;

            function result(helpers) {
                if (template) {
                    return template(helpers);
                } else {
                    return ajax.get(url, data).then(function (rawTemplate) {
                        template = _.template(rawTemplate);
                        return result(helpers);
                    });
                }
            }
        }
        Marionette.urlTemplate = urlTemplate;

        function remoteSourceTemplate(remoteSource) {
            var template;
            return result;

            function result(helpers) {
                if (template) {
                    return template(helpers);
                } else if (remoteSource.isReady) {
                    template = _.template(remoteSource.value);
                    return result(helpers);
                } else {
                    throw new Error('the remote source must be ready before rendering the template');
                }
            }
        }
        Marionette.remoteSourceTemplate = remoteSourceTemplate;

        /** convenience class name for empty regions */
        var EMPTYREGION = 'empty-region';

        var Region = (function () {
            function Region(options) {
                this.options = options;
                $(options.element).addClass(EMPTYREGION);
            }
            Region.prototype.show = function (view) {
                var _this = this;
                // check if there's a previous view opened
                this.close();

                // replace the current view
                this._view = view;
                var ignoreRender = true;
                this._renderHandler = view.rendered(function () {
                    // below the view.render() method is called, and the rendered event will be raised
                    // for those cases it should be ignored
                    if (ignoreRender)
                        return;
                    _this.viewRendered();
                });
                this._closedHandler = view.closed(function () {
                    return _this.removeView();
                });

                // render the new view
                return view.render().then(function () {
                    _this.viewRendered();
                    ignoreRender = false;
                });
            };

            /** called when the render event of the view is raised */
            Region.prototype.viewRendered = function () {
                this.reloadView();

                // notify the new view elements that they are in the DOM
                this._view.domReady();
            };

            /** this is called when the view's render method is called, and the element
            on the region must be updated */
            Region.prototype.reloadView = function () {
                this.options.element.empty().append(this._view.element);
                this.options.element.removeClass(EMPTYREGION);
            };

            Region.prototype.close = function () {
                if (this._view) {
                    this.removeView();
                    this._renderHandler.dispose();
                    this._closedHandler.dispose();
                    this._view.close();
                    this._view = null;
                }
            };

            /** removes the element of an already closed view */
            Region.prototype.removeView = function () {
                if (this._view.element) {
                    this._view.element.remove();
                    this.options.element.addClass(EMPTYREGION);
                }
            };

            /** removes the target view from the current region without closing it,
            so it can be re-attached in another region without rendering the view */
            Region.prototype.detach = function () {
                var view = this._view;

                if (view) {
                    view.element.detach();
                    this._renderHandler.dispose();
                    this._closedHandler.dispose();
                    this._view = null;
                }

                return view;
            };

            Region.prototype.attach = function (view) {
                var _this = this;
                this.close();
                this._view = view;
                this._renderHandler = view.rendered(function () {
                    return _this.viewRendered();
                });
                this._closedHandler = view.closed(function () {
                    return _this.removeView();
                });
                this.reloadView();
            };

            Region.prototype.domReady = function () {
                if (this._view) {
                    this._view.domReady();
                }
            };
            return Region;
        })();
        Marionette.Region = Region;

        var Layout = (function (_super) {
            __extends(Layout, _super);
            function Layout(options) {
                _super.call(this, options);
                this._detachedViews = {};

                this.regionNames = _.keys(this.options.regions);
            }
            Layout.prototype.renderOverride = function () {
                var _this = this;
                return _super.prototype.renderOverride.call(this).then(function () {
                    // initialize regions after the view has been rendered
                    _.each(_this.regionNames, function (regionName) {
                        var region = new Region({ element: _this.find(_this.options.regions[regionName]) });
                        _this[regionName] = region;
                    });
                });
            };

            /** this is called when the layout is re-rendered. detaches all associated
            views and re-attaches them once the layout has been recreated; so associated
            views don't have to be recreated when the layout is re-rendered. */
            Layout.prototype.renderAndKeepViews = function () {
                var _this = this;
                var region;

                _(this.regionNames).each(function (regionName) {
                    var region = _this[regionName];
                    _this._detachedViews[regionName] = region.detach();
                });

                // bindings need to be removed from root element
                _(this.element).each(function (x) {
                    return ko.cleanNode(x);
                });

                return this.renderOverride();
            };

            Layout.prototype.render = function () {
                var _this = this;
                if (!this.isClosed) {
                    // assume the layout is being re-rendered
                    // all views will be detached and stored in this._detachedViews
                    // then all views will be re-atached when domReady is called
                    return this.renderAndKeepViews().finally(function () {
                        _this._renderedEvent.fire();
                    });
                } else {
                    return _super.prototype.render.call(this);
                }
            };

            Layout.prototype.close = function () {
                var _this = this;
                // and close/delete regions
                _.each(this.regionNames, function (regionName) {
                    var region = _this[regionName];
                    if (region) {
                        region.close();

                        _this[regionName] = null;
                        delete region;
                    }
                });

                _super.prototype.close.call(this);
            };

            Layout.prototype.domReady = function () {
                var _this = this;
                _super.prototype.domReady.call(this);

                _.each(this.regionNames, function (regionName) {
                    var region = _this[regionName];

                    // notify views inside of it's regions that the dom is ready,
                    // all regions should have been created on the render method
                    region.domReady();

                    // check if there's any detached view to re-attach to this region
                    if (_this._detachedViews[regionName]) {
                        region.attach(_this._detachedViews[regionName]);
                        delete _this._detachedViews[regionName];
                    }
                });
            };
            return Layout;
        })(View);
        Marionette.Layout = Layout;

        var CollectionView = (function (_super) {
            __extends(CollectionView, _super);
            function CollectionView(root) {
                if (typeof root === "undefined") { root = 'div'; }
                _super.call(this, { template: function () {
                        return $('<' + root + '>');
                    } });
                this._views = [];
            }
            CollectionView.prototype.add = function (item) {
                this._views.push(item);
            };

            CollectionView.prototype.render = function () {
                var _this = this;
                return _super.prototype.render.call(this).then(function () {
                    var renderPromises = _(_this._views).map(function (view) {
                        return view.render();
                    });
                    return Q.all(renderPromises).then(function () {
                        _(_this._views).each(function (view) {
                            _this.element.append(view.element);
                        });
                    });
                });
            };

            CollectionView.prototype.close = function () {
                // close all inner views
                _(this._views).each(function (view) {
                    return view.close();
                });
                _super.prototype.close.call(this);
            };

            CollectionView.prototype.domReady = function () {
                _(this._views).each(function (view) {
                    return view.domReady();
                });
            };
            return CollectionView;
        })(View);
        Marionette.CollectionView = CollectionView;

        

        /**  */
        function renderViewIntoElement(element, view) {
            var region = new Region({ element: element });

            region.show(view).done();

            return {
                dispose: function () {
                    region.close();
                    delete region;
                }
            };
        }
        Marionette.renderViewIntoElement = renderViewIntoElement;
    })(exports.Marionette || (exports.Marionette = {}));
    var Marionette = exports.Marionette;

    (function (Views) {
        (function (WindowSize) {
            WindowSize[WindowSize["SMALL"] = 0] = "SMALL";
            WindowSize[WindowSize["MEDIUM"] = 1] = "MEDIUM";
            WindowSize[WindowSize["LARGE"] = 2] = "LARGE";
        })(Views.WindowSize || (Views.WindowSize = {}));
        var WindowSize = Views.WindowSize;

        var WindowView = (function () {
            function WindowView(view, options) {
                if (typeof options === "undefined") { options = {}; }
                this.view = view;
                this.options = options;
                this._preventWindowClose = true;
                var size = (options.size || options.size === 0) ? options.size : 1 /* MEDIUM */;

                this.$dialogWrapper = $(templates.Dialog({ size: size }));
            }
            WindowView.prototype.showDialog = function () {
                //if (this.$dialogWrapper) {
                //    throw new Error('the window is still open');
                //}
                var _this = this;
                this._dialogDefered = Q.defer();

                // render the view and show it on a window
                return this.view.render().then(function () {
                    _this.$dialogWrapper.appendTo('body');

                    _this.renderingResult = Marionette.renderViewIntoElement(_this.$dialogWrapper.find('.modal-content'), _this.view);

                    //This event is fired immediately when the hide instance method has been called.
                    _this.$dialogWrapper.on('hide.bs.modal', function (e) {
                        return _this.windowCloseHandler(e);
                    });

                    //This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete).
                    _this.$dialogWrapper.on('hidden.bs.modal', function (e) {
                        _this.destroyWindow();
                    });

                    return Q.delay(true, 100).then(function () {
                        // notify the view that it's DOM ready
                        //this.view.domReady();
                        //this.options.backdrop = 'static';
                        //this.options.keyboard = false;
                        _this.$dialogWrapper.modal();

                        return _this._dialogDefered.promise;
                    });
                });
            };

            WindowView.prototype.windowCloseHandler = function (e) {
                if (this._preventWindowClose && this.options.close) {
                    e.preventDefault();

                    // this should call the close method on this class
                    this.options.close(e);
                }
            };

            /** Close the window, and destroys it after the close animation has completed */
            WindowView.prototype.close = function () {
                this._preventWindowClose = false;
                this.$dialogWrapper.modal('hide'); // this calls destroyWindow after the window is closed
                this._preventWindowClose = true;
            };

            WindowView.prototype.destroyWindow = function () {
                this.view.close();
                this.$dialogWrapper.data('modal', null);
                this.renderingResult.dispose();
                this.$dialogWrapper.remove();
                this.resolveDeferred();
            };

            WindowView.prototype.resolveDeferred = function () {
                this._dialogDefered.resolve(true);
            };
            return WindowView;
        })();
        Views.WindowView = WindowView;

        var DialogMessageBase = (function () {
            function DialogMessageBase(template, viewModel) {
                /** marks when the showDialog promise should fail */
                this._cancelFlag = false;
                var view = new Marionette.View({
                    template: template,
                    viewModel: viewModel
                });
                this._window = new WindowView(view);
            }
            DialogMessageBase.prototype.showDialog = function () {
                var _this = this;
                return this._window.showDialog().then(function () {
                    if (!_this._cancelFlag) {
                        return _this.dialogResult();
                    } else {
                        _this._cancelFlag = false;

                        // Cancel action, the promise should fail
                        return Q.reject();
                    }
                });
            };

            /** must be implemented in derived classes and return the Dialog's result
            after it has been closed */
            DialogMessageBase.prototype.dialogResult = function () {
                throw new Error('not implemented');
            };

            DialogMessageBase.prototype.cancel = function () {
                this._cancelFlag = true;
                this.close();
            };

            DialogMessageBase.prototype.close = function () {
                this._window.close();
            };
            return DialogMessageBase;
        })();
        Views.DialogMessageBase = DialogMessageBase;

        (function (MessageBoxType) {
            MessageBoxType[MessageBoxType["Question"] = 0] = "Question";
            MessageBoxType[MessageBoxType["QuestionYesNo"] = 1] = "QuestionYesNo";
        })(Views.MessageBoxType || (Views.MessageBoxType = {}));
        var MessageBoxType = Views.MessageBoxType;

        (function (MessageBoxResult) {
            MessageBoxResult[MessageBoxResult["Yes"] = 0] = "Yes";
            MessageBoxResult[MessageBoxResult["No"] = 1] = "No";
            MessageBoxResult[MessageBoxResult["Cancel"] = 2] = "Cancel";
        })(Views.MessageBoxResult || (Views.MessageBoxResult = {}));
        var MessageBoxResult = Views.MessageBoxResult;

        function smartMessage(options) {
            var result = Q.defer();

            $.SmartMessageBox({
                title: options.title,
                content: options.content,
                buttons: options.type === 1 /* QuestionYesNo */ ? '[No][Yes]' : '[Cancel][No][Yes]'
            }, function (x) {
                if (x === 'Yes')
                    result.resolve(0 /* Yes */);
                else if (x === 'No')
                    result.resolve(1 /* No */);
                else
                    result.resolve(2 /* Cancel */);
            });

            return result.promise;
        }
        Views.smartMessage = smartMessage;

        function smartInput(options) {
            var result = Q.defer();

            $.SmartMessageBox({
                title: options.title,
                content: options.content,
                input: 'text',
                buttons: '[Cancel][Ok]'
            }, function (x, content) {
                if (x === 'Ok') {
                    result.resolve(content);
                } else {
                    result.reject(false);
                }
            });

            return result.promise;
        }
        Views.smartInput = smartInput;
    })(exports.Views || (exports.Views = {}));
    var Views = exports.Views;

    (function (Utils) {
        function requirePromise() {
            var _this = this;
            var modules = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                modules[_i] = arguments[_i + 0];
            }
            var deferred = Q.defer();

            require(modules, function () {
                var result = _.toArray(arguments);
                deferred.resolve.apply(_this, result);
            });

            return deferred.promise;
        }
        Utils.requirePromise = requirePromise;

        function cssPromise() {
            var deferreds = _.map(arguments, function (url) {
                return ajax.get(url).then(function (css) {
                    $("<style type='text/css'></style>").html(css).appendTo('head');
                    return true;
                });
            });
            return Q.all(deferreds).then(function () {
                return true;
            });
        }
        Utils.cssPromise = cssPromise;

        /** executes the specified function when the passed 'element' is idle 'ms' milliseconds,
        'minimumInterval' specifies the number of times that the control is checked for activity */
        function runIdle(element, ms, fun, minimumInterval) {
            if (typeof minimumInterval === "undefined") { minimumInterval = 1000; }
            var idleTime = 0;

            function resetIdle() {
                idleTime = 0;
            }

            element.mousemove(resetIdle);
            element.keydown(resetIdle);

            function runIdle() {
                idleTime = idleTime + minimumInterval;

                // time passed execute the action
                if (idleTime > ms) {
                    idleTime = 0;
                    fun();
                }

                // schedule another run
                setTimeout(runIdle, minimumInterval);
            }

            setTimeout(runIdle, minimumInterval);

            return {
                destroy: function () {
                    element.unbind('mousemove', resetIdle);
                    element.unbind('keydown', resetIdle);
                }
            };
        }
        Utils.runIdle = runIdle;

        /** detects if caps lock key is ative by checking at the event args of the key press event
        taken from: stackoverflow.com/questions/348792 */
        function capsLockOn(e) {
            var s = String.fromCharCode(e.which);
            return s.toUpperCase() === s && s.toLowerCase() !== s && !e.shiftKey;
        }
        Utils.capsLockOn = capsLockOn;

        /** Loads the given CSS stylesheet */
        function loadStylesheet(file) {
            // to load a stylesheet dynamically on IE need to call this method, but apparently the other
            // way is best at least on IE10: document.createStyleSheet(file)
            return $("<link>").appendTo("head").attr({ type: 'text/css', rel: 'stylesheet' }).attr('href', file);
        }
        Utils.loadStylesheet = loadStylesheet;

        function sum(items) {
            var result = 0, i;
            for (i = 0; i < items.length; i++) {
                result += items[i];
            }
            return result;
        }
        Utils.sum = sum;

        function scrollIntoView(element, container) {
            var containerTop = $(container).scrollTop();
            var containerBottom = containerTop + $(container).height();
            var elemTop = element.offsetTop;
            var elemBottom = elemTop + $(element).height();

            if (elemTop < containerTop) {
                $(container).scrollTop(elemTop);
            } else if (elemBottom > containerBottom) {
                $(container).scrollTop(elemBottom - $(container).height());
            }
        }
        Utils.scrollIntoView = scrollIntoView;

        /** remove the given element from the array */
        function remove(array, item) {
            var index = _.indexOf(array, item);
            if (index >= 0) {
                array.splice(index, 1);
            }
        }
        Utils.remove = remove;

        /** replaces the contents of an array with new values */
        function replace(array, newContent) {
            array.splice.apply(array, [0, array.length].concat(newContent));
        }
        Utils.replace = replace;

        function replaceObservable(array, newContent) {
            array.splice.apply(array, [0, array().length].concat(newContent));
        }
        Utils.replaceObservable = replaceObservable;

        function waitForEvent(target, event) {
            var result = Q.defer();
            target.one(event, function (e) {
                return result.resolve(e);
            });
            return result.promise;
        }
        Utils.waitForEvent = waitForEvent;

        /* executes the given function asynchronously */
        function async(expr) {
            if (window.setImmediate) {
                window.setImmediate(expr);
            } else {
                window.setTimeout(expr, 0);
            }
        }
        Utils.async = async;

        /** returns the number of elements passing the given filter */
        function count(array, filter) {
            var result = 0;
            _.each(array, function (item) {
                if (filter(item)) {
                    result++;
                }
            });
            return result;
        }
        Utils.count = count;

        function shake(element, shakes, distance, duration) {
            if (typeof shakes === "undefined") { shakes = 3; }
            if (typeof distance === "undefined") { distance = 3; }
            if (typeof duration === "undefined") { duration = 100; }
            if (shakes > 0) {
                element.css('position', 'relative');

                element.each(function () {
                    var $el = $(this);
                    var left = $el.css('left');

                    $el.animate({
                        left: "-=" + distance
                    }, duration, function () {
                        $el.animate({
                            left: "+=" + distance * 2
                        }, duration, function () {
                            $el.animate({
                                left: left
                            }, duration, function () {
                                shake($el, shakes - 1, distance, duration);
                            });
                        });
                    });
                });
            }
        }
        Utils.shake = shake;

        /** evaluates handler() different times separated by the specified timeout, when two calls return
        the same result callback is called */
        function stabilize(timeout, handler) {
            var previousValue = handler(), result = Q.defer();

            setTimeout(scheduleNext, timeout);

            return result.promise;

            function scheduleNext() {
                var value = handler();

                if (value === previousValue) {
                    result.resolve(value);
                } else {
                    previousValue = value;
                    setTimeout(scheduleNext, timeout);
                }
            }
        }
        Utils.stabilize = stabilize;
    })(exports.Utils || (exports.Utils = {}));
    var Utils = exports.Utils;

    (function (History) {
        var KendoHistoryProxy = (function () {
            function KendoHistoryProxy() {
                var _this = this;
                this.router = new kendo.Router({
                    change: function (e) {
                        return _this._location = e.url;
                    },
                    routeMissing: function (e) {
                        return console.error('route missing: ', e.url);
                    }
                });

                this._location = this.cleanUrl(window.location.hash);
            }
            KendoHistoryProxy.prototype.cleanUrl = function (url) {
                var hashStrip = /^#*/;
                return url.replace(hashStrip, '');
            };

            KendoHistoryProxy.prototype.start = function () {
                this.router.start();
            };

            KendoHistoryProxy.prototype.location = function () {
                return this._location;
            };

            KendoHistoryProxy.prototype.navigate = function (route) {
                this.router.navigate(route);
            };

            KendoHistoryProxy.prototype.register = function (route, callback) {
                this.router.route(route, callback);
            };
            return KendoHistoryProxy;
        })();
        History.KendoHistoryProxy = KendoHistoryProxy;

        /** All browser history should be managed throught an instance of this class inside this module */
        var HistoryController = (function () {
            function HistoryController(history, _showWelcomeScreen) {
                if (typeof _showWelcomeScreen === "undefined") { _showWelcomeScreen = true; }
                this.history = history;
                this._showWelcomeScreen = _showWelcomeScreen;
                this.door = new Knockout.Door();
                this._silent = false;
                this._firstRoute = true;
                this._beforeWakeCallback = new Common.DelayedCallbacks();
                this._mustReload = false;
                /** this is used to syncronize executing the callback on the navigateSilent method */
                this._routeCallback = null;
                this._current = history.location();
            }
            /** adds a callback that will be executed before waking up the application */
            HistoryController.prototype.beforeWake = function (handler) {
                return this._beforeWakeCallback.add(handler);
            };

            HistoryController.prototype.start = function () {
                this.history.start();
            };

            HistoryController.prototype.location = function () {
                return this._current;
            };

            HistoryController.prototype.addGuardian = function (guardian) {
                this.door.add(guardian);
            };

            /** Navigates away from the page */
            HistoryController.prototype.navigate = function (route) {
                // console.log('requested route', route);
                this.history.navigate(route);
            };

            /** navigates to the requested route and returns a promise that is resolved once
            the route callback is executed.  */
            HistoryController.prototype.navigateSilent = function (route, executeCallback) {
                var _this = this;
                if (typeof executeCallback === "undefined") { executeCallback = true; }
                this._routeCallback = Q.defer();

                if (route != this._current) {
                    // start the navigation if the route is different from the current route
                    this._silent = true;
                    this.navigate(route);

                    return this._routeCallback.promise.then(function (callback) {
                        _this._silent = false;
                        return _this.tryNavigate(route).then(function (canNavigate) {
                            if (canNavigate && executeCallback) {
                                return callback.apply(_this);
                            } else {
                                return true;
                            }
                        });
                    });
                } else {
                    // the route is active
                    return Q(true);
                }
            };

            /** if possible navigates to the specified route, otherwise returns to the previous route,
            this method assumes that the route is already setted on the browser */
            HistoryController.prototype.tryNavigate = function (route) {
                var _this = this;
                return this.door.open(route).then(function () {
                    // the route is accepted, execute corresponding method
                    _this._current = _this.history.location();
                    return Q(true);
                }).fail(function () {
                    // the route isn't accepted, so navigate to the previous path
                    _this.navigate(_this._current);
                    return Q(false);
                });
            };

            /** the page will be reloaded when navigates to the next uri */
            HistoryController.prototype.mustReaload = function () {
                this._mustReload = true;
            };

            HistoryController.prototype.register = function (route, callback) {
                var _this = this;
                var navigated = function () {
                    if (_this._mustReload) {
                        Utils.async(function () {
                            return window.location.reload();
                        });
                        return;
                    }

                    var pathArguments = _.toArray(arguments);

                    // only execute the route if the navigation isn't silent
                    if (!_this._silent) {
                        // only check the navigation if the current path and the navigated path are different
                        if (_this._firstRoute && _this._showWelcomeScreen) {
                            _this.displayLoadingScreen(function () {
                                return callback.apply(_this, pathArguments);
                            });
                        } else if (_this._current != _this.history.location()) {
                            // executed when the URL is changed manually, by writing on the URL bar for example
                            // or clicking back/forward button
                            _this.tryNavigate(_this.history.location()).then(function (canNavigate) {
                                if (canNavigate) {
                                    return callback.apply(_this, pathArguments);
                                }
                            }).done();
                        }

                        // the first route is called using backbone internal methods, that's why that's a special case
                        _this._firstRoute = false;
                    } else {
                        // resolve the callback promise
                        var silentCallback = function () {
                            return callback.apply(_this, pathArguments);
                        };
                        _this._routeCallback.resolve(silentCallback);
                    }
                };

                this.history.register(route, navigated);
            };

            /** displays the loading screen before executing the action and waits for it's
            completition before removing the loading screen */
            HistoryController.prototype.displayLoadingScreen = function (callback) {
                var loadingScreen = $(templates.LoadingScreen()), jigsawRoot = $('#jigsaw-root');

                this._beforeWakeCallback.fire().then(function () {
                    // append the loading screen
                    $('body').append(loadingScreen);
                    //jigsawRoot.hide();
                    //return callback()
                    //.then(() => jigsawRoot.show());
                }).then(function () {
                    return Q.delay(true, 500);
                }).then(function () {
                    return callback();
                }).timeout(25000, 'initial module loading process is taking too long').then(function () {
                    return Q.delay(true, 500);
                }).then(function () {
                    return Knockout.flowStabilizer.start();
                }).finally(function () {
                    // remove the loading screen
                    loadingScreen.remove();

                    delete loadingScreen;
                    delete jigsawRoot;
                }).done();
            };
            return HistoryController;
        })();
        History.HistoryController = HistoryController;

        History.history = new HistoryController(new KendoHistoryProxy());
    })(exports.History || (exports.History = {}));
    var History = exports.History;

    (function (Modules) {
        var ModuleBase = (function () {
            function ModuleBase() {
            }
            ModuleBase.prototype.requiredModules = function () {
                return [];
            };

            ModuleBase.prototype.load = function () {
                return Q(true);
            };

            ModuleBase.prototype.unload = function () {
                return Q(true);
            };
            return ModuleBase;
        })();
        Modules.ModuleBase = ModuleBase;

        var ModuleWithSlavesBase = (function (_super) {
            __extends(ModuleWithSlavesBase, _super);
            function ModuleWithSlavesBase() {
                _super.apply(this, arguments);
                this._slaves = [];
            }
            ModuleWithSlavesBase.prototype.slaveModules = function () {
                return this._slaves;
            };

            ModuleWithSlavesBase.prototype.addSlave = function (m) {
                this._slaves.push(m);
            };

            /** executes the given action as a slave of the current module */
            ModuleWithSlavesBase.prototype.slaveExecute = function (execute) {
                var _this = this;
                this.addSlave({
                    requiredModules: function () {
                        return [_this];
                    },
                    load: execute
                });
            };

            ModuleWithSlavesBase.prototype.slaveExecuteOneTime = function (execute) {
                var executed = false;
                this.slaveExecute(function () {
                    if (!executed) {
                        executed = true;
                        return execute();
                    }
                    return Q(true);
                });
            };
            return ModuleWithSlavesBase;
        })(ModuleBase);
        Modules.ModuleWithSlavesBase = ModuleWithSlavesBase;

        function scheduleModuleLoading(target, loadedModules) {
            if (typeof loadedModules === "undefined") { loadedModules = []; }
            var modules = new Common.Dict();

            function schedule(target) {
                if (!target) {
                    // ignore null dependencies, for convenience
                    return Q(true);
                } else if (modules.contains(target)) {
                    // if the module has been scheduled for loading then return that promise
                    return modules.get(target);
                } else if (_.contains(loadedModules, target)) {
                    modules.add(target, Q(true));

                    // if the module is already loaded then mark it on the modules collection
                    // and return a resolved promise. Also ensure all it's dependencies are loaded
                    // and on the dictionary
                    _.forEach(target.requiredModules(), function (m) {
                        return schedule(m);
                    });
                    if (target.slaveModules) {
                        _.forEach(target.slaveModules(), function (m) {
                            return schedule(m);
                        });
                    }

                    return modules.get(target);
                } else {
                    //console.log('scheduled loading of', target);
                    // else - schedule module loading after having loaded all it's required modules
                    var requiredModules = target.requiredModules(), beforePromises = _.map(requiredModules, function (m) {
                        return schedule(m);
                    }), promise = Q.all(beforePromises).then(function () {
                        return target.load();
                    });

                    modules.add(target, promise);

                    if (target.slaveModules) {
                        return promise.then(function () {
                            // load slave modules, these doesn't need to be part of the loading tree
                            var slaves = target.slaveModules(), afterPromises = _.map(slaves, function (m) {
                                return schedule(m);
                            });

                            return Q.all(afterPromises);
                        });
                    }

                    return promise;
                }
            }

            return schedule(target).then(function () {
                return modules.keys();
            });
        }

        var FakeModule = (function (_super) {
            __extends(FakeModule, _super);
            function FakeModule(_requiredModules) {
                _super.call(this);
                this._requiredModules = _requiredModules;
            }
            FakeModule.prototype.requiredModules = function () {
                return this._requiredModules;
            };
            return FakeModule;
        })(ModuleBase);

        var ModuleManager = (function () {
            function ModuleManager(history) {
                var _this = this;
                this._isLoading = false;
                this._loadedModules = [];
                /** contains the head modules that trigered the loading of all other modules.
                New modules can only be loaded if the heads can be unloaded */
                this.heads = [];
                if (history) {
                    history.addGuardian(function () {
                        return _this.canUnloadHeads();
                    });
                }
            }
            Object.defineProperty(ModuleManager.prototype, "isLoading", {
                get: function () {
                    return this._isLoading;
                },
                enumerable: true,
                configurable: true
            });

            /** loads the given module and all it's dependencies and slaves */
            ModuleManager.prototype.load = function () {
                var _this = this;
                var targets = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    targets[_i] = arguments[_i + 0];
                }
                if (this._isLoading) {
                    throw new Error("can't load a module while loading another");
                }
                this._isLoading = true;

                // Create a fake module that depends on the modules that need to be loaded
                var fake = new FakeModule(targets);

                return scheduleModuleLoading(fake, this._loadedModules).then(function (modules) {
                    // unload modules that didn't got loaded
                    var tobeUnloaded = _.filter(_.difference(_this._loadedModules, modules), function (m) {
                        return !!m.unload;
                    }), promises = _.map(tobeUnloaded, function (m) {
                        return m.unload();
                    });

                    return Q.all(promises).then(function () {
                        // be sure not to include the fake module on the currently loaded modules
                        _this._loadedModules = _.without(modules, fake);

                        _this.heads = targets;
                    });
                }).finally(function () {
                    _this._isLoading = false;
                });
            };

            ModuleManager.prototype.canUnloadHeads = function () {
                var filteredHeads = _.filter(this.heads, function (m) {
                    return !!m.canUnload;
                }), promises = _.map(filteredHeads, function (m) {
                    return m.canUnload();
                });

                return Q.all(promises).then(function (results) {
                    if (_.all(results, function (x) {
                        return x;
                    })) {
                        return Q(true);
                    } else {
                        return Q.reject();
                    }
                });
            };

            ModuleManager.prototype.isLoaded = function (target) {
                if (this._isLoading) {
                    throw new Error("can't load a module while loading another");
                }

                return _.contains(this._loadedModules, target);
            };
            return ModuleManager;
        })();
        Modules.ModuleManager = ModuleManager;
    })(exports.Modules || (exports.Modules = {}));
    var Modules = exports.Modules;

    (function (Jigsaw) {
        function updateCache() {
            try  {
                applicationCache.update();
            } catch (e) {
            }
        }
        Jigsaw.updateCache = updateCache;

        //#region CoreModule
        var AppLayout = (function (_super) {
            __extends(AppLayout, _super);
            function AppLayout(viewModel) {
                var _this = this;
                _super.call(this, {
                    template: templates.CoreMain,
                    viewModel: viewModel,
                    regions: {
                        content: "#main-content",
                        active: "#active-content"
                    }
                });

                viewModel.updateTabStripInteraction.handle(function () {
                    return _this.updateTabStrip();
                });
            }
            AppLayout.prototype.domReady = function () {
                _super.prototype.domReady.call(this);

                this.updateTabStrip();
            };

            /** tweaks for the tabStrip to pick up all tabs generated by Knockout during the binding process */
            AppLayout.prototype.updateTabStrip = function () {
                // this should be removed from the viewmodel; maybe create a custom knockout binding
                var tabstrip = this.find('#tabStrip').data('kendoTabStrip');
                if (tabstrip) {
                    tabstrip._updateClasses();
                    tabstrip._updateContentElements();

                    // select the first item if no item is selected
                    if (!tabstrip.select().length) {
                        tabstrip.select(0);

                        // BUG: for some reason on the mobile view the first tab isn't selected without these two calls
                        tabstrip.select(1);
                        tabstrip.select(0);
                    }
                }
            };
            return AppLayout;
        })(Marionette.Layout);
        Jigsaw.AppLayout = AppLayout;

        /** represents the core viewModel.
        This class doesn't inherit from ViewModelBase because ko.applyBindings needs to be applied
        after the view has been added to the DOM */
        var CoreViewModel = (function () {
            function CoreViewModel() {
                this.ribbon = new Ribbon.RibbonSet();
                this.menu = new Ribbon.MenuSet();
                this.quickStart = ko.observableArray();
                this.breadcrumb = new Common.Breadcrumb({ text: 'Home', href: '/#' });
                this.messageQueue = new Messages.InlineMessageQueue();
                /** when true shows an overlay on the entire page */
                this.isBusy = ko.observable(false);
                this.updateTabStripInteraction = new Common.InteractionRequest();
            }
            /** refresh the tabStrip tabs, this is called on the afterAdd parameter of a foreach binding
            on the template */
            CoreViewModel.prototype.updateTabStrip = function () {
                this.updateTabStripInteraction.request();
            };
            return CoreViewModel;
        })();
        Jigsaw.CoreViewModel = CoreViewModel;

        /** this is the base module, all modules should depend on this one as it automatically contains
        references to other modules such as Security, Layout, FullScreen, ... This module doesn't depends
        of any other module */
        var CoreModuleBase = (function (_super) {
            __extends(CoreModuleBase, _super);
            function CoreModuleBase() {
                var _this = this;
                _super.call(this);
                this.stylesModules = new Theming.ContentStyleSheet(templates.styles);

                this.viewModel = new CoreViewModel();
                this.layout = new AppLayout(this.viewModel);

                var handleError = function (errorMessage, url, line) {
                    /*Condition for checking if its validation error*/
                    if (errorMessage) {
                        if ((errorMessage.namespace == "bv.field" || errorMessage.namespace == "bv.validator" || errorMessage.namespace == "bv.form") && errorMessage.type == "error") {
                        } else {
                            _this.messageQueue.add({ title: "Unhandled Exception", body: errorMessage, timeout: 5000, level: 0 /* Error */ });
                        }
                    }
                };
                window.onerror = handleError;

                this.jigsawBodyRegion = new Marionette.Region({ element: $("#jigsaw-root") });
            }
            Object.defineProperty(CoreModuleBase.prototype, "isBusy", {
                get: function () {
                    return this.viewModel.isBusy();
                },
                set: function (value) {
                    this.viewModel.isBusy(value);
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(CoreModuleBase.prototype, "ribbon", {
                get: function () {
                    return this.viewModel.ribbon;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CoreModuleBase.prototype, "menu", {
                get: function () {
                    return this.viewModel.menu;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CoreModuleBase.prototype, "quickStart", {
                get: function () {
                    return this.viewModel.quickStart;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(CoreModuleBase.prototype, "breadcrumb", {
                get: function () {
                    return this.viewModel.breadcrumb;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(CoreModuleBase.prototype, "messageQueue", {
                get: function () {
                    return this.viewModel.messageQueue;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(CoreModuleBase.prototype, "content", {
                /** main content region */
                get: function () {
                    return this.layout.content;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(CoreModuleBase.prototype, "active", {
                /** active content region, meant to be used to display details about the currently displayed content */
                get: function () {
                    return this.layout.active;
                },
                enumerable: true,
                configurable: true
            });

            CoreModuleBase.prototype.requiredModules = function () {
                return [this.stylesModules];
            };

            CoreModuleBase.prototype.load = function () {
                return this.jigsawBodyRegion.show(this.layout);
            };

            CoreModuleBase.prototype.unload = function () {
                return Q(true);
            };
            return CoreModuleBase;
        })(Modules.ModuleWithSlavesBase);
        Jigsaw.CoreModuleBase = CoreModuleBase;

        (function (Messages) {
            (function (MessageLevel) {
                MessageLevel[MessageLevel["Error"] = 0] = "Error";
                MessageLevel[MessageLevel["Warning"] = 1] = "Warning";
                MessageLevel[MessageLevel["Success"] = 2] = "Success";
                MessageLevel[MessageLevel["Info"] = 3] = "Info";
            })(Messages.MessageLevel || (Messages.MessageLevel = {}));
            var MessageLevel = Messages.MessageLevel;

            (function (MessageQueueType) {
                MessageQueueType[MessageQueueType["Inline"] = 1] = "Inline";
                MessageQueueType[MessageQueueType["ExtraSmall"] = 2] = "ExtraSmall";
                MessageQueueType[MessageQueueType["Small"] = 3] = "Small";
                MessageQueueType[MessageQueueType["Big"] = 4] = "Big";
            })(Messages.MessageQueueType || (Messages.MessageQueueType = {}));
            var MessageQueueType = Messages.MessageQueueType;

            var InlineMessageQueue = (function () {
                function InlineMessageQueue() {
                    this.messages = ko.observableArray();
                }
                InlineMessageQueue.prototype.add = function (message) {
                    var _this = this;
                    this.messages.push(message);

                    if (message.timeout) {
                        Q.delay(true, message.timeout).then(function () {
                            return _this.remove(message);
                        }).done();
                    }

                    return Q(true);
                };

                InlineMessageQueue.prototype.remove = function (message) {
                    this.messages.remove(message);
                    // delete message;
                };

                InlineMessageQueue.prototype.clear = function () {
                    this.messages.removeAll();
                    return this;
                };
                return InlineMessageQueue;
            })();
            Messages.InlineMessageQueue = InlineMessageQueue;

            function ServerRequestError(status, text) {
                return { title: "Server error " + status, body: text };
            }
            Messages.ServerRequestError = ServerRequestError;

            /** this variable can be used to add new messages and template selector for them */
            Messages.messageTemplateSelector = new Knockout.TemplateSelector(templates.messages.Generic({
                alert: 'alert-info',
                header: 'Info!'
            }));
            Messages.messageTemplateSelector.candidate(templates.messages.Generic({
                alert: 'alert-warning',
                header: 'Warning!'
            }), function (x) {
                return x.level === 1 /* Warning */;
            });
            Messages.messageTemplateSelector.candidate(templates.messages.Generic({
                alert: 'alert-success',
                header: 'Success!'
            }), function (x) {
                return x.level === 2 /* Success */;
            });
            Messages.messageTemplateSelector.candidate(templates.messages.Error(), function (x) {
                return x.level === 0 /* Error */;
            });

            ko.bindingHandlers['messageQueue'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element), model = ko.unwrap(valueAccessor()), context = bindingContext.createChildContext(model);

                    // append the template to the element
                    $element.addClass('messageQueue');

                    ko.applyBindingsToNode(element, {
                        template: {
                            name: function (x) {
                                return Messages.messageTemplateSelector.select(x);
                            },
                            foreach: model.messages,
                            templateEngine: Knockout.StringTemplateEngine,
                            afterRender: function () {
                                return Common.triggerResize($element);
                            },
                            beforeRemove: function (node) {
                                $(node).remove();
                                Common.triggerResize($element);
                            }
                        }
                    }, context);

                    return { controlsDescendantBindings: true };
                }
            };

            var boxOptions;
            (function (boxOptions) {
                var error = {
                    color: "#C46A69",
                    icon: "fa fa-warning shake animated"
                }, info = {
                    color: "#3276B1",
                    icon: "fa fa-bell swing animated"
                }, warning = {
                    color: "#C79121",
                    icon: "fa fa-shield fadeInLeft animated"
                }, success = {
                    color: "#739E73",
                    icon: "fa fa-check"
                };

                function colorFor(level) {
                    switch (level) {
                        case 0 /* Error */:
                            return error.color;
                        case 3 /* Info */:
                            return info.color;
                        case 1 /* Warning */:
                            return warning.color;
                        case 2 /* Success */:
                            return success.color;
                    }
                }
                boxOptions.colorFor = colorFor;

                function iconFor(level) {
                    switch (level) {
                        case 0 /* Error */:
                            return error.icon;
                        case 3 /* Info */:
                            return info.icon;
                        case 1 /* Warning */:
                            return warning.icon;
                        case 2 /* Success */:
                            return success.icon;
                    }
                }
                boxOptions.iconFor = iconFor;
            })(boxOptions || (boxOptions = {}));

            /** displays smart-admin big box */
            function bigBox(options) {
                var result = Q.defer();

                $.bigBox({
                    title: options.title,
                    content: options.body,
                    color: boxOptions.colorFor(options.level),
                    icon: boxOptions.iconFor(options.level),
                    timeout: options.timeout
                }, function () {
                    return result.resolve(true);
                });

                return result.promise;
            }
            Messages.bigBox = bigBox;

            /** displays smart-admin small box */
            function smallBox(options) {
                var result = Q.defer();

                $.smallBox({
                    title: options.title,
                    content: options.body,
                    color: boxOptions.colorFor(options.level),
                    icon: boxOptions.iconFor(options.level),
                    timeout: options.timeout
                }, function () {
                    return result.resolve(true);
                });

                return result.promise;
            }
            Messages.smallBox = smallBox;

            /** displays smart-admin small box */
            function extraSmallBox(options) {
                var result = Q.defer();

                $.smallBox({
                    title: options.title,
                    content: options.body,
                    color: boxOptions.colorFor(options.level),
                    iconSmall: boxOptions.iconFor(options.level),
                    timeout: options.timeout
                }, function () {
                    return result.resolve(true);
                });

                return result.promise;
            }
            Messages.extraSmallBox = extraSmallBox;

            var SmallBoxMessageQueue = (function () {
                function SmallBoxMessageQueue() {
                }
                SmallBoxMessageQueue.prototype.add = function (message) {
                    return smallBox(message);
                };

                SmallBoxMessageQueue.prototype.remove = function (message) {
                };

                SmallBoxMessageQueue.prototype.clear = function () {
                    $('#divSmallBoxes').children().remove();
                    return this;
                };
                return SmallBoxMessageQueue;
            })();
            Messages.SmallBoxMessageQueue = SmallBoxMessageQueue;

            var SmallBoxPrevNextMessageQueue = (function (_super) {
                __extends(SmallBoxPrevNextMessageQueue, _super);
                function SmallBoxPrevNextMessageQueue() {
                    _super.apply(this, arguments);
                }
                //message: JumpToMultipleResultsMessage
                SmallBoxPrevNextMessageQueue.prototype.add = function (message) {
                    var _this = this;
                    var result = _super.prototype.add.call(this, message);

                    $("#prev").bind('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        message.findPrev();
                    });

                    $("#next").bind('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        message.findNext();
                    });

                    result.then(function () {
                        return _this._removeListeners();
                    });

                    return result;
                };

                SmallBoxPrevNextMessageQueue.prototype.remove = function (message) {
                };

                SmallBoxPrevNextMessageQueue.prototype.clear = function () {
                    this._removeListeners();
                    return _super.prototype.clear.call(this);
                };

                SmallBoxPrevNextMessageQueue.prototype._removeListeners = function () {
                    $("#prev").unbind('click');
                    $("#next").unbind('click');
                };
                return SmallBoxPrevNextMessageQueue;
            })(SmallBoxMessageQueue);
            Messages.SmallBoxPrevNextMessageQueue = SmallBoxPrevNextMessageQueue;

            var ExtraSmallBoxMessageQueue = (function () {
                function ExtraSmallBoxMessageQueue() {
                }
                ExtraSmallBoxMessageQueue.prototype.add = function (message) {
                    return extraSmallBox(message);
                };

                ExtraSmallBoxMessageQueue.prototype.remove = function (message) {
                };

                ExtraSmallBoxMessageQueue.prototype.clear = function () {
                    $('#divSmallBoxes').children().remove();
                    return this;
                };
                return ExtraSmallBoxMessageQueue;
            })();
            Messages.ExtraSmallBoxMessageQueue = ExtraSmallBoxMessageQueue;

            var BigBoxMessageQueue = (function () {
                function BigBoxMessageQueue() {
                }
                BigBoxMessageQueue.prototype.add = function (message) {
                    return bigBox(message);
                };

                BigBoxMessageQueue.prototype.remove = function (message) {
                };

                BigBoxMessageQueue.prototype.clear = function () {
                    return this;
                };
                return BigBoxMessageQueue;
            })();
            Messages.BigBoxMessageQueue = BigBoxMessageQueue;

            function createMessageQueue(type) {
                switch (type) {
                    case 2 /* ExtraSmall */:
                        return new ExtraSmallBoxMessageQueue();
                    case 3 /* Small */:
                        return new SmallBoxMessageQueue();
                    case 4 /* Big */:
                        return new BigBoxMessageQueue();
                    default:
                        return new InlineMessageQueue();
                }
            }
            Messages.createMessageQueue = createMessageQueue;
        })(Jigsaw.Messages || (Jigsaw.Messages = {}));
        var Messages = Jigsaw.Messages;

        (function (Ribbon) {
            var RibbonGroup = (function (_super) {
                __extends(RibbonGroup, _super);
                function RibbonGroup(header) {
                    _super.call(this);
                    this.header = header;
                }
                return RibbonGroup;
            })(Common.PrioritySet);
            Ribbon.RibbonGroup = RibbonGroup;

            var RibbonTab = (function (_super) {
                __extends(RibbonTab, _super);
                function RibbonTab(header) {
                    _super.call(this);
                    this.header = header;
                }
                RibbonTab.prototype.filterItems = function (x) {
                    return x.length > 0;
                };

                /** returns the group with the specified header if exist, otherwise creates a new group with
                the specified header and priority */
                RibbonTab.prototype.group = function (header, priority) {
                    if (typeof priority === "undefined") { priority = 0; }
                    var group = _.find(this.items(), function (x) {
                        return x.header === header;
                    });
                    if (!group) {
                        group = new RibbonGroup(header);
                        this.add(group, priority);
                    }
                    return group;
                };
                return RibbonTab;
            })(Common.PrioritySet);
            Ribbon.RibbonTab = RibbonTab;

            /** collection to store the tabs for a ribbon bar, this is the top level object */
            var RibbonSet = (function (_super) {
                __extends(RibbonSet, _super);
                function RibbonSet() {
                    _super.apply(this, arguments);
                }
                RibbonSet.prototype.filterItems = function (x) {
                    return _.any(x.items(), function (group) {
                        return group.length > 0;
                    });
                };

                /** returns the tab with the specified header if exist, otherwise creates a new tab with
                the specified header and priority */
                RibbonSet.prototype.tab = function (header, priority) {
                    if (typeof priority === "undefined") { priority = 0; }
                    var tab = _.find(this.items(), function (x) {
                        return x.header === header;
                    });
                    if (!tab) {
                        tab = new RibbonTab(header);
                        this.add(tab, priority);
                    }
                    return tab;
                };
                return RibbonSet;
            })(Common.PrioritySet);
            Ribbon.RibbonSet = RibbonSet;

            var RibbonButton = (function () {
                function RibbonButton(text, content, description, cssClass) {
                    if (typeof text === "undefined") { text = ""; }
                    if (typeof content === "undefined") { content = function () {
                    }; }
                    if (typeof description === "undefined") { description = ""; }
                    if (typeof cssClass === "undefined") { cssClass = ""; }
                    this.text = text;
                    this.content = content;
                    this.description = description;
                    this.cssClass = cssClass;
                }
                return RibbonButton;
            })();
            Ribbon.RibbonButton = RibbonButton;

            var RibbonSelect = (function () {
                function RibbonSelect(text, options, selected, description, cssClass) {
                    if (typeof text === "undefined") { text = ""; }
                    if (typeof options === "undefined") { options = []; }
                    if (typeof description === "undefined") { description = ""; }
                    if (typeof cssClass === "undefined") { cssClass = ""; }
                    this.text = text;
                    this.options = options;
                    this.selected = selected;
                    this.description = description;
                    this.cssClass = cssClass;
                    if (!this.selected && this.options.length > 0) {
                        this.selected = options[0];
                    }
                }
                return RibbonSelect;
            })();
            Ribbon.RibbonSelect = RibbonSelect;

            Ribbon.ribbonItemTemplateSelector = Knockout.makeForeachWithTemplateSelector('foreachRibbonItem', templates.ribbon.Button());
            Ribbon.ribbonItemTemplateSelector.candidate(templates.ribbon.Select(), function (x) {
                return x instanceof RibbonSelect;
            });

            var MenuSet = (function (_super) {
                __extends(MenuSet, _super);
                function MenuSet() {
                    _super.call(this, "");
                }
                return MenuSet;
            })(RibbonTab);
            Ribbon.MenuSet = MenuSet;

            Ribbon.ribbonQuickStartTemplateSelector = Knockout.makeForeachWithTemplateSelector('foreachRibbonQuickStart');

            var RibbonItemModule = (function (_super) {
                __extends(RibbonItemModule, _super);
                function RibbonItemModule(options) {
                    _super.call(this);
                    this.options = options;
                    this.storage = new Common.PrioritySet();

                    this.storage.addAll(options.items, options.priority);
                }
                /** adds a new ribbon item */
                RibbonItemModule.prototype.add = function (item, priority) {
                    if (typeof priority === "undefined") { priority = 0; }
                    this.storage.add(item, priority);
                };

                RibbonItemModule.prototype.unload = function () {
                    this._ribbonDisposable.dispose();

                    return _super.prototype.unload.call(this);
                };

                RibbonItemModule.prototype.load = function () {
                    this._ribbonDisposable = this.options.coreModule.ribbon.tab(this.options.tab.header, this.options.tab.priority).group(this.options.group.header, this.options.group.priority).addAll(this.storage.items(), this.options.priority);

                    return _super.prototype.load.call(this);
                };
                return RibbonItemModule;
            })(Modules.ModuleBase);
            Ribbon.RibbonItemModule = RibbonItemModule;
        })(Jigsaw.Ribbon || (Jigsaw.Ribbon = {}));
        var Ribbon = Jigsaw.Ribbon;

        (function (Theming) {
            var ContentStyleSheet = (function (_super) {
                __extends(ContentStyleSheet, _super);
                function ContentStyleSheet(content) {
                    _super.call(this);
                    this.content = content;
                }
                ContentStyleSheet.prototype.unload = function () {
                    if (this._element) {
                        this._element.remove();
                        delete this._element;
                    }
                    return _super.prototype.unload.call(this);
                };

                ContentStyleSheet.prototype.load = function () {
                    if (this.content) {
                        this._element = $("<style>").html(this.content).appendTo("head");
                    }
                    return _super.prototype.load.call(this);
                };
                return ContentStyleSheet;
            })(Modules.ModuleBase);
            Theming.ContentStyleSheet = ContentStyleSheet;

            var StyleSheet = (function (_super) {
                __extends(StyleSheet, _super);
                function StyleSheet(path, async) {
                    if (typeof async === "undefined") { async = false; }
                    _super.call(this);
                    this.path = path;
                    this.async = async;
                }
                StyleSheet.prototype.unload = function () {
                    if (this._element) {
                        this._element.remove();
                        delete this._element;
                    }
                    return _super.prototype.unload.call(this);
                };

                StyleSheet.prototype.load = function () {
                    var _this = this;
                    if (this.async) {
                        Utils.loadStylesheet(this.path);
                        return Q(true);
                    }

                    return ajax.get(this.path).then(function (content) {
                        _this._element = $("<style>").html(content).appendTo("head");
                        return true;
                    });
                };
                return StyleSheet;
            })(Modules.ModuleBase);
            Theming.StyleSheet = StyleSheet;

            var Theme = (function (_super) {
                __extends(Theme, _super);
                function Theme(name, styles) {
                    _super.call(this);
                    this.name = name;

                    this._styles = _.map(styles, function (path) {
                        return new StyleSheet(path, true);
                    });
                }
                /** overwrite this module to run any custom JS code when the module is being loaded */
                Theme.prototype.initialize = function () {
                };

                Theme.prototype.unload = function () {
                    // unload all resources used by this theme
                    _.forEach(this._styles, function (element) {
                        return element.unload();
                    });

                    return _super.prototype.unload.call(this);
                };

                Theme.prototype.load = function () {
                    var _this = this;
                    return Q.fcall(function () {
                        var promises = _.map(_this._styles, function (style) {
                            return style.load();
                        });
                        return Q.all(promises);
                    });
                };
                return Theme;
            })(Modules.ModuleBase);
            Theming.Theme = Theme;

            function addCantSwitchTemeBecauseOfflineMessage(coreModule) {
                coreModule.messageQueue.add({ title: "Offline", body: "The current theme can't be switched if offline. Try it later.", level: 0 /* Error */ });
            }

            var ThemeManager = (function (_super) {
                __extends(ThemeManager, _super);
                function ThemeManager(coreModule, accountModule) {
                    var _this = this;
                    _super.call(this);
                    this.coreModule = coreModule;
                    this.accountModule = accountModule;
                    this.themes = ko.observableArray();

                    this.selectedTheme = ko.guarded();
                    this.selectedTheme.guard(function (theme) {
                        return _this.load(theme).fail(function () {
                            addCantSwitchTemeBecauseOfflineMessage(coreModule);
                            return Q.reject();
                        });
                    });

                    this.selectedThemeName = ko.computed({
                        read: function () {
                            return _this.selectedTheme() && _this.selectedTheme().name;
                        },
                        write: function (name) {
                            var theme = _this.getTheme(name);
                            if (theme) {
                                _this.selectedTheme(theme);
                            } else {
                                throw new Error("Unknown theme name specified");
                            }
                        }
                    });
                }
                /** returns the theme with the given name */
                ThemeManager.prototype.getTheme = function (name) {
                    return _.find(this.themes(), function (theme) {
                        return theme.name === name;
                    });
                };

                ThemeManager.prototype.register = function () {
                    var themes = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        themes[_i] = arguments[_i + 0];
                    }
                    this.themes.push.apply(this.themes, themes);
                };

                ThemeManager.prototype.initialize = function () {
                    var _this = this;
                    // update current theme every time the theme preferences changes
                    this.accountModule.userState.subscribe(function () {
                        _this.selectedThemeName(_this.accountModule.getPreference("Theme"));
                        Jigsaw.updateCache();
                    });

                    // change user preferences every time the current theme changes
                    this.selectedThemeName.subscribe(function (theme) {
                        _this.accountModule.setPreferences({ Theme: theme });
                    });

                    var initialTheme = this.accountModule.getPreference("Theme");

                    return this.selectedTheme.inject(this.getTheme(initialTheme));
                };
                return ThemeManager;
            })(Modules.ModuleManager);
            Theming.ThemeManager = ThemeManager;

            function loadThemes(themeManager) {
                var themes = _.map(JigsawConfig.Themes, function (theme) {
                    return new Theme(theme.Name, theme.Styles);
                });
                _.forEach(themes, function (theme) {
                    return themeManager.register(theme);
                });
            }
            Theming.loadThemes = loadThemes;
        })(Jigsaw.Theming || (Jigsaw.Theming = {}));
        var Theming = Jigsaw.Theming;

        (function (Account) {
            function encript(data) {
                // TODO add some encryption algorithm, possibly MD5 to store passwords on the client
                return data;
            }
            Account.encript = encript;

            var AccountViewModel = (function (_super) {
                __extends(AccountViewModel, _super);
                function AccountViewModel() {
                    var _this = this;
                    _super.call(this);
                    this.dataSubmited = $.Callbacks();
                    this.messageQueue = new Messages.SmallBoxMessageQueue();
                    this.user = ko.observable("");
                    this.password = ko.observable("");
                    this.processingForm = ko.observable(false);

                    // remove all custom errors when some of the fields is changed
                    this.user.subscribe(function () {
                        return _this.messageQueue.clear();
                    });
                    this.password.subscribe(function () {
                        return _this.messageQueue.clear();
                    });
                }
                /** this is called trought a knockout binding, see submit binding docs */
                AccountViewModel.prototype.submitForm = function (formElement) {
                    if (this.processingForm())
                        return false;

                    this.processingForm(true);
                    var data = $(formElement).serialize();
                    this.dataSubmited.fire(data);

                    // cancel the default form action
                    return false;
                };

                AccountViewModel.prototype.resetForm = function () {
                    this.password("");
                    this.messageQueue.clear();
                    this.processingForm(false);
                };

                /** returns an encripted value that identifies the current user and password */
                AccountViewModel.prototype.userKey = function () {
                    var data = this.user() + " - " + this.password();
                    return encript(data);
                };
                return AccountViewModel;
            })(Common.ViewModelBase);

            (function (UserState) {
                UserState[UserState["None"] = 0] = "None";
                UserState[UserState["Present"] = 1] = "Present";
                UserState[UserState["Dimmed"] = 2] = "Dimmed";
            })(Account.UserState || (Account.UserState = {}));
            var UserState = Account.UserState;

            var UserPreferences = (function () {
                function UserPreferences(url, storageKey) {
                    if (typeof url === "undefined") { url = "preferences"; }
                    if (typeof storageKey === "undefined") { storageKey = "preferences"; }
                    this.url = url;
                    this.storageKey = storageKey;
                    this.values = {
                        Theme: typeof JigsawConfig != 'undefined' ? JigsawConfig.DefaultTheme : ''
                    };
                    var value = localStorage.getItem(storageKey);
                    if (value) {
                        this.set(JSON.parse(value));
                    }
                }
                UserPreferences.prototype.get = function (key) {
                    return this.values[key];
                };

                UserPreferences.prototype.set = function (preferences) {
                    _.extend(this.values, preferences);
                    localStorage.setItem(this.storageKey, JSON.stringify(this.values));
                };

                /** Stores all the attributes on the server */
                UserPreferences.prototype.save = function () {
                    return $.post(this.url, this.values);
                };
                return UserPreferences;
            })();
            Account.UserPreferences = UserPreferences;

            function showCantLogInBecauseOfflineMessage(coreModule) {
                coreModule.messageQueue.add({
                    title: "Error",
                    body: "can't login because the application is offline.",
                    level: 0 /* Error */
                });
            }

            var userAutorized = JigsawConfig.InitialUserAutorized, userState = ko.observable(userAutorized ? 2 /* Dimmed */ : 0 /* None */), previousUserName = ko.observable("").extend({ persist: "previousUserName" }), userKey = ko.observable("").extend({ persist: "userKey" }), preferences = new UserPreferences("/Account/Preferences"), sessionFinalizers = [];

            function logout() {
                return Q.all(sessionFinalizers).then(function () {
                    return Q($.post('/Account/LogOff', preferences.values));
                }).then(function (result) {
                    if (result.success) {
                        userKey(""); // clear user key
                        userState(0 /* None */);
                    } else {
                        throw new Error("can't logout because server error");
                    }
                }).fail(function () {
                    // the application is offline, so the current user can't be logged out
                    // simulate this by putting the user in a dimmed state
                    userState(2 /* Dimmed */);
                });
            }

            function login(viewModel, formData, addFinalizerCallbacks) {
                return ajax.post('/Account/Login/?' + formData).then(function (data) {
                    if (data.success) {
                        // store current user key
                        userKey(viewModel.userKey());

                        // fire finalizers callbacks to allow modules to clear up things when the session
                        // is going to be terminated
                        sessionFinalizers.splice(0, sessionFinalizers.length);
                        addFinalizerCallbacks.fire(function (promise) {
                            return sessionFinalizers.push(promise);
                        });

                        // update preferences
                        preferences.set(data.preferences);

                        userState(1 /* Present */);
                    } else {
                        viewModel.resetForm();
                        viewModel.messageQueue.add({ title: "Something went wrong", body: data.errors, level: 0 /* Error */ });
                    }
                });
            }

            function showDialog(addFinalizerCallbacks, coreModule) {
                // mark the UI as busy while the template is loading
                coreModule.isBusy = true;

                /** request the template for the account window content, this is requested every time
                to get the AntiforgeryToken */
                ajax.get("/Account/Login").then(function (template) {
                    coreModule.isBusy = false;

                    // create a new window and show it
                    var viewModel = new AccountViewModel(), view = new Marionette.View({ template: function () {
                            return template;
                        }, viewModel: viewModel }), window = new Views.WindowView(view, { title: "Sign In", resizable: false, actions: [] });

                    viewModel.dataSubmited.add(function (formData) {
                        if (userState() === 2 /* Dimmed */) {
                            // check if the current password is the same as
                            if (viewModel.userKey() === userKey()) {
                                // same user trying to log in again, just switch the current state
                                userState(1 /* Present */);
                                window.close();
                            } else {
                                return logout().then(function () {
                                    return login(viewModel, formData, addFinalizerCallbacks);
                                }).then(function () {
                                    return window.close();
                                });
                            }
                        } else if (userState() === 0 /* None */) {
                            return login(viewModel, formData, addFinalizerCallbacks).then(function () {
                                return window.close();
                            });
                        }
                    });

                    // this promise is never resolved, however it fails if the cancel button is clicked
                    return window.showDialog();
                }).fail(function (error) {
                    // if the trmplate request fails then we need to show an offline version of
                    // the login form
                    coreModule.isBusy = false;

                    if (!error) {
                        // the dialog was cancelled, then there's no error => do nothing
                    } else if (userState() === 2 /* Dimmed */) {
                        // create a new window and show it using the offline loginform template
                        var viewModel = new AccountViewModel(), view = new Marionette.View({ template: templates.LoginForm, viewModel: viewModel }), window = new Views.WindowView(view, { title: "Sign In", resizable: false, actions: [] });

                        viewModel.dataSubmited.add(function (formData) {
                            // check if the current password is the same as
                            if (viewModel.userKey() === userKey()) {
                                // same user trying to log in again, just switch the current state
                                userState(1 /* Present */);
                                window.close();
                            } else {
                                // there's no conection and it isn't the same user
                                viewModel.resetForm();
                                viewModel.messageQueue.add({
                                    title: "Error",
                                    body: "Jigsaw is currently blocked and offline and only the previous user can unblock it.",
                                    level: 0 /* Error */
                                });
                            }
                        });

                        return window.showDialog();
                    } else if (error.status === 0) {
                        showCantLogInBecauseOfflineMessage(coreModule);
                    } else {
                        coreModule.messageQueue.add({
                            title: error.status + " " + error.statusText,
                            body: "Server error... try again later.",
                            level: 0 /* Error */
                        });
                    }
                });
            }

            var AccountModule = (function (_super) {
                __extends(AccountModule, _super);
                function AccountModule(coreModule) {
                    var _this = this;
                    _super.call(this);
                    this.coreModule = coreModule;
                    /** only allow read-only access to the user state variable, the real one will be hidden on the scopes */
                    this.userState = ko.computed(function () {
                        return userState();
                    });
                    /** Notifies listeners when the user logs in, the state goes from: None -> Present */
                    this.loggedIn = $.Callbacks();
                    this._addRibbonButton();

                    // when the idle timeout passes, show the login dialog and DIM the current user
                    Utils.runIdle($(document), 1 * 60000, function () {
                        if (_this.userState() === 1 /* Present */) {
                            // check if there's an user present and simulate user log out
                            userState(2 /* Dimmed */);
                            showDialog(_this.loggedIn, _this.coreModule);
                        }
                    }, 60000);
                }
                AccountModule.prototype.getPreference = function (key) {
                    return preferences.get(key);
                };

                AccountModule.prototype.setPreferences = function (attributes) {
                    preferences.set(attributes);
                };

                AccountModule.prototype._addRibbonButton = function () {
                    var _this = this;
                    var buttonText = ko.computed(function () {
                        return _this.userState() === 1 /* Present */ ? "Sign out" : "Sign in";
                    });

                    this.coreModule.ribbon.tab("Users").group("Security", 60).add(new Ribbon.RibbonButton(buttonText, function () {
                        return _this.ribbonButtonClicked();
                    }, "Click to Sign in/out from the application", "fa fa-group"), 1);
                };

                AccountModule.prototype.ribbonButtonClicked = function () {
                    if (userState() === 1 /* Present */) {
                        logout();
                    } else {
                        showDialog(this.loggedIn, this.coreModule);
                    }
                };
                return AccountModule;
            })(Modules.ModuleBase);
            Account.AccountModule = AccountModule;

            // shows a tooltip if capsLock is pressed onkeydown
            ko.bindingHandlers['capsLockWarning'] = {
                init: function (element, valueAccessor) {
                    // Initially set the element to be instantly vi
                    var tooltip = new kendo.ui.Tooltip(element, {
                        autoHide: true,
                        position: "bottom",
                        showOn: "none",
                        content: "Caps lock is active"
                    }), keypressEventHandler = function (e) {
                        if (Utils.capsLockOn(e)) {
                            tooltip.show($(element));
                        } else {
                            tooltip.hide();
                        }
                    };

                    $(element).keypress(keypressEventHandler);

                    // if the HTML element is cleaned then remove the subscription
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        $(element).unbind('keypress', keypressEventHandler);
                    });
                }
            };
        })(Jigsaw.Account || (Jigsaw.Account = {}));
        var Account = Jigsaw.Account;

        (function (Sync) {
            

            var SyncManager = (function () {
                function SyncManager() {
                    var _this = this;
                    this.syncs = ko.observableArray();
                    /** returns true while changes are being synced to the server */
                    this.syncingChanges = ko.observable(false);
                    this.pendingChanges = ko.computed(function () {
                        return _.union.apply(_, _.map(_this.syncs(), function (s) {
                            return s.pending();
                        }));
                    });

                    // 5 seconds after the application started, check if there's some pending changes
                    // and schedule a sync operation if the app is online
                    setTimeout(function () {
                        if (_this.pendingChanges().length > 0) {
                            ajax.connection.online().then(function () {
                                return _this.sync();
                            }).done();
                        }
                    }, 5000);

                    var previousOnlineValue = ajax.connection.isOnline();
                    this.subscription = ajax.connection.isOnline.subscribe(function (online) {
                        if (!previousOnlineValue && online) {
                            // there just was a transition from false => true
                            // the application just reconnected, so sync all pending changes if any
                            if (_this.pendingChanges().length > 0) {
                                _this.sync().done();
                            }
                        }
                        previousOnlineValue = online;
                    });
                }
                SyncManager.prototype.dispose = function () {
                    this.subscription.dispose();
                    this.pendingChanges.dispose();
                };

                SyncManager.prototype.register = function (synchronizable) {
                    this.syncs.push(synchronizable);
                };

                SyncManager.prototype.sync = function () {
                    var _this = this;
                    this.syncingChanges(true);
                    return ajax.connection.online(true).then(function (online) {
                        if (online) {
                            return Q.all(_.map(_this.syncs(), function (s) {
                                return s.sync();
                            })).then(function () {
                                _this.syncingChanges(false);
                                return true;
                            });
                        } else {
                            _this.syncingChanges(false);
                            return Q(false);
                        }
                    });
                };
                return SyncManager;
            })();
            Sync.SyncManager = SyncManager;

            var QuickStartNotification = (function () {
                function QuickStartNotification(syncManager) {
                    this.syncManager = syncManager;
                    this.online = ko.computed(function () {
                        return ajax.connection.isOnline();
                    });
                    this.pendingChangesCount = ko.computed(function () {
                        return syncManager.pendingChanges().length;
                    });
                }
                QuickStartNotification.prototype.sync = function () {
                    return this.syncManager.sync();
                };
                return QuickStartNotification;
            })();
            Sync.QuickStartNotification = QuickStartNotification;
            Ribbon.ribbonQuickStartTemplateSelector.candidate(templates.notification.SyncPendingChanges(), function (x) {
                return x instanceof QuickStartNotification;
            });

            var SyncModule = (function (_super) {
                __extends(SyncModule, _super);
                function SyncModule(coreModule) {
                    _super.call(this);
                    this._syncManager = new SyncManager();

                    // load this module alongside with the core module, as it will display an icon
                    // on the quick start
                    //coreModule.addSlave(this);
                    coreModule.quickStart.push(new QuickStartNotification(this._syncManager));
                }
                SyncModule.prototype.register = function (synchronizable) {
                    this._syncManager.register(synchronizable);
                };
                return SyncModule;
            })(Modules.ModuleBase);
            Sync.SyncModule = SyncModule;
        })(Jigsaw.Sync || (Jigsaw.Sync = {}));
        var Sync = Jigsaw.Sync;

        (function (Notifications) {
            /** corresponds to the type Jigsaw.Data.Notification.NotificationLevel from the server */
            (function (NotificationLevel) {
                NotificationLevel[NotificationLevel["Success"] = 0] = "Success";
                NotificationLevel[NotificationLevel["Warning"] = 1] = "Warning";
                NotificationLevel[NotificationLevel["Error"] = 2] = "Error";
            })(Notifications.NotificationLevel || (Notifications.NotificationLevel = {}));
            var NotificationLevel = Notifications.NotificationLevel;

            

            var NotificationSetCollection = (function (_super) {
                __extends(NotificationSetCollection, _super);
                function NotificationSetCollection(owner) {
                    _super.call(this);
                    this.owner = owner;
                }
                NotificationSetCollection.prototype.belongsTo = function (item) {
                    return item.Owner === this.owner;
                };
                return NotificationSetCollection;
            })(Collection.SetCollection);
            Notifications.NotificationSetCollection = NotificationSetCollection;

            var NOTIFICATIONTIMEOUT = 60000;

            /** base multiset for all notifications. Using multi-sets may be over-kill for this
            use case, it could also be solved with a simple ObservableArray. The only advantage
            of using Multisets it to allow the client to control some notifications in some way
            but that isn't a requeriment... only pending changes on the mobile offline mode
            could benefit from this feature */
            var NotificationMultiset = (function (_super) {
                __extends(NotificationMultiset, _super);
                function NotificationMultiset() {
                    var _this = this;
                    _super.call(this, true);

                    // todo notifications should dissapear after a setted time
                    this._intervalId = setInterval(function () {
                        var now = new Date();
                        var itemsToRemove = _.filter(_this.items(), function (x) {
                            return now.getTime() - x.TimeStamp.getTime() > NOTIFICATIONTIMEOUT;
                        });
                        _.each(itemsToRemove, function (item) {
                            return _this.remove(item);
                        });
                    }, NOTIFICATIONTIMEOUT / 2);
                }
                NotificationMultiset.prototype.mapItems = function (items) {
                    return _.sortBy(items, function (x) {
                        return x.TimeStamp;
                    });
                };

                NotificationMultiset.prototype.dispose = function () {
                    return clearInterval(this._intervalId);
                };
                return NotificationMultiset;
            })(Collection.MultiSetCollection);
            Notifications.NotificationMultiset = NotificationMultiset;

            var LocalNotificationMultiset = (function (_super) {
                __extends(LocalNotificationMultiset, _super);
                function LocalNotificationMultiset() {
                    _super.apply(this, arguments);
                }
                /** updates all notifications from an URL */
                LocalNotificationMultiset.prototype.refresh = function () {
                    // TODO refresh method for notifications
                };

                LocalNotificationMultiset.prototype.belongsTo = function (item) {
                    // check if the notification is from the current user
                    // todo: check the current user name if any user is signed in
                    return item.Author === '';
                };
                return LocalNotificationMultiset;
            })(NotificationMultiset);
            Notifications.LocalNotificationMultiset = LocalNotificationMultiset;

            var GlobalNotificationMultiset = (function (_super) {
                __extends(GlobalNotificationMultiset, _super);
                function GlobalNotificationMultiset() {
                    _super.apply(this, arguments);
                }
                return GlobalNotificationMultiset;
            })(NotificationMultiset);
            Notifications.GlobalNotificationMultiset = GlobalNotificationMultiset;

            /** returns the total number of elements that have been present in the returned array
            that pass the filter */
            function historicalCount(items, filter) {
                var result = ko.observable(Utils.count(items(), filter));

                items.subscribe(function (changes) {
                    var difference = Utils.count(changes, function (x) {
                        return x.status === 'added' && filter(x.value);
                    });
                    result(result() + difference);
                }, null, 'arrayChange');

                return result;
            }
            Notifications.historicalCount = historicalCount;

            var NotificationQuickStartViewModel = (function () {
                function NotificationQuickStartViewModel(storage, isGlobal) {
                    if (typeof isGlobal === "undefined") { isGlobal = false; }
                    this.storage = storage;
                    this.isGlobal = isGlobal;
                    this.showNotificationsEvent = new Common.Event();
                    this.count = historicalCount(this.storage.items, function () {
                        return true;
                    });
                    this.errorCount = historicalCount(this.storage.items, function (n) {
                        return n.Level === 2 /* Error */;
                    });
                    this.warningCount = historicalCount(this.storage.items, function (n) {
                        return n.Level === 1 /* Warning */;
                    });
                    this.successCount = historicalCount(this.storage.items, function (n) {
                        return n.Level === 0 /* Success */;
                    });
                }
                /** fires the showNotifications event */
                NotificationQuickStartViewModel.prototype.showNotifications = function (level) {
                    this.showNotificationsEvent.fire(level);
                };

                /** returns the number of notifications with the passed level */
                NotificationQuickStartViewModel.prototype.countNotificationLevel = function (level) {
                    var result = 0;
                    _.each(this.storage.items(), function (notification) {
                        if (notification.Level === level) {
                            result++;
                        }
                    });
                    return result;
                };

                NotificationQuickStartViewModel.prototype.showNotificationsClick = function (level) {
                    var _this = this;
                    return function () {
                        return _this.showNotifications(level);
                    };
                };
                return NotificationQuickStartViewModel;
            })();
            Notifications.NotificationQuickStartViewModel = NotificationQuickStartViewModel;
            Ribbon.ribbonQuickStartTemplateSelector.candidate(templates.notification.Notification(), function (x) {
                return x instanceof NotificationQuickStartViewModel;
            });

            var RibbonNotificationViewModel = (function () {
                function RibbonNotificationViewModel(gloabalNotifications, localNotifications) {
                    this.gloabalNotifications = gloabalNotifications;
                    this.localNotifications = localNotifications;
                    this.isNotificationPanel = true;
                    this.notifications = ko.computed(function () {
                        return _.sortBy(_.union(gloabalNotifications.items(), localNotifications.items()), function (x) {
                            return x.TimeStamp;
                        });
                    });
                }
                return RibbonNotificationViewModel;
            })();
            Notifications.RibbonNotificationViewModel = RibbonNotificationViewModel;
            Jigsaw.Ribbon.ribbonItemTemplateSelector.candidate(templates.notification.RibbonNotificationPanel(), function (x) {
                return x.isNotificationPanel;
            });

            var NotificationsViewModel = (function () {
                function NotificationsViewModel() {
                    var _this = this;
                    this.local = new NotificationQuickStartViewModel(new LocalNotificationMultiset());
                    this.global = new NotificationQuickStartViewModel(new GlobalNotificationMultiset(), true);
                    this.total = ko.computed(function () {
                        return _this.local.count() + _this.global.count();
                    });
                }
                return NotificationsViewModel;
            })();
            Notifications.NotificationsViewModel = NotificationsViewModel;

            var NotificationsModule = (function (_super) {
                __extends(NotificationsModule, _super);
                function NotificationsModule(coreModule, sidebarModule) {
                    _super.call(this);
                    this.coreModule = coreModule;
                    this.sidebarModule = sidebarModule;
                    this.notifications = new NotificationsViewModel();
                    this.stylesModule = new Theming.ContentStyleSheet(templates.notification.styles);

                    this.setUpSignalR();
                    this.addSidebarNotifications();
                    coreModule.addSlave(this);

                    coreModule.quickStart.push(this.localNotificationsViewModel, this.globalNotificationsViewModel);

                    var ribbonNotification = new RibbonNotificationViewModel(this.globalNotifications, this.localNotifications);

                    coreModule.ribbon.tab("Users").group("", 9999).add(ribbonNotification);
                }
                Object.defineProperty(NotificationsModule.prototype, "localNotificationsViewModel", {
                    get: function () {
                        return this.notifications.local;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NotificationsModule.prototype, "globalNotificationsViewModel", {
                    get: function () {
                        return this.notifications.global;
                    },
                    enumerable: true,
                    configurable: true
                });

                NotificationsModule.prototype.requiredModules = function () {
                    return [this.coreModule, this.stylesModule];
                };

                Object.defineProperty(NotificationsModule.prototype, "localNotifications", {
                    get: function () {
                        return this.localNotificationsViewModel.storage;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(NotificationsModule.prototype, "globalNotifications", {
                    get: function () {
                        return this.globalNotificationsViewModel.storage;
                    },
                    enumerable: true,
                    configurable: true
                });

                NotificationsModule.prototype.setUpSignalR = function () {
                    var _this = this;
                    var connection = $.connection('notification');
                    connection.received(function (data) {
                        // cast server dateTime string to JS date
                        data.TimeStamp = new Date(data.TimeStamp);

                        if (_this.localNotifications.belongsTo(data)) {
                            _this.localNotifications.add(data);
                        } else {
                            _this.globalNotifications.add(data);
                        }
                    });

                    // start the connection and ensure it's maintained
                    connection.disconnected(function () {
                        setTimeout(function () {
                            connection.start().done();
                        }, 30000);
                    }).start();
                };

                NotificationsModule.prototype.addSidebarNotifications = function () {
                    this.sidebarModule.registerView(new Marionette.View({
                        template: templates.notification.SidebarNotifications,
                        viewModel: this.notifications
                    }), new Marionette.View({
                        template: templates.notification.NotificationsCollapsed,
                        viewModel: this.notifications
                    }));
                };
                return NotificationsModule;
            })(Modules.ModuleBase);
            Notifications.NotificationsModule = NotificationsModule;

            Notifications.notificationTemplate = Knockout.makeTemplateSelector('notificationTemplate', 'untemplated notification');
        })(Jigsaw.Notifications || (Jigsaw.Notifications = {}));
        var Notifications = Jigsaw.Notifications;

        (function (UserSettings) {
            UserSettings.SETTINGSURL = 'user-settings';

            (function (FontSize) {
                FontSize[FontSize["Small"] = 0] = "Small";
                FontSize[FontSize["Medium"] = 1] = "Medium";
                FontSize[FontSize["Large"] = 2] = "Large";
            })(UserSettings.FontSize || (UserSettings.FontSize = {}));
            var FontSize = UserSettings.FontSize;

            /** this is the viewmodel used for the basic user settings */
            var UserSettingsViewModel = (function (_super) {
                __extends(UserSettingsViewModel, _super);
                function UserSettingsViewModel() {
                    _super.call(this);

                    this.fontSize = ko.observable(1 /* Medium */).extend({ persist: "fontSize" });
                    this.fontSize.subscribe(function (size) {
                        $('body').toggleClass('font-small', size === 0 /* Small */).toggleClass('font-medium', size === 1 /* Medium */).toggleClass('font-large', size === 2 /* Large */);

                        Common.triggerResize($('.ribbon'));
                    });
                    this.fontSize.valueHasMutated();
                }
                return UserSettingsViewModel;
            })(Common.ViewModelBase);
            UserSettings.UserSettingsViewModel = UserSettingsViewModel;

            var UserSettingsNotification = (function () {
                function UserSettingsNotification(accountModule) {
                    this.accountModule = accountModule;
                    this.signButtonText = ko.computed(function () {
                        return accountModule.userState() === 1 /* Present */ ? "Sign out" : "Sign in";
                    });
                }
                UserSettingsNotification.prototype.signButtonClicked = function () {
                    this.accountModule.ribbonButtonClicked();
                };

                UserSettingsNotification.prototype.showUserDetailsButtonClicked = function () {
                };

                UserSettingsNotification.prototype.settingsButtonClicked = function () {
                    return exports.history.navigateSilent(Jigsaw.UserSettings.SETTINGSURL);
                };
                return UserSettingsNotification;
            })();
            UserSettings.UserSettingsNotification = UserSettingsNotification;
            Jigsaw.Ribbon.ribbonQuickStartTemplateSelector.candidate(templates.userSettings.Notification(), function (x) {
                return x instanceof UserSettingsNotification;
            });

            var UserSettingsModule = (function (_super) {
                __extends(UserSettingsModule, _super);
                function UserSettingsModule(coreModule, accountModule) {
                    _super.call(this);
                    this.coreModule = coreModule;
                    this._view = new Marionette.CollectionView();
                    this._styles = new Jigsaw.Theming.ContentStyleSheet(templates.userSettings.styles);

                    this.userSettingsViewModel = new UserSettingsViewModel();
                    var baseSettingsView = new Marionette.View({
                        template: templates.userSettings.UserSettings,
                        viewModel: this.userSettingsViewModel
                    });
                    this._view.add(baseSettingsView);

                    this.registerUrl();

                    coreModule.addSlave(this._styles); // the styles should always be loaded for the Quickstart

                    var notification = new UserSettingsNotification(accountModule);
                    coreModule.quickStart.push(notification);
                }
                UserSettingsModule.prototype.requiredModules = function () {
                    return [this.coreModule];
                };

                UserSettingsModule.prototype.registerUrl = function () {
                    var _this = this;
                    exports.history.register(UserSettings.SETTINGSURL, function () {
                        return exports.moduleManager.load(_this);
                    });
                };

                UserSettingsModule.prototype.load = function () {
                    return this.coreModule.content.show(this._view);
                };
                return UserSettingsModule;
            })(Modules.ModuleBase);
            UserSettings.UserSettingsModule = UserSettingsModule;
        })(Jigsaw.UserSettings || (Jigsaw.UserSettings = {}));
        var UserSettings = Jigsaw.UserSettings;

        /** contains base classes and the module that serves as the base for the sidebar views */
        (function (Sidebar) {
            var MinimumWidth = 798;

            var SidebarView = (function (_super) {
                __extends(SidebarView, _super);
                function SidebarView(initOptions) {
                    _super.call(this, {
                        template: templates.sidebar.Sidebar,
                        viewModel: initOptions.viewModel,
                        regions: {
                            collapsed: '#sidebar-collapsed',
                            expanded: '#sidebar-expanded'
                        }
                    });
                    this.initOptions = initOptions;

                    this.expandedView = initOptions.expandedView;
                    this.collapsedView = initOptions.collapsedView;
                }
                SidebarView.prototype.domReady = function () {
                    _super.prototype.domReady.call(this);

                    this.collapsed.show(this.collapsedView);
                    this.expanded.show(this.expandedView);

                    this.initOptions.viewModel.collapsed.valueHasMutated();
                };

                SidebarView.prototype.collapse = function () {
                    this.initOptions.viewModel.collapsed(true);
                };
                return SidebarView;
            })(Marionette.Layout);
            Sidebar.SidebarView = SidebarView;

            var SidebarViewModel = (function (_super) {
                __extends(SidebarViewModel, _super);
                function SidebarViewModel(sidebarSize) {
                    _super.call(this);
                    this.collapsed = ko.observable(false).extend({ persist: 'sidebarCollapsedState' });

                    this.collapsed.subscribe(function (x) {
                        if (x) {
                            sidebarSize.minimizeSidebar().done();
                        } else {
                            sidebarSize.expandSidebar().done();
                        }
                    });
                }
                return SidebarViewModel;
            })(Common.ViewModelBase);
            Sidebar.SidebarViewModel = SidebarViewModel;

            var SidebarModule = (function (_super) {
                __extends(SidebarModule, _super);
                function SidebarModule(options) {
                    _super.call(this);
                    this.options = options;

                    this._sidebarViewModel = new SidebarViewModel(options.sidebarSize);
                    this._sidebarView = new SidebarView({
                        expandedView: new Marionette.CollectionView('ul'),
                        collapsedView: new Marionette.CollectionView('ul'),
                        viewModel: this._sidebarViewModel
                    });
                }
                SidebarModule.prototype.requiredModules = function () {
                    // this needs to be modified when the work sideLayoutModule is required
                    return [this.options.viewLayoutModule];
                };

                /** registers a view that will be rendered in the sidebar. */
                SidebarModule.prototype.registerView = function (expandedView, collapsedView) {
                    //this._view.expandedView.add(view);
                    this._sidebarView.expandedView.add(expandedView);

                    if (collapsedView) {
                        this._sidebarView.collapsedView.add(collapsedView);
                    }
                };

                SidebarModule.prototype.load = function () {
                    var _this = this;
                    //handle window resize for responsive purpose
                    $(window).resize(function () {
                        return _this.handleViewPortResize();
                    });

                    //handling toggling sidebar
                    $(window).bind('togggle-sidebar', function () {
                        return _this._sidebarViewModel.collapsed(!_this._sidebarViewModel.collapsed());
                    });

                    return this.options.viewLayoutModule.sidebar.show(this._sidebarView);
                };

                SidebarModule.prototype.unload = function () {
                    //unbind window resize
                    $(window).unbind('resize');

                    $(window).unbind('togggle-sidebar');

                    this._sidebarView.close();

                    return Q(true);
                };

                SidebarModule.prototype.handleViewPortResize = function () {
                    var currentWidth = $(document).width();

                    if (currentWidth != this._lastViewPortWidth && currentWidth < MinimumWidth) {
                        this._sidebarView.collapse();
                        this._lastViewPortWidth = currentWidth;
                    }
                };
                return SidebarModule;
            })(Modules.ModuleWithSlavesBase);
            Sidebar.SidebarModule = SidebarModule;

            var menu;
            (function (menu) {
                function expandTree(li, speed) {
                    if (typeof speed === "undefined") { speed = 200; }
                    if (li.is('li')) {
                        // expand parents
                        expandTree(li.parent().parent());

                        // expand current element
                        li.addClass('open').children('a').next().slideDown(speed);

                        // collapse sibilings
                        li.siblings().removeClass('open').find('a').next().slideUp(speed);
                    }
                }

                ko.bindingHandlers['jarvisMenu'] = {
                    init: function (element, valueAccessor) {
                        var defaults = {
                            speed: 200
                        }, options = valueAccessor(), opts = $.extend(defaults, options), $element = $(element), parents, visible;

                        $element.on('click', 'li a', toggleMenu);

                        function toggleMenu() {
                            if ($(this).next().is(':visible')) {
                                // just hide the element
                                $(this).parent().removeClass('open');
                                $(this).next().slideUp(options.speed);
                            } else {
                                expandTree($(this).parent(), options.speed);
                            }
                        }
                    }
                };

                ko.bindingHandlers['expandMenuWhen'] = {
                    init: function (element, valueAccessor) {
                        var value = valueAccessor(), subscription = value.subscribe(function () {
                            return expandTree($(element).parent());
                        });

                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                            subscription.dispose();
                        });
                    }
                };
            })(menu || (menu = {}));
        })(Jigsaw.Sidebar || (Jigsaw.Sidebar = {}));
        var Sidebar = Jigsaw.Sidebar;
    })(exports.Jigsaw || (exports.Jigsaw = {}));
    var Jigsaw = exports.Jigsaw;

    /** unique instance of HistoryController that will handle all history in the application */
    exports.history = History.history;

    exports.moduleManager = new Modules.ModuleManager(exports.history);
});

/// <reference path="definitions/_definitions.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('app-desktop',["require", "exports", 'app', 'templates/app'], function(require, exports, _app, templates) {
    (function (Knockout) {
        /** kendo splitter is very important for the layout, and is created asynchronously by default. */
        var kendoSplitterBinding = ko.bindingHandlers['kendoSplitter'];
        kendoSplitterBinding.widgetConfig.async = false;

        ko.bindingHandlers['kendoTooltip'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = ko.unwrap(valueAccessor());
                if (value) {
                    var tooltip = new kendo.ui.Tooltip(element, {
                        autoHide: true,
                        position: "bottom",
                        content: value
                    });

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        tooltip.destroy();
                    });
                }
            }
        };

        function getHoverObservable(element) {
            var result = ko.observable(false);
            element.mouseenter(function () {
                return result(true);
            });
            element.mouseleave(function () {
                return result(false);
            });
            return result;
        }

        ko.bindingHandlers['visibleWhenHover'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                // valueAccessor - refers to the css selector or the element that should be followed
                var activeClass = "k-state-border-down", value = $(ko.unwrap(valueAccessor())), contentElement = $(element), itemHover = getHoverObservable(value), contentHover = getHoverObservable(contentElement), visibleObservable = ko.computed(function () {
                    return itemHover() || contentHover();
                }).extend({ throttle: 200 });

                contentElement.mouseup(function () {
                    return contentHover(false);
                });

                // TODO: dispose event handlers created on the getHoverObservable method
                // TODO-cleaning: assume that element isn't a jquery array and process the array on the menuAlike binding
                _.each(contentElement, function (node) {
                    // apply bindings to menu items to follow the visible observable,
                    // can use the visible binding and pass the observable directly
                    // This is done for each element because the menuAlike binding can pass
                    // an array of items
                    ko.applyBindingsToNode(node, { visible: visibleObservable }, viewModel);
                });

                _.each(value, function (node) {
                    ko.applyBindingsToNode(node, { css: { 'k-state-border-down': contentHover } }, viewModel);
                });
            }
        };

        /** applies the visibleWhenHover binding to the second element, when the first one is hovered */
        ko.bindingHandlers['menuAlike'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = ko.unwrap(valueAccessor()), menuItems = _.isString(value) ? $(element).children(value) : $(element).children(':not(:first-child)');

                ko.bindingHandlers['visibleWhenHover'].init(menuItems, function () {
                    return $(element).children(':first-child');
                }, allBindingsAccessor, viewModel, bindingContext);
            }
        };

        $['browser'] = {
            msie: false,
            mozilla: true,
            safari: false,
            opera: false
        };

        /** splitter */
        var splitterCount = 0;
        ko.bindingHandlers['splitter'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                splitterCount++;

                var value = ko.unwrap(valueAccessor()), type = value.type || 'v', setup = {
                    type: type,
                    outline: true,
                    resizeToWidth: true,
                    anchorToWindow: true
                }, firtPanel = $(element).children().first(), secondPanel = $(element).children().last(), basePluginCardinalProperties = ['minLeft', 'maxLeft', 'minRight', 'maxRight', 'minTop', 'minBottom', 'dock', 'dockSize'], basePluginDependentProperties = ['sizeLeft', 'sizeRight', 'sizeTop', 'sizeBottom'], eventNamespace = '.splitter' + splitterCount;

                basePluginCardinalProperties.forEach(function (property) {
                    if (value[property]) {
                        var extension = {};
                        extension[property] = value[property];
                        $.extend(setup, extension);
                    }
                });

                basePluginDependentProperties.forEach(function (property) {
                    if (value[property]) {
                        var extension = {};
                        extension[property] = value[property]();
                        $.extend(setup, extension);
                    }
                });

                $(element).splitter(setup);

                var splitter = $(element), splitBar = $(element).children().first().next();

                if (value.toggleDockHandler) {
                    $(splitBar).dblclick(function () {
                        viewModel[value.toggleDockHandler]();
                    });
                }

                if (value.docked) {
                    var setDockedClass = function (obs) {
                        splitBar.removeClass('docked');
                        if (obs()) {
                            splitBar.addClass('docked');
                        }
                    };

                    setDockedClass(value.docked);

                    value.docked.subscribe(function () {
                        setDockedClass(value.docked);
                    });

                    //mandatory resize after set docked or not to splitter bar at first time
                    splitter.trigger('mandatory-resize');
                }

                //to update observables
                var updateObservablesHandler = function () {
                    var sizes = [firtPanel.width(), secondPanel.width(), firtPanel.height(), secondPanel.height()];
                    basePluginDependentProperties.forEach(function (property, index) {
                        if (value[property]) {
                            value[property](sizes[index]);
                        }
                    });
                    //splitter.trigger('mandatory-resize');
                };

                $(document).bind('manually-resize' + eventNamespace, updateObservablesHandler);

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $(document).unbind('manually-resize');

                    splitter.trigger('destroy');
                });
            }
        };
    })(exports.Knockout || (exports.Knockout = {}));
    var Knockout = exports.Knockout;

    (function (Jigsaw) {
        function updateCache() {
            applicationCache.update();
        }
        Jigsaw.updateCache = updateCache;

        var CoreModule = (function (_super) {
            __extends(CoreModule, _super);
            function CoreModule() {
                _super.apply(this, arguments);
                this._styles = new _app.Jigsaw.Theming.StyleSheet("content/modules/core.css", true);
            }
            CoreModule.prototype.requiredModules = function () {
                return _super.prototype.requiredModules.call(this).concat(this._styles);
            };
            return CoreModule;
        })(_app.Jigsaw.CoreModuleBase);
        Jigsaw.CoreModule = CoreModule;

        

        /** Adds the full screen button */
        function addFullScreenRibbonButton(coreModule) {
            _app.Utils.requirePromise('../libs/screenfull').done(function () {
                // if the fullscreen api is available
                if (screenfull.enabled) {
                    var full = "Full Screen", exit = "Exit <br/>Full Screen", buttonText = ko.observable(full);

                    screenfull.onchange = function () {
                        // change the text in the button depending on the full screen status
                        if (screenfull.isFullscreen) {
                            buttonText(exit);
                        } else {
                            buttonText(full);
                        }
                    };

                    coreModule.ribbon.tab("Users").group("Screen", 100).add(new _app.Jigsaw.Ribbon.RibbonButton(buttonText, function () {
                        screenfull.toggle();
                    }, "", "fa fa-recycle"), 1);
                }
            });
        }
        Jigsaw.addFullScreenRibbonButton = addFullScreenRibbonButton;

        //#endregion Full screen support (adds button to the ribbon)
        (function (Theming) {
            var ThemeManager = (function (_super) {
                __extends(ThemeManager, _super);
                function ThemeManager() {
                    _super.apply(this, arguments);
                }
                ThemeManager.prototype.initialize = function () {
                    this.addSelectThemeRibbonButton();

                    return _super.prototype.initialize.call(this);
                };

                ThemeManager.prototype.addSelectThemeRibbonButton = function () {
                    var availableThemes = _.map(this.themes(), function (theme) {
                        return theme.name;
                    });

                    this.coreModule.ribbon.tab("Users").group("Theme", 90).add(new _app.Jigsaw.Ribbon.RibbonSelect("Theme", availableThemes, this.selectedThemeName, "", "fa fa-cubes"));
                };
                return ThemeManager;
            })(_app.Jigsaw.Theming.ThemeManager);
            Theming.ThemeManager = ThemeManager;
        })(Jigsaw.Theming || (Jigsaw.Theming = {}));
        var Theming = Jigsaw.Theming;

        (function (Layout) {
            var layoutAnimationDuration = 250;

            (function (SidebarPosition) {
                SidebarPosition[SidebarPosition["Left"] = 0] = "Left";
                SidebarPosition[SidebarPosition["Right"] = 1] = "Right";
            })(Layout.SidebarPosition || (Layout.SidebarPosition = {}));
            var SidebarPosition = Layout.SidebarPosition;

            /** default variable for the initial sidebar position */
            var defaultSidebarPosition = 1 /* Right */;

            /** default variable for the initial sidebar size*/
            var defaultSidebarSize = 250;

            var SideLayoutViewModel = (function (_super) {
                __extends(SideLayoutViewModel, _super);
                function SideLayoutViewModel(initialSidebarPosition, initialSidebarSize) {
                    if (typeof initialSidebarPosition === "undefined") { initialSidebarPosition = defaultSidebarPosition; }
                    if (typeof initialSidebarSize === "undefined") { initialSidebarSize = defaultSidebarSize; }
                    var _this = this;
                    _super.call(this);
                    this.animateSidebarTo = new _app.Common.InteractionRequest();
                    /** flag to indicate that the invalidate layout event shouldn't be fired
                    because there'll be a series of changes in the properties. it'll probably
                    be fired after those changes */
                    this.editingLayout = false;
                    this.invalidateLayoutEvent = new _app.Common.Event();

                    this.sidebarPosition = ko.observable(initialSidebarPosition).extend({ persist: "sidebarPosition" });

                    var sidebarSize = ko.observable(initialSidebarSize).extend({ persist: "sidebarSize" });
                    this._sidebarSizeLocker = new ObservableSizeLocker(ko.computed({
                        read: function () {
                            return sidebarSize();
                        }, write: function (value) {
                            return sidebarSize(value);
                        }
                    }), function (x) {
                        return _this.animateSidebarTo.request(x);
                    });
                    this.sidebarSize = this._sidebarSizeLocker.calculatedSize.extend({ px: true });

                    this.sidebarPosition.subscribe(function () {
                        if (!_this.editingLayout) {
                            _this.invalidateLayoutEvent.fire();
                        }
                    });

                    this.sidebarLocked = this._sidebarSizeLocker.locked;
                }
                SideLayoutViewModel.prototype.invalidateLayout = function (handler) {
                    return this.invalidateLayoutEvent.add(handler);
                };

                SideLayoutViewModel.prototype.resetLayout = function () {
                    this.sidebarSize(defaultSidebarSize);
                    this.sidebarPosition(defaultSidebarPosition);
                };

                SideLayoutViewModel.prototype.minimizeSidebar = function () {
                    return this._sidebarSizeLocker.lock(50);
                };

                SideLayoutViewModel.prototype.expandSidebar = function () {
                    return this._sidebarSizeLocker.expand();
                };

                SideLayoutViewModel.prototype.toggleSidebar = function () {
                    $(window).trigger('togggle-sidebar');
                };
                return SideLayoutViewModel;
            })(_app.Common.ViewModelBase);
            Layout.SideLayoutViewModel = SideLayoutViewModel;

            var SideLayoutView = (function (_super) {
                __extends(SideLayoutView, _super);
                function SideLayoutView(options) {
                    var _this = this;
                    _super.call(this, {
                        template: options.template,
                        viewModel: options.viewModel,
                        regions: _.defaults(options.regions, {
                            content: "#sideLayout-content",
                            sidebar: "#sideLayout-sidebar"
                        })
                    });
                    this._firstRender = true;

                    var viewModel = options.viewModel;
                    viewModel.animateSidebarTo.handle(function (x) {
                        return _this.animateSidebarTo(x);
                    });

                    viewModel.invalidateLayout(function () {
                        return _this.invalidateLayout();
                    });
                }
                Object.defineProperty(SideLayoutView.prototype, "sidebarPosition", {
                    get: function () {
                        return this.options.viewModel.sidebarPosition();
                    },
                    enumerable: true,
                    configurable: true
                });

                SideLayoutView.prototype.invalidateLayout = function () {
                    // this happens when the view is re-rendered
                    this.render().done();
                };

                SideLayoutView.prototype.templateData = function () {
                    // this variables are used in the template
                    return {
                        sidebarLeft: this.sidebarPosition === 0 /* Left */
                    };
                };

                SideLayoutView.prototype.close = function () {
                    _super.prototype.close.call(this);
                    // next time the view is rendered it should be as usual
                    //this._firstRender = true;
                };

                SideLayoutView.prototype.render = function () {
                    //this.element.parent().addClass('busy');
                    // call base method
                    return _super.prototype.render.call(this).then(function () {
                        //this.element.parent().removeClass('busy');
                    });
                };

                SideLayoutView.prototype.animateSidebarTo = function (sidebarSize, duration) {
                    if (typeof duration === "undefined") { duration = layoutAnimationDuration; }
                    var sidebarRegionContainer = this.sidebar.options.element.parent(), sidebarRegionContainerWidth = sidebarRegionContainer.width(), difference = sidebarRegionContainerWidth - sidebarSize;

                    if (this.sidebarPosition === 1 /* Right */) {
                        var splitbar = sidebarRegionContainer.prev(), contentToExpand = splitbar.prev();

                        return Q.all([
                            sidebarRegionContainer.deferredAnimate({ left: "+=" + difference, width: sidebarSize }, duration),
                            splitbar.deferredAnimate({ left: "+=" + difference }, duration),
                            contentToExpand.deferredAnimate({ width: "+=" + difference }, duration)
                        ]);
                    } else {
                        var splitbar = sidebarRegionContainer.next(), contentToExpand = splitbar.next();

                        return Q.all([
                            sidebarRegionContainer.deferredAnimate({ width: sidebarSize }, duration),
                            splitbar.deferredAnimate({ left: "-=" + difference }, duration),
                            contentToExpand.deferredAnimate({ left: "-=" + difference, width: "+=" + difference }, duration)
                        ]);
                    }
                };
                return SideLayoutView;
            })(_app.Marionette.Layout);
            Layout.SideLayoutView = SideLayoutView;

            var SideLayoutModule = (function (_super) {
                __extends(SideLayoutModule, _super);
                function SideLayoutModule(coreModule) {
                    var _this = this;
                    _super.call(this);
                    this.coreModule = coreModule;

                    this.setup();

                    var selectedLocation = ko.computed({
                        read: function () {
                            return _this.viewModel.sidebarPosition() === 0 ? "Left" : "Right";
                        },
                        write: function (value) {
                            return _this.viewModel.sidebarPosition(value === "Left" ? 0 /* Left */ : 1 /* Right */);
                        }
                    }), ribbonSideBarSelect = new _app.Jigsaw.Ribbon.RibbonSelect("Side bar", ["Left", "Right"], selectedLocation, "", "/images/sidebar-ribbon.png");

                    this.ribbonModule = new _app.Jigsaw.Ribbon.RibbonItemModule({
                        coreModule: coreModule,
                        tab: { header: "Users" },
                        group: { header: "Layout", priority: 80 },
                        priority: 10,
                        items: [
                            ribbonSideBarSelect,
                            new _app.Jigsaw.Ribbon.RibbonButton("Reset all", function () {
                                return _this.viewModel.resetLayout();
                            }, "", "/images/restartlayout-ribbon.png")
                        ]
                    });
                }
                Object.defineProperty(SideLayoutModule.prototype, "content", {
                    get: function () {
                        return this.contentView.content;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(SideLayoutModule.prototype, "sidebar", {
                    get: function () {
                        return this.contentView.sidebar;
                    },
                    enumerable: true,
                    configurable: true
                });

                SideLayoutModule.prototype.setup = function () {
                    this.viewModel = new SideLayoutViewModel();
                    this.contentView = new SideLayoutView({
                        template: templates.SideLayout,
                        viewModel: this.viewModel,
                        regions: {}
                    });
                };

                SideLayoutModule.prototype.requiredModules = function () {
                    return [this.coreModule, this.ribbonModule];
                };

                SideLayoutModule.prototype.unload = function () {
                    //this.coreModule.content.close();
                    return _super.prototype.unload.call(this);
                };

                SideLayoutModule.prototype.load = function () {
                    return this.coreModule.content.show(this.contentView).then(function () {
                        return Q.delay(true, 100);
                    });
                };
                return SideLayoutModule;
            })(_app.Modules.ModuleBase);
            Layout.SideLayoutModule = SideLayoutModule;

            var ObservableSizeLocker = (function () {
                function ObservableSizeLocker(size, transition) {
                    var _this = this;
                    this.size = size;
                    this.transition = transition;
                    this.lockedSize = ko.observable(0);
                    this.locked = ko.observable(false);
                    this._queue = new _app.Common.PromiseQueue();
                    this.calculatedSize = ko.computed({
                        read: function () {
                            return _this.locked() ? _this.lockedSize() : size();
                        },
                        write: function (value) {
                            if (!_this.locked()) {
                                size(value);
                            } else {
                                // refresh the observable value
                                _this.locked.valueHasMutated();
                            }
                        }
                    });
                }
                /** puts the viewbar in a collapsed state. also hides the splitter on the view */
                ObservableSizeLocker.prototype.lock = function (size) {
                    var _this = this;
                    if (typeof size === "undefined") { size = 0; }
                    return this._queue.enqueue(function () {
                        return _this.transition(size).then(function () {
                            _this.lockedSize(size);
                            _this.locked(true);
                        });
                    });
                };

                ObservableSizeLocker.prototype.expand = function () {
                    var _this = this;
                    var size = this.size();

                    return this._queue.enqueue(function () {
                        return _this.transition(size).then(function () {
                            _this.locked(false);
                        });
                    });
                };
                return ObservableSizeLocker;
            })();

            (function (BarState) {
                BarState[BarState["Visible"] = 0] = "Visible";
                BarState[BarState["Collapsed"] = 1] = "Collapsed";
                BarState[BarState["Hidden"] = 2] = "Hidden";
            })(Layout.BarState || (Layout.BarState = {}));
            var BarState = Layout.BarState;

            (function (ViewbarPosition) {
                ViewbarPosition[ViewbarPosition["Bottom"] = 0] = "Bottom";
                ViewbarPosition[ViewbarPosition["Right"] = 1] = "Right";
            })(Layout.ViewbarPosition || (Layout.ViewbarPosition = {}));
            var ViewbarPosition = Layout.ViewbarPosition;

            /** default variable for the initial sidebar position */
            var defaultViewbarPosition = 0 /* Bottom */;

            /** default variable for the initial sidebar size */
            var defaultViewbarBottomSize = 250;
            var defaultViewbarRightSize = 400;

            var ViewLayoutViewModel = (function (_super) {
                __extends(ViewLayoutViewModel, _super);
                function ViewLayoutViewModel(initialSidebarPosition, initialSidebarSize, initialViewBarPosition) {
                    if (typeof initialSidebarPosition === "undefined") { initialSidebarPosition = defaultSidebarPosition; }
                    if (typeof initialSidebarSize === "undefined") { initialSidebarSize = defaultSidebarSize; }
                    if (typeof initialViewBarPosition === "undefined") { initialViewBarPosition = defaultViewbarPosition; }
                    var _this = this;
                    _super.call(this, initialSidebarPosition, initialSidebarSize);
                    this.animateViewbarTo = new _app.Common.InteractionRequest();
                    this._viewbarQueue = new _app.Common.PromiseQueue();

                    this.viewbarPosition = ko.observable(initialViewBarPosition).extend({ persist: "viewbarPosition" });

                    this.viewbarSizeBottom = ko.observable(defaultViewbarBottomSize).extend({ persist: "viewbarSizeBottom", px: true });
                    this.viewbarSizeRight = ko.observable(defaultViewbarRightSize).extend({ persist: "viewbarSizeRight", px: true });

                    this._viewbarSizeLocker = new ObservableSizeLocker(ko.computed({
                        read: function () {
                            return _this.viewbarPosition() === 0 /* Bottom */ ? _this.viewbarSizeBottom() : _this.viewbarSizeRight();
                        },
                        write: function (value) {
                            if (_this.viewbarPosition() === 0 /* Bottom */) {
                                _this.viewbarSizeBottom(value);
                            } else {
                                _this.viewbarSizeRight(value);
                            }
                        }
                    }), function (x) {
                        return _this.animateViewbarTo.request(x);
                    });
                    this.viewbarSize = this._viewbarSizeLocker.calculatedSize.extend({ px: true });

                    this.viewbarPosition.subscribe(function () {
                        if (!_this.editingLayout) {
                            _this.invalidateLayoutEvent.fire();
                        }
                    });

                    this.viewbarLocked = this._viewbarSizeLocker.locked;
                }
                ViewLayoutViewModel.prototype.resetLayout = function () {
                    this.editingLayout = true;

                    _super.prototype.resetLayout.call(this);

                    this.viewbarPosition(defaultViewbarPosition);
                    this.viewbarSize(defaultViewbarBottomSize);

                    this.editingLayout = false;
                    this.invalidateLayoutEvent.fire();
                };

                /** puts the viewbar in a collapsed state. also hides the splitter on the view */
                ViewLayoutViewModel.prototype.collapseViewbar = function () {
                    return this._viewbarSizeLocker.lock(0);
                };

                ViewLayoutViewModel.prototype.expandViewbar = function () {
                    return this._viewbarSizeLocker.expand();
                };
                return ViewLayoutViewModel;
            })(SideLayoutViewModel);
            Layout.ViewLayoutViewModel = ViewLayoutViewModel;

            var ViewLayoutView = (function (_super) {
                __extends(ViewLayoutView, _super);
                function ViewLayoutView(options) {
                    var _this = this;
                    _super.call(this, {
                        template: options.template,
                        viewModel: options.viewModel,
                        regions: _.defaults(options.regions, {
                            content: "#viewLayout-content",
                            viewbar: "#viewLayout-viewbar",
                            sidebar: "#sideLayout-sidebar"
                        })
                    });

                    var viewModel = options.viewModel;
                    viewModel.animateViewbarTo.handle(function (x) {
                        return _this.animateViewbarTo(x);
                    });

                    if (viewModel.viewbarSize() === 0) {
                        this.viewbar.options.element.hide();
                    }
                }
                Object.defineProperty(ViewLayoutView.prototype, "viewbarPosition", {
                    get: function () {
                        return this.options.viewModel.viewbarPosition();
                    },
                    enumerable: true,
                    configurable: true
                });

                ViewLayoutView.prototype.templateData = function () {
                    return _.defaults(_super.prototype.templateData.call(this), {
                        viewbarBottom: this.viewbarPosition === 0 /* Bottom */
                    });
                };

                ViewLayoutView.prototype.hideViewbarIfCollapsed = function () {
                    if (this.options.viewModel.viewbarSize() === 0) {
                        this.viewbar.options.element.hide();
                    }
                };

                ViewLayoutView.prototype.render = function () {
                    var _this = this;
                    return _super.prototype.render.call(this).then(function () {
                        return _this.hideViewbarIfCollapsed();
                    });
                };

                ViewLayoutView.prototype.animateSidebarTo = function (sidebarSize, duration) {
                    if (typeof duration === "undefined") { duration = layoutAnimationDuration; }
                    $(document).trigger('animating', 1000);

                    if (this.viewbarPosition === 0 /* Bottom */) {
                        // if the viewbar is at the bottom, then it's inner kendo splitter width needs to be increased
                        var sidebarRegionContainer = this.sidebar.options.element.parent(), sidebarRegionContainerWidth = sidebarRegionContainer.width(), difference = sidebarRegionContainerWidth - sidebarSize, mainContentContainer = this.content.options.element.parent();

                        return Q.all([
                            mainContentContainer.parent().children().deferredAnimate({ width: "+=" + difference }, duration),
                            _super.prototype.animateSidebarTo.call(this, sidebarSize, duration)
                        ]);
                    } else if (this.sidebarPosition === 1 /* Right */ && this.viewbarPosition === 1 /* Right */) {
                        // when both bars are on the right then both need to be animated
                        var sidebarRegionContainer = this.sidebar.options.element.parent(), sidebarRegionContainerWidth = sidebarRegionContainer.width(), difference = sidebarRegionContainerWidth - sidebarSize, sidebarSplitbar = sidebarRegionContainer.prev(), contentContainer = sidebarSplitbar.prev(), contentToExpand = contentContainer.children().children().first(), viewbarSplitbar = contentToExpand.next(), viewbarContent = viewbarSplitbar.next(), viewbarWidth = viewbarContent.width();

                        var result;

                        return Q.all([
                            sidebarRegionContainer.deferredAnimate({ left: "+=" + difference, width: sidebarSize }, duration),
                            sidebarSplitbar.deferredAnimate({ left: "+=" + difference }, duration),
                            viewbarSplitbar.deferredAnimate({ left: "+=" + difference }, duration),
                            viewbarContent.deferredAnimate({ left: "+=" + difference }, duration),
                            contentToExpand.deferredAnimate({ width: "+=" + difference }, duration),
                            contentContainer.deferredAnimate({ width: "+=" + difference }, duration)
                        ]).then(function () {
                            return sidebarRegionContainer.resize();
                        });
                    } else if (this.sidebarPosition === 0 /* Left */ && this.viewbarPosition === 1 /* Right */) {
                        var sidebarRegionContainer = this.sidebar.options.element.parent(), sidebarRegionContainerWidth = sidebarRegionContainer.width(), difference = sidebarRegionContainerWidth - sidebarSize, splitbar = sidebarRegionContainer.next(), contentContainer = splitbar.next(), contentToExpand = contentContainer.children().children().first(), viewbarSplitbar = contentToExpand.next(), viewbarContent = viewbarSplitbar.next();

                        result = Q.all([
                            sidebarRegionContainer.deferredAnimate({ width: sidebarSize }, duration),
                            splitbar.deferredAnimate({ left: "-=" + difference }, duration),
                            contentToExpand.deferredAnimate({ width: "+=" + difference }, duration),
                            viewbarSplitbar.deferredAnimate({ left: "+=" + difference }, duration),
                            viewbarContent.deferredAnimate({ left: "+=" + difference }, duration),
                            contentContainer.deferredAnimate({ left: "-=" + difference, width: "+=" + difference }, duration)
                        ]);

                        //return result;
                        //Patch - raise the resize event for splitter recalculations
                        return result.then(function () {
                            return sidebarRegionContainer.resize();
                        });
                    }

                    return _super.prototype.animateSidebarTo.call(this, sidebarSize, duration);
                };

                ViewLayoutView.prototype.animateViewbarTo = function (viewbarSize, duration) {
                    var _this = this;
                    if (typeof duration === "undefined") { duration = layoutAnimationDuration; }
                    var viewbarRegionContainer = this.viewbar.options.element.parent(), splitbar = viewbarRegionContainer.prev(), contentToExpand = splitbar.prev(), result;

                    $(document).trigger('animating', 1000);

                    if (this.viewbarPosition === 0 /* Bottom */) {
                        var viewbarRegionContainerHeight = viewbarRegionContainer.height(), difference = viewbarRegionContainerHeight - viewbarSize;

                        result = Q.all([
                            viewbarRegionContainer.deferredAnimate({ top: "+=" + difference, height: viewbarSize }, duration),
                            splitbar.deferredAnimate({ top: "+=" + difference }, duration),
                            contentToExpand.deferredAnimate({ height: "+=" + difference }, duration)
                        ]);
                    } else {
                        var viewbarRegionContainerWidth = viewbarRegionContainer.width(), difference = viewbarRegionContainerWidth - viewbarSize;

                        result = Q.all([
                            viewbarRegionContainer.deferredAnimate({ left: "+=" + difference, width: viewbarSize }, duration),
                            splitbar.deferredAnimate({ left: "+=" + difference }, duration),
                            contentToExpand.deferredAnimate({ width: "+=" + difference }, duration)
                        ]);
                    }

                    if (viewbarSize === 0) {
                        this.viewbar.options.element.hide();
                        return result;
                    } else {
                        return result.then(function () {
                            return _this.viewbar.options.element.show();
                        });
                    }
                };
                return ViewLayoutView;
            })(SideLayoutView);
            Layout.ViewLayoutView = ViewLayoutView;

            var ViewLayoutModule = (function (_super) {
                __extends(ViewLayoutModule, _super);
                function ViewLayoutModule(coreModule) {
                    var _this = this;
                    _super.call(this, coreModule);

                    var selectedLocation = ko.computed({
                        read: function () {
                            return _this.viewModel.viewbarPosition() === 0 ? "Bottom" : "Right";
                        },
                        write: function (value) {
                            return _this.viewModel.viewbarPosition(value === "Bottom" ? 0 /* Bottom */ : 1 /* Right */);
                        }
                    }), ribbonViewBarSelect = new _app.Jigsaw.Ribbon.RibbonSelect("View bar", ["Bottom", "Right"], selectedLocation, "", "fa  fa-search-plus");
                    this.ribbonModule.add(ribbonViewBarSelect, 5);
                }
                Object.defineProperty(ViewLayoutModule.prototype, "content", {
                    get: function () {
                        return this.contentView.content;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewLayoutModule.prototype, "viewbar", {
                    get: function () {
                        return this.contentView.viewbar;
                    },
                    enumerable: true,
                    configurable: true
                });

                ViewLayoutModule.prototype.setup = function () {
                    this.viewModel = new ViewLayoutViewModel();
                    this.contentView = new ViewLayoutView({
                        template: templates.ViewLayout,
                        viewModel: this.viewModel,
                        regions: {}
                    });

                    var viewModel = this.viewModel;
                };
                return ViewLayoutModule;
            })(SideLayoutModule);
            Layout.ViewLayoutModule = ViewLayoutModule;
        })(Jigsaw.Layout || (Jigsaw.Layout = {}));
        var Layout = Jigsaw.Layout;

        /** extends user settings module from the core app module */
        (function (UserSettings) {
            var UserSettingsModule = (function (_super) {
                __extends(UserSettingsModule, _super);
                function UserSettingsModule(coreModule, accountModule, layoutModule) {
                    _super.call(this, coreModule, accountModule);

                    _.extend(this.userSettingsViewModel, {
                        sidebarPosition: layoutModule.viewModel.sidebarPosition,
                        viewbarPosition: layoutModule.viewModel.viewbarPosition
                    });
                }
                return UserSettingsModule;
            })(_app.Jigsaw.UserSettings.UserSettingsModule);
            UserSettings.UserSettingsModule = UserSettingsModule;
        })(Jigsaw.UserSettings || (Jigsaw.UserSettings = {}));
        var UserSettings = Jigsaw.UserSettings;
    })(exports.Jigsaw || (exports.Jigsaw = {}));
    var Jigsaw = exports.Jigsaw;

    exports.coreModule = new Jigsaw.CoreModule();

    exports.accountModule = new _app.Jigsaw.Account.AccountModule(exports.coreModule);
    exports.coreModule.addSlave(exports.accountModule);

    // export var sideLayoutModule = new Jigsaw.Layout.SideLayoutModule();
    exports.viewLayoutModule = new Jigsaw.Layout.ViewLayoutModule(exports.coreModule);

    // add custom buttons
    Jigsaw.addFullScreenRibbonButton(exports.coreModule);

    var UserSettingsNotifications = new Jigsaw.UserSettings.UserSettingsModule(exports.coreModule, exports.accountModule, exports.viewLayoutModule);

    exports.themeManager = new Jigsaw.Theming.ThemeManager(exports.coreModule, exports.accountModule);
    _app.Jigsaw.Theming.loadThemes(exports.themeManager); // load themes sent by server on configuration
    _app.history.beforeWake(function () {
        return exports.themeManager.initialize();
    });

    exports.sidebarModule = new _app.Jigsaw.Sidebar.SidebarModule({
        sidebarSize: exports.viewLayoutModule.viewModel,
        viewLayoutModule: exports.viewLayoutModule
    });

    exports.notificationsModule = new _app.Jigsaw.Notifications.NotificationsModule(exports.coreModule, exports.sidebarModule);
});

define('templates/beta',["require", "exports"], function(require, exports) { 
    function __underscore(template) {
        var generate = _.template(template);
        generate.raw = template;
        return generate;
    }
    exports.BetaMain = function() { return "<div>This is the BETA MODULE...<a href=\"#test\">go to test module</a><div><a href=\"#\" class=\"btn btn-default\" data-bind=\"keyTips: { key : \'IB\' }, click : ia\">button</a><a href=\"#\" class=\"btn\" data-bind=\"keyTips: { key : \'IC\' },click: ib\">button</a><a href=\"#\" class=\"btn btn-success\" data-bind=\"keyTips: { key : \'SS\' }, click: ss\">button</a></div><div data-bind=\"tooltip: {title : \'Some tooltip\'}\">Some tooltip</div><div class=\"container\"><div class=\"row\"><h2>Multi level dropdown menu in Bootstrap 3</h2><hr><div class=\"dropdown\"><a id=\"dLabel\" role=\"button\" data-toggle=\"dropdown\" class=\"btn btn-primary\" data-target=\"#\" href=\"#\">Dropdown <span class=\"caret\"></span></a><ul class=\"dropdown-menu multi-level\" role=\"menu\" aria-labelledby=\"dropdownMenu\"><li><a href=\"#\">Some action</a></li><li><a href=\"#\">Some other action</a></li><li class=\"divider\"></li><li class=\"dropdown-submenu\"><a tabindex=\"-1\" href=\"#\">Hover me for more options</a><ul class=\"dropdown-menu\"><li><a tabindex=\"-1\" href=\"#\">Second level</a></li><li class=\"dropdown-submenu\"><a href=\"#\">Even More..</a><ul class=\"dropdown-menu\"><li><a href=\"#\">3rd level</a></li><li><a href=\"#\">3rd level</a></li></ul></li><li><a href=\"#\">Second level</a></li><li><a href=\"#\">Second level</a></li></ul></li></ul></div></div></div></div>"; };
    exports.NotificationPanelItem = function() { return "Scheduled Notification by <span class=\"user-name\" data-bind=\"text: \'@\' + author\"></span>"; };
    
});

/// <reference path="../definitions/require.d.ts" />
/// <reference path="../definitions/jquery.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/betaModule',["require", "exports", '../app', '../app-desktop', 'templates/beta'], function(require, exports, _app, app, template) {
    app.coreModule.ribbon.tab("System").group("Beta").add(new _app.Jigsaw.Ribbon.RibbonButton("Navigate", function () {
        _app.history.navigate("/beta");
    }, '', 'fa fa-star-half-o'));

    app.coreModule.ribbon.tab("System").group("Messages", 70).addAll([
        new _app.Jigsaw.Ribbon.RibbonButton("Raise an Error", function () {
            throw new Error("this is an error raised intentionally from the ribbon (will be removed after 3s).");
        }, "this will raise an error.", "fa fa-ban"),
        new _app.Jigsaw.Ribbon.RibbonButton("Info Message", function () {
            app.coreModule.messageQueue.add({ title: "From Ribbon", body: "Hello from the ribbon." });
        }, "this will show an info message below", "fa fa-info")
    ]);

    app.coreModule.ribbon.tab('System').group('SmartAdmin Notifications', 80).addAll([
        new _app.Jigsaw.Ribbon.RibbonButton("BigBox", function () {
            return _app.Jigsaw.Messages.bigBox({ title: 'From ribbon', body: 'from ribbon', level: 0 /* Error */ });
        }),
        new _app.Jigsaw.Ribbon.RibbonButton("SmallBox", function () {
            return _app.Jigsaw.Messages.smallBox({ title: 'From ribbon', body: 'from ribbon', level: 3 /* Info */ });
        }),
        new _app.Jigsaw.Ribbon.RibbonButton("ExtraSmallBox", function () {
            return _app.Jigsaw.Messages.extraSmallBox({ title: 'From ribbon', body: 'from ribbon', level: 1 /* Warning */ });
        })
    ]);

    //app.coreModule.menu.add(messageRibbonButton.content[0]);
    var BetaViewModel = (function (_super) {
        __extends(BetaViewModel, _super);
        function BetaViewModel() {
            _super.apply(this, arguments);
        }
        BetaViewModel.prototype.ia = function () {
            console.log('IA');
        };

        BetaViewModel.prototype.ib = function () {
            console.log('IB');
        };

        BetaViewModel.prototype.ss = function () {
            console.log('SS');
        };
        return BetaViewModel;
    })(_app.Common.ViewModelBase);
    exports.BetaViewModel = BetaViewModel;

    var BetaModule = (function (_super) {
        __extends(BetaModule, _super);
        function BetaModule() {
            _super.call(this);
            this.layoutView = new _app.Marionette.View({
                template: function () {
                    return "<p>some content</p>";
                }
            });
            this.contentView = new _app.Marionette.View({
                template: template.BetaMain,
                viewModel: new BetaViewModel()
            });
        }
        BetaModule.prototype.requiredModules = function () {
            return [app.viewLayoutModule];
        };

        BetaModule.prototype.load = function () {
            // when base modules are loaded show load this module
            return Q.all([
                app.viewLayoutModule.content.show(this.contentView),
                app.viewLayoutModule.viewbar.show(this.layoutView)
            ]);
        };
        return BetaModule;
    })(_app.Modules.ModuleBase);
    exports.BetaModule = BetaModule;

    exports.betaModule = new BetaModule();

    /** this module exists for developing purposes to test if the memory allocated by other modules is
    released when this module is loaded */
    var EmptyModule = (function (_super) {
        __extends(EmptyModule, _super);
        function EmptyModule() {
            _super.apply(this, arguments);
        }
        EmptyModule.prototype.requiredModules = function () {
            return [app.coreModule];
        };

        EmptyModule.prototype.load = function () {
            return Q(true);
        };
        return EmptyModule;
    })(_app.Modules.ModuleBase);

    var emptyModule = new EmptyModule();

    var HelloWorldModule = (function (_super) {
        __extends(HelloWorldModule, _super);
        function HelloWorldModule() {
            _super.apply(this, arguments);
            this.view = new _app.Marionette.View({ template: function () {
                    return "<h1>Hello World!<h1>";
                } });
        }
        HelloWorldModule.prototype.requiredModules = function () {
            return [app.coreModule];
        };

        HelloWorldModule.prototype.load = function () {
            app.coreModule.content.show(this.view);
            return Q(true);
        };
        return HelloWorldModule;
    })(_app.Modules.ModuleBase);

    var hellowWorldModule = new HelloWorldModule();

    var PartialViewModule = (function (_super) {
        __extends(PartialViewModule, _super);
        function PartialViewModule() {
            _super.call(this);

            this.view = new _app.Marionette.View({
                template: _app.Marionette.urlTemplate("/path-to-view", { some: 'parameter' })
            });
        }
        PartialViewModule.prototype.requiredModules = function () {
            return [app.coreModule];
        };

        PartialViewModule.prototype.load = function () {
            return app.coreModule.content.show(this.view);
        };
        return PartialViewModule;
    })(_app.Modules.ModuleBase);

    //_app.history.register("/", () => _app.moduleManager.load(betaModule));
    _app.history.register("/beta", function () {
        return _app.moduleManager.load(exports.betaModule);
    });

    _app.history.register("/hello-world", function () {
        return _app.moduleManager.load(hellowWorldModule);
    });

    app.coreModule.ribbon.tab("System").group("Developer").addAll([
        new _app.Jigsaw.Ribbon.RibbonButton("Empty", function () {
            _app.history.navigate("/empty");
        }),
        new _app.Jigsaw.Ribbon.RibbonButton("Clear Storage", function () {
            localStorage.clear();
        }, '', 'fa fa-trash-o')
    ]);
    _app.history.register("/empty", function () {
        return _app.moduleManager.load(emptyModule);
    });

    function __init__() {
    }
    exports.__init__ = __init__;
});

define('templates/test',["require", "exports"], function(require, exports) { 
    function __underscore(template) {
        var generate = _.template(template);
        generate.raw = template;
        return generate;
    }
    exports.TestMain = function() { return "<iframe class=\"takeall-space\" src=\"./test\"style=\"position: absolute; top: 0px; bottom: 0px; right: 0px; left: 0px; width: 100%; height: 100%; border: 0px none;\"></iframe>"; };
    
});

/// <reference path="../definitions/require.d.ts" />
/// <reference path="../definitions/jquery.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/testModule',["require", "exports", '../app', '../app-desktop', 'templates/test'], function(require, exports, _app, app, templates) {
    app.coreModule.ribbon.tab("System").group("Tests", 30).addAll([
        new _app.Jigsaw.Ribbon.RibbonButton("Run scoped", function () {
            _app.history.navigate("test");
        }, "Run tests inside Jigsaw", "fa fa-shield"),
        new _app.Jigsaw.Ribbon.RibbonButton("Run all", function () {
            window.location.href = "/test";
        }, "", "fa fa-shield"),
        new _app.Jigsaw.Ribbon.RibbonButton("Glimpse", function () {
            window.location.href = "/glimpse.axd";
        }, "Check options for Glimpse", "fa fa-shield")
    ]);

    var CoreModule = (function (_super) {
        __extends(CoreModule, _super);
        function CoreModule() {
            _super.call(this);
            this.contentView = new _app.Marionette.View({ template: templates.TestMain });
        }
        CoreModule.prototype.requiredModules = function () {
            return [app.coreModule];
        };

        CoreModule.prototype.load = function () {
            return app.coreModule.content.show(this.contentView);
        };
        return CoreModule;
    })(_app.Modules.ModuleBase);
    exports.CoreModule = CoreModule;

    var coreModule = new CoreModule();

    function __init__() {
        _app.history.register("test", function () {
            return _app.moduleManager.load(coreModule);
        });
    }
    exports.__init__ = __init__;
});

define('templates/data',["require", "exports"], function(require, exports) { 
    function __underscore(template) {
        var generate = _.template(template);
        generate.raw = template;
        return generate;
    }
    exports.codeeffects = "div.ceToolBar input,table.ceTime input,table.ceTime select,span.ceSaveButton,span.ceDeleteButton,span.ceRulesButton{font-family:Tahoma,Arial,sans-serif;font-size:12px}table.ceHeader,td.ceDays{font-family:Tahoma,Geneva,sans-serif}div.ceHelp,input.ceNameBox,input.ceDescriptionBox{color:#444;text-shadow:0 1px 0 rgba(200, 200, 200, 1)}span.ceFlow,div.ceToolBar,span.ceClause,span.ceOperator,span.ceParenthesis,span.ceNewLine{color:#000}span.ceAction,span.ceField{color:Teal}span.ceSaveButton,span.ceEmpty{color:#009600}input.ceNameBoxDefault,input.ceDescriptionBoxDefault{color:#B1B1B1}td.ceDays{font-size:9px;color:#B4B4B4}td.ceRollover,table.ceHeader,span.ceWarn{color:#FFF}span.ceValue,span.ceDeleteButton,div.ceError,input.ceError{color:#C00}table.ceCal,table.ceTime,div.ceMenu,div.ceToolBar input,span:hover.ceSaveButton,span:hover.ceDeleteButton,span:hover.ceRulesButton{background-color:#FFF}span.ceHighlight{background-color:#FFF34D}span.ceCurrent{background-color:#C5C7C1}span.ceWarn{background-color:#F00;background:-webkit-gradient(linear,left top,left bottom,from(#FF7575),to(#F00));background:-moz-linear-gradient(top,#FF7575,#F00)}td.ceSelected{background-color:#A1EB98}td.ceToday{background-color:#FFB7D2}div.ceRule{border:solid 1px #DADEE0;background-color:#EDF0F2;background:-webkit-gradient(linear,left top,left bottom,from(#E4EAED),to(#FFFFFF));background:-moz-linear-gradient(top,#E4EAED,#FFFFFF);padding:10px}div.ceToolBar{border:solid 1px #C8D5DE;background-color:#DCDFE0;background:-webkit-gradient(linear,left top,left bottom,from(#E6EAED),to(#C5D0D6));background:-moz-linear-gradient(top,#E6EAED,#C5D0D6);text-shadow:0 1px 0 rgba(240, 240, 240, 1);margin-bottom:7px;padding:3px 6px;white-space:nowrap}td.ceRollover,table.ceHeader{background-color:#8A969C;background:-webkit-gradient(linear,left top,left bottom,from(#B5C2C9),to(#8A969C));background:-moz-linear-gradient(top,#B5C2C9,#8A969C)}div.ceMenu table,div.ceMenu table td,div.ceRule span,div.ceToolBar table,div.ceToolBar table td,div.ceToolBar input,table.ceCal table,table.ceCal table td,table.ceTime table,table.ceTime table td{border:0}div.ceCursorOuter{border-top:solid 1px #000;border-bottom:solid 1px #000}div.ceCursorInner{border-left:solid 1px #000}div.ceRule,div.ceToolBar{-webkit-border-radius:7px;-moz-border-radius:7px;border-radius:7px}table.ceCal,table.ceTime,div.ceMenu,span.ceSaveButton,span.ceDeleteButton,span.ceRulesButton,div.ceToolBar input{-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px}table.ceHeader,td.ceToday,td.ceRollover,td.ceSelected,span.ceFlow,span.ceField,span.ceAction,span.ceValue,span.ceClause,span.ceOperator,span.ceParenthesis,span.ceTab,span.ceNewLine{-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}span.ceFlow,span.ceAction,span.ceField,table.ceHeader,td.ceDays,span.ceSaveButton,span.ceDeleteButton,span.ceRulesButton{font-weight:bold}div.ceHelp{font-size:11px;padding:0 0 8px 0}td.ceDay,td.ceToday,td.ceRollover,td.ceDays,td.ceSelected,div.ceHelp{text-align:center}div.ceToolBar table td,div.ceMenu table td,table.ceCal table td,table.ceTime table td{vertical-align:middle}table.ceCal,table.ceTime,div.ceMenu{border:solid 1px #CDCDCD}table.ceCal,table.ceTime,div.ceMenu{-moz-box-shadow:2px 2px 4px #ADADAD;-webkit-box-shadow:2px 2px 4px #ADADAD;box-shadow:2px 2px 4px #ADADAD}input.ceNameBox,input.ceNameBoxDefault{width:100px}input.ceDescriptionBox,input.ceDescriptionBoxDefault{width:170px;margin-left:4px;margin-right:4px}div.ceToolBar table,div.ceToolBar table td{padding:0}table.ceCal{padding:1px}div.ceMenu table td{padding:2px}div.ceToolBar input{padding: 2px 6px}td.ceDay,td.ceToday,td.ceRollover,td.ceDays,td.ceSelected,span.ceSaveButton,span.ceDeleteButton,span.ceRulesButton,span:hover.ceSaveButton,span:hover.ceDeleteButton,span:hover.ceRulesButton{padding:2px 4px}span:hover.ceSaveButton,span:hover.ceDeleteButton{cursor:pointer}td.ceDay,td.ceToday,td.ceRollover,td.ceDays,td.ceSelected,div.ceToolBar,span.ceFlow,span.ceField,span.ceAction,span.ceClause,span.ceOperator,span.ceParenthesis,span.ceTab,span.ceNewLine,span.ceValue,div.ceHelp{cursor:default}";
    exports.ColumnChooser = function() { return "<div class=\"dropdown column-chooser-dropdown\"><a class=\"btn btn-default\" data-toggle=\"dropdown\" data-bind=\"dropdown: { notCloseWithin : true }, keyTipsGroup : { key: \'GC\', group: \'column-chooser\'  }\" href=\"#\"><span class=\"caret\"> </span></a><ul class=\"dropdown-menu smart-form\" data-bind=\"foreach: columns\"><li><a href=\"javascript:void(0);\"><label class=\"checkbox\"><input type=\"checkbox\" data-bind=\"checked: visible, keyTipsInput : { parentGroup: \'column-chooser\' }\"><i></i><span data-bind=\"text: name\"></span></label></a></li></ul></div>"; };
    exports.DataItems = __underscore("<!-- this template must be created with a DataItemsView to create the missing items: k-grid, column-chooser, web-rulethese elements aren\'t created with KO bindings --><% var hasAdvancedSearch = rc.advancedSearchSettingsUrl || rc.advancedSearchSettings; %><% if (rc.filterTemplate) { %><div class=\"filter-container\" data-bind=\"resizeWhen: queryFilter.parameters, css: { \'non-empty\': queryFilter.parameters().length }\"><div data-bind=\"foreach: queryFilter.parameters\"><%= rc.filterTemplate %><div class=\"btn btn-default\" data-bind=\"qclick: function() { return $parent.queryFilter.clear() }\">Clear</div></div></div><% } %><div data-bind=\"messageQueue: messageQueue\"></div><section class=\"all-space\" data-bind=\"measurePrev: \'top\'\"><!-- row --><div class=\"row\"><!-- SINGLE GRID --><article><div class=\"jarviswidget jarviswidget-sortable\"><header role=\"heading\"><div class=\"jarviswidget-ctrls\" role=\"menu\"><% if (rc.excelExport) { %><a class=\"button-icon hidden-sm hidden-xs\" href=\"javascript:void(0);\" data-bind=\"click: excelChooseColumnsExport, keyTips : { key : \'GE\' }, tooltip: {title: \'Export Excel\',  placement: \'bottom\'}\"><i class=\"fa fa-file-excel-o\"></i></a><% } %><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Fullscreen\',  placement: \'bottom\'}, toogleFullScreen : { wrapperSelector : \'.jarviswidget\', class : \'fa fa-expand | fa fa-compress\'},  keyTips : { key : \'GF\' }\"><i></i></a></div><% if (hasAdvancedSearch) { %><div class=\"widget-toolbar hidden-sm hidden-xs\"><span class=\"advanced-search\" data-bind=\"with: searchManager\"><span class=\"search-input\"><input type=\"text\" data-bind=\"searchInput: { query: simpleSearchQuery, search: search, clear: clear, type: searchType }, keyTipsInput : { key : \'GA\'} \"><a class=\"btn btn-default\" data-bind=\"checkbox2: advancedPanelActive, keyTips : { key : \'GD\' } \"><i class=\"fa\" data-bind=\"css: {\'fa-chevron-up\': advancedPanelActive, \'fa-chevron-down\': !advancedPanelActive()}\"></i></a><a class=\"btn btn-default\" data-bind=\"qclick: search\"><i class=\"fa fa-search\"></i></a></span></span></div><% } %><% if (rc.jumpTo) { %><div class=\"widget-toolbar hidden-xs\"><span class=\"jumpto-search\" data-bind=\"with: jumpToSearch\"><input type=\"text\" data-bind=\"value: searchTerm, pressEnter: quickJump, keyTipsInput : { key : \'GS\'} \"><a class=\"btn btn-default\" data-bind=\"qclick: quickJump\"><i class=\"fa fa-step-forward\"></i></a></span></div><% } %><h2><strong class=\"hidden-xs\"><%= rc.title %></strong> &nbsp;<% if (rc.addNew) {%><a class=\"btn btn-primary btn-xs\" data-bind=\"click: addNew, keyTips : { key : \'GN\'}\"><i class=\"fa fa-plus\"></i></a><% } %></h2></header><!-- widget div--><div role=\"content\"><% if (hasAdvancedSearch) { %><div data-bind=\"with: searchManager\"><div id=\"advanced-search-container\" data-bind=\"visible : advancedPanelActive\"><!--data-bind=\"visibleExtended: {value : advancedPanelActive, slide : true}\"--><div id=\"filter-container\"><!-- created by view --></div><p class=\"float-right\"><a class=\"btn btn-default\" data-bind=\"qclick: saveAndSearch, keyTips : { key : \'XS\'}\">Save&Search</a><a class=\"btn btn-default\" data-bind=\"qclick: search, keyTips : { key : \'XX\'}\">Search</a><a class=\"btn btn-danger\" data-bind=\"click: clear, keyTips : { key : \'XC\'}\">Clear</a></p></div><div class=\"clearfix\"></div>&nbsp;</div><% } %><!-- widget content --><% if (hasAdvancedSearch) { %><div id=\"grid-container\" class=\"widget-body all-space\" data-bind=\"measurePrev: \'top\'\"><% } %><% if (!hasAdvancedSearch) { %><div id=\"grid-container\" class=\"widget-body all-space\"><% } %><div class=\"k-grid\" data-bind=\"keyTipsGrid: {key : \'GG\'}\"><!-- created by view --></div><span class=\"column-chooser\"><!-- created by view --></span></div><!-- end widget content --></div><!-- end widget div --></div></div></article><!-- GRID END --></div><!-- end row --></section>");
    exports.Field = __underscore("<label><%= rc.label %></label><% if (rc.required) { %><span class=\'required-star\'>*</span><% } %><span class=\"input\" data-bind=\"css: { <%= rc.validatable? \'\\'state-error\\':\' + rc.property+ \'.isModified() && !\' + rc.property + \'.isValid()\' : \'\' %> }\"><% if (rc.description) { %><i class=\"icon-append fa fa-question-circle\"></i><% } %><input type=\"text\" data-bind=\"value: <%= rc.property %>, <%= rc.focus? \'focus: \' + rc.focus : \'\' %> \" /><% if (rc.validatable)  { %><!-- ko if: <%= rc.property %>.isModified() && !<%= rc.property %>.isValid() --><b class=\"tooltip tooltip-bottom-right\"><i class=\"fa fa-warning txt-color-teal\"></i><span data-bind=\"text: <%= rc.property %>.error\" /></b><!-- /ko --><% } %><% if (rc.description) { %><b class=\"tooltip tooltip-bottom-right\"><i class=\"fa fa-warning txt-color-teal\"></i><%= rc.description %></b><% } %></span>");
    exports.FieldReadOnly = __underscore("<label><%= rc.label %>:</label><% if (rc.required) { %><!--<span class=\'required-star\'>*</span>--><% } %><span class=\"input\" data-bind=\"css: { <%= rc.validatable? \'\\'state-error\\':\' + rc.property+ \'.isModified() && !\' + rc.property + \'.isValid()\' : \'\' %> }\"><% if (rc.description) { %><!--<i class=\"icon-append fa fa-question-circle\"></i>--><% } %><span data-bind=\"text: <%= rc.property %>\"></span><% if (rc.validatable)  { %><!-- ko if: <%= rc.property %>.isModified() && !<%= rc.property %>.isValid() --><!--<b class=\"tooltip tooltip-bottom-right\"><i class=\"fa fa-warning txt-color-teal\"></i><span data-bind=\"text: <%= rc.property %>.error\" /></b>--><!-- /ko --><% } %><% if (rc.description) { %><!--<b class=\"tooltip tooltip-bottom-right\"><i class=\"fa fa-warning txt-color-teal\"></i><%= rc.description %></b>--><% } %></span>");
    exports.JumpToMultipleResultsMessage = __underscore("<p>Multiple results found for <%= rc.targetProperty %>  \'<%= rc.searchTerm %>\' </p><p class=\"text-align-right\"><button id=\"prev\" class=\"btn btn-primary btn-sm\">Prev</button><button id=next class=\"btn btn-danger btn-sm\">Next</button></p><!--<div class=\"alert alert-info\"><div class=\"header\"><span data-bind=\"text: title\"></span><div class=\"float-right\"><a data-bind=\"click: close\"><span class=\"k-icon k-i-close\" role=\"presentation\"></span></a></div></div><span data-bind=\"text: body\"></span><a class=\"btn btn-default\" data-bind=\"qclick: findPrev, css: { \'disabled\': !canFindPrevious() }\">Find Prev</a><a class=\"btn btn-default\" data-bind=\"qclick: findNext, css: { \'disabled\': !canFindNext() }\">Find Next</a></div>-->");
    exports.PopupLayout = __underscore("<div id=\"popupLayout\" data-bind=\"markZIndexBase: 1\"><div class=\"modal-body\"><div class=\"ribbon\"><div class=\"swiper-container\"><div class=\"swiper-wrapper\"><div class=\"content-slide\"><div class=\"ribbon-tab\"><div class=\"ribbon-section\"><span data-bind=\"visible: !isReadOnly()\"><a class=\"btn btn-default\" data-bind=\"qclick: save, keyTips: { key : \'VS\' }\"><img src=\"images/save.png\" /><p>Save</p></a><a class=\"btn btn-default\" data-bind=\"qclick: saveAndClose, keyTips: { key : \'VX\' }\"><img src=\"images/save-close.png\" /><p>Save + Close</p></a></span><a class=\"btn btn-default\" data-bind=\"qclick: close, keyTips: { key : \'VC\' }\"><img src=\"images/cancel.png\" /><p>Close</p></a><span class=\"section-title\">Save+Close</span></div><div class=\"ribbon-section-sep\"></div><!-- ko foreach: customCommands.storage --><div class=\"ribbon-section\"><div data-bind=\"foreach: storage\"><a class=\"ribbon-button ribbon-button-large\" data-bind=\"click: content \" href=\"#\"><img data-bind=\"attr: { src: imageUrl }\" /><p data-bind=\"html: text\"></p></a></div><span class=\"section-title\" data-bind=\"text: text\"></span></div><div class=\"ribbon-section-sep\"></div><!-- /ko --></div></div></div></div></div><div data-bind=\"markErrorCollection: {}\"><div data-bind=\"validationSummary: {}\"></div><div data-bind=\"messageQueue: messageQueue\"></div><div id=\"window-content\" class=\"data-module\" data-bind=\"markReadOnlyTree: isReadOnly\"><%= rc.renderBody %></div></div></div></div>");
    exports.RequiredStar = function() { return "<span class=\'required-star\'>*</span>"; };
    exports.styles = "/* data *//* Styles associated to the main grid */#viewLayout-content,.data-module-content {/*header {font-weight: 600;display: inline;position: relative;top: 4px;}*/}#viewLayout-content #data-titlebar,.data-module-content #data-titlebar {margin: 3px;min-height: 30px;}#viewLayout-content #grid-container,.data-module-content #grid-container {bottom: 0;left: 0;position: absolute;right: 0;}#viewLayout-content #grid-container .command-bar + .k-grid,.data-module-content #grid-container .command-bar + .k-grid {top: 35px;}#viewLayout-content .command-bar,.data-module-content .command-bar {border-top-width: 1px;}#viewLayout-content .column-chooser .k-content,.data-module-content .column-chooser .k-content {margin: 2px;}#viewLayout-content .k-grid,.data-module-content .k-grid {bottom: 34px;left: 0;position: absolute;right: 0;top: 0;}#viewLayout-content .k-grid .k-grid-content,.data-module-content .k-grid .k-grid-content {bottom: 0;left: 0;position: absolute;right: 0;top: 32px;}#viewLayout-content .k-grid .k-grid-content tr .grid-button-undelete,.data-module-content .k-grid .k-grid-content tr .grid-button-undelete {display: none;}#viewLayout-content .k-grid .k-grid-content tr.row-removed,.data-module-content .k-grid .k-grid-content tr.row-removed {opacity: 0.8;}#viewLayout-content .k-grid .k-grid-content tr.row-removed:not(.k-state-selected),.data-module-content .k-grid .k-grid-content tr.row-removed:not(.k-state-selected) {background: #ff0000;}#viewLayout-content .k-grid .k-grid-content tr.row-removed.k-state-selected,.data-module-content .k-grid .k-grid-content tr.row-removed.k-state-selected {background: #b30000;}#viewLayout-content .k-grid .k-grid-content tr.row-removed .grid-button-delete,.data-module-content .k-grid .k-grid-content tr.row-removed .grid-button-delete {display: none;}#viewLayout-content .k-grid .k-grid-content tr.row-removed .grid-button-undelete,.data-module-content .k-grid .k-grid-content tr.row-removed .grid-button-undelete {display: inline-block;}#viewLayout-content .k-grid .k-grid-content tr.row-added:not(.row-removed):not(.k-state-selected),.data-module-content .k-grid .k-grid-content tr.row-added:not(.row-removed):not(.k-state-selected) {background: #008000;}#viewLayout-content .k-grid .k-grid-content tr.row-added:not(.row-removed).k-state-selected,.data-module-content .k-grid .k-grid-content tr.row-added:not(.row-removed).k-state-selected {background: #003400;}#viewLayout-content .k-grid .k-grid-content tr.row-dirty:not(.row-removed):not(.k-state-selected),.data-module-content .k-grid .k-grid-content tr.row-dirty:not(.row-removed):not(.k-state-selected) {background: #ffff00;}#viewLayout-content .k-grid .k-grid-content tr.row-dirty:not(.row-removed).k-state-selected,.data-module-content .k-grid .k-grid-content tr.row-dirty:not(.row-removed).k-state-selected {background: #b2b300;}#viewLayout-content .k-pager-wrap,.data-module-content .k-pager-wrap {bottom: 0;left: 0;position: absolute;right: 0;}#viewLayout-content #advanced-search-container,.data-module-content #advanced-search-container {padding-bottom: 3px;padding-left: 5px;padding-right: 5px;}#viewLayout-content .jumpto-search input[type=\'text\'],.data-module-content .jumpto-search input[type=\'text\'] {padding-right: 25px;width: 80px;transition: width ease-out 0.2s;}#viewLayout-content .jumpto-search input[type=\'text\']:focus,.data-module-content .jumpto-search input[type=\'text\']:focus {width: 130px;}#viewLayout-content .jumpto-search .submit-jumpto,.data-module-content .jumpto-search .submit-jumpto {margin-left: -23px;margin-top: 6px;position: absolute;}#viewLayout-content .jumpto-search a.btn,.data-module-content .jumpto-search a.btn {float: right;margin-left: -1px;}#viewLayout-content .advanced-search input[type=\'text\'],.data-module-content .advanced-search input[type=\'text\'] {padding-right: 25px;width: 120px;transition: width ease-out 0.2s;}#viewLayout-content .advanced-search input[type=\'text\']:focus,.data-module-content .advanced-search input[type=\'text\']:focus {width: 180px;}#viewLayout-content .advanced-search input[type=\'text\'].search-active,.data-module-content .advanced-search input[type=\'text\'].search-active {background-color: lightyellow;padding-right: 50px;}#viewLayout-content .advanced-search .search-input-close,.data-module-content .advanced-search .search-input-close {z-index: 9999999;background-color: #FF0000;border: 1px solid black;border-radius: 10px 10px 10px 10px;margin-left: -25px;margin-top: 7px;position: absolute;}#viewLayout-content .advanced-search .submit-search,.data-module-content .advanced-search .submit-search {margin-left: -25px;margin-top: 5px;position: absolute;}#viewLayout-content .advanced-search .checkbox,.data-module-content .advanced-search .checkbox {padding-bottom: 3px;padding-top: 0;padding-left: 5px;padding-right: 5px;margin-bottom: 3px;margin-right: 5px;margin-left: -5px;border-top-left-radius: 0;border-bottom-left-radius: 0;height: auto;}#viewLayout-content .advanced-search .checkbox:before,.data-module-content .advanced-search .checkbox:before {content: none;}#viewLayout-content .advanced-search .search-input a.btn,.data-module-content .advanced-search .search-input a.btn {float: right;}#viewLayout-content .advanced-search .search-input a.btn:last-child,.data-module-content .advanced-search .search-input a.btn:last-child {margin-right: 10px;margin-left: -1px;}#viewLayout-content .column-chooser-dropdown,.data-module-content .column-chooser-dropdown {position: absolute;right: 0;}#viewLayout-content .column-chooser-dropdown .btn,.data-module-content .column-chooser-dropdown .btn {padding-left: 5px;padding-right: 5px;}#viewLayout-content .column-chooser-dropdown .dropdown-menu,.data-module-content .column-chooser-dropdown .dropdown-menu {position: inherit;}.ceMenu {z-index: 2;}/* window styles. todo - these styles should be slaves of the core module */.k-window .ribbon {top: 0;height: 85px;position: relative;}.k-window .ribbon.k-content {display: block;padding-bottom: 10px;padding-top: 5px;}.k-window .ribbon + div {top: 135px;}/* General rules for the ViewBar form elements */input[readonly],textarea[readonly] {border: 1px solid transparent;background-color: transparent;}.field-set {float: left;margin-top: 10px;/*clear after last child*/}.field-set header {font-weight: bold;margin-bottom: 2px;margin-left: 2em;display: inline-block;}.field-set:last-child {*zoom: 1;}.field-set:last-child:before,.field-set:last-child:after {display: table;content: \"\";line-height: 0;}.field-set:last-child:after {clear: both;}.field-set:nth-child(2n+1) {/*ensure two columns*/clear: both;}.field-set:first-child {clear: none;}.field-set > div {margin-bottom: 2px;}.field-set label {/*font-size: 13px;*/line-height: 18px;padding-top: 6px;text-align: right;width: 8em;display: inline-block;/*leave some space for the * mark, if any*/margin-right: 0.3em;}.field-set .required-star {color: red;margin-left: -0.2em;margin-right: -0.2em;font-weight: bold;}.field-set input,.field-set .input {display: inline-block;min-width: 180px;}.field-set .input {width: 180px;margin-bottom: -10px;margin-top: 8px;}.field-set .k-autocomplete {min-width: 190px;}.field-set .side-message {transition: margin-top linear 0.2s;margin-left: 8em;display: block;visibility: hidden;position: absolute;margin-top: 0px;max-width: 300px;}.field-set .side-message .k-callout {left: 15px;}.field-set *:focus ~ .side-message {visibility: visible;z-index: 1001;margin-top: 5px;}.field-set *:hover ~ .side-message {visibility: visible;z-index: 2002;margin-top: 5px;}/* viewbar styles */#viewLayout-viewbar .save-buttons,#window-content.data-module .save-buttons {display: table;margin-left: auto;}#viewLayout-viewbar .k-tabstrip,#window-content.data-module .k-tabstrip {background: none;border: medium none;}#viewLayout-viewbar .k-tabstrip .k-tabstrip-items .k-item .k-link,#window-content.data-module .k-tabstrip .k-tabstrip-items .k-item .k-link {padding: 2px 5px;}#viewLayout-viewbar .k-tabstrip .k-tabstrip-items .k-item .k-link img,#window-content.data-module .k-tabstrip .k-tabstrip-items .k-item .k-link img {height: 20px;margin: 0;}#viewLayout-viewbar .k-tabstrip .k-content,#window-content.data-module .k-tabstrip .k-content {border-left: none;border-bottom: none;overflow: visible;*zoom: 1;}#viewLayout-viewbar .k-tabstrip .k-content:before,#window-content.data-module .k-tabstrip .k-content:before,#viewLayout-viewbar .k-tabstrip .k-content:after,#window-content.data-module .k-tabstrip .k-content:after {display: table;content: \"\";line-height: 0;}#viewLayout-viewbar .k-tabstrip .k-content:after,#window-content.data-module .k-tabstrip .k-content:after {clear: both;}#viewLayout-viewbar.viewbar-bottom .save-buttons {margin-bottom: -25px;}#viewLayout-viewbar.viewbar-bottom .k-content {overflow-y: auto;position: absolute;top: 40px;bottom: 5px;right: 0;left: 0;}#main-content .viewbar-right.k-pane {overflow-x: hidden;}/* vertical tabs for the tab control */#viewLayout-viewbar.viewbar-right .k-tabstrip > ul.k-tabstrip-items {margin-bottom: -30px;-webkit-transform-origin: 100% 0;-moz-transform-origin: 100% 0;-o-transform-origin: 100% 0;transform-origin: 100% 0;-moz-transform: rotate(-90deg) translate(-50%, 0%) rotate(180deg) translate(50%, 0%);-ms-transform: rotate(-90deg) translate(-50%, 0%) rotate(180deg) translate(50%, 0%);-o-transform: rotate(-90deg) translate(-50%, 0%) rotate(180deg) translate(50%, 0%);-webkit-transform: rotate(-90deg) translate(-50%, 0%) rotate(180deg) translate(50%, 0%);transform: rotate(-90deg) translate(-50%, 0%) rotate(180deg) translate(50%, 0%);}#viewLayout-viewbar.viewbar-right .k-tabstrip > ul.k-tabstrip-items > li.k-state-default:not(.k-state-active) {border-bottom-width: 1px;}#viewLayout-viewbar.viewbar-right .k-tabstrip > .k-content {border: none;}/* Sidebar styles */#sidebar .remove-dropable {background-color: #999;line-height: 1;background-image: url(images/recycle.png);background-position: left center;background-repeat: no-repeat;padding: 5px 5px 5px 40px;-moz-background-size: 40px auto;-o-background-size: 40px auto;-webkit-background-size: 40px auto;background-size: 40px auto;border: 1px solid;-moz-border-radius: 5px;-webkit-border-radius: 5px;border-radius: 5px;margin: 2px;min-height: 40px;position: relative;z-index: 2;}#sidebar .remove-dropable.can-drop {color: red;}#sidebar .k-treeview {border-top: 1px dashed gray;margin-top: 5px;padding-top: 5px;overflow: hidden;/* disable tree-view selection */}#sidebar .k-treeview .k-icon {margin-top: 5px;}#sidebar .k-treeview .treeview-empty .k-icon {display: none;}#sidebar .k-treeview .k-state-selected {background-image: none;color: #2E2E2E;background-color: transparent;border-color: transparent;}#sidebar .k-treeview .k-state-selected.k-state-focused {background-color: transparent;border-color: transparent;}/*Column Chooser*//*.column-chooser {header {font-size: 120%;font-weight: bold;}.column-chooser-items {margin-top: 5px;margin-bottom: 5px;float: left;}.column-chooser-settings {margin-left: 120px;input {width: 45px;}.k-state-disabled input{background-color: #999999;}}}*/.track-summary .extra-buttons {float: right;}.track-summary .fixed-center-column-table-header {overflow-y: auto;overflow-x: hidden;}.track-summary .fixed-center-column-table-header .fixed-center-column-row {/*margin-right: 17px;*/margin-right: -8px;}.track-summary .fixed-center-column-table-header .fixed-center-column-row .side2 {/*width:40%;*/width: 45%;/*& > div{margin-left: -2px;width: 105%;}*/}.track-summary .fixed-center-column-table {max-height: 60px;overflow-y: scroll;}.track-summary .fixed-center-column-row {cursor: pointer;}.track-summary .fixed-center-column-row .side1 {width: 55%;float: left;}.track-summary .fixed-center-column-row .side1 div {padding-right: 5px;text-align: right;text-overflow: ellipsis;overflow: hidden;white-space: nowrap;}.track-summary .fixed-center-column-row .side1 .center {padding-right: 0px;text-align: center;width: 90px;float: right;position: relative;}.track-summary .fixed-center-column-row .side2 {float: right;width: 45%;}.track-summary .fixed-center-column-row .side2 div {padding-left: 5px;text-overflow: ellipsis;overflow: hidden;white-space: nowrap;}.track-summary #centerColumnTablePatch {margin-top: -1px;position: absolute;right: 15px;padding-left: 20px;}.version-list-wrapper {font-size: 80%;z-index: 1;}.version-list-wrapper .pin-unpin.checkbox {position: absolute;top: 0;z-index: 10;}.version-list-wrapper .version {height: 50px;padding: 10px 10px 0px 10px;display: block;}.version-list-wrapper .version-list-approval {position: absolute;bottom: 0px;padding-top: 2px;padding-bottom: 15px;width: 95%;margin-left: 2.5%;}.version-list-wrapper .version-list-approval .approval-item {margin-top: 5px;}.version-list-wrapper .version-list-approval .approval-item span {font-size: 80%;position: absolute;margin-top: 20px;margin-left: -20px;}.version-list-wrapper .version-list-approval .approval-item .arrow-image {margin-left: 10px;margin-right: 7px;}/* Version pager styles */.fullscreen-mode .version-pager-root,.viewbar-bottom .version-pager-root {position: absolute;top: 0;right: 305px;bottom: 0;left: 0;}.fullscreen-mode .version-list-wrapper,.viewbar-bottom .version-list-wrapper {width: 300px;position: absolute;top: 0;right: 0;bottom: 0;}.fullscreen-mode .version-list-wrapper .version-list,.viewbar-bottom .version-list-wrapper .version-list {bottom: 60px;left: 0;margin-left: -28px;overflow-y: auto;padding-left: 26px;position: absolute;right: 0;top: 0;}.fullscreen-mode .version-list-wrapper .version-list > *.selected-version .version-left-arrow,.viewbar-bottom .version-list-wrapper .version-list > *.selected-version .version-left-arrow {display: inline;}.fullscreen-mode .version-list-wrapper .version .audit-record-label,.viewbar-bottom .version-list-wrapper .version .audit-record-label {position: absolute;z-index: 2;}.fullscreen-mode .version-list-wrapper .version .version-left-arrow,.viewbar-bottom .version-list-wrapper .version .version-left-arrow {-webkit-transform: rotate(-45deg);-moz-transform: rotate(-45deg);-ms-transform: rotate(-45deg);-o-transform: rotate(-45deg);transform: rotate(-45deg);height: 35px;width: 35px;position: absolute;margin-top: -4px;margin-left: -30px;z-index: 1;display: none;}.fullscreen-mode .version-list-wrapper .version .audit-record-info,.viewbar-bottom .version-list-wrapper .version .audit-record-info {float: right;}.fullscreen-mode .version-list-wrapper .version .version-up-arrow-column,.viewbar-bottom .version-list-wrapper .version .version-up-arrow-column {display: none;}.fullscreen-mode .version-list-wrapper .version-list-minimized .version-count,.viewbar-bottom .version-list-wrapper .version-list-minimized .version-count {margin-top: 7px;}.fullscreen-mode .version-list-wrapper .version-list-minimized .version-count img,.viewbar-bottom .version-list-wrapper .version-list-minimized .version-count img {margin-left: 25%;margin-right: 100%;}.fullscreen-mode .version-list-wrapper .version-list-minimized .version-count strong,.viewbar-bottom .version-list-wrapper .version-list-minimized .version-count strong {margin-left: 33%;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode),.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) {/* Version pager styles */}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper {position: absolute;right: 0;left: 0;bottom: 0;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-up-arrow-head,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-up-arrow-head {-webkit-transform: rotate(-45deg);-moz-transform: rotate(-45deg);-ms-transform: rotate(-45deg);-o-transform: rotate(-45deg);transform: rotate(-45deg);height: 35px;width: 35px;position: absolute;margin-top: -17px;z-index: -1;left: 270px;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list {overflow-y: auto;height: 150px;margin-bottom: 60px;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version .version-left-arrow,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version .version-left-arrow {display: none;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version .audit-record-label,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version .audit-record-label {float: left;width: 150px;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version .audit-record-info,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version .audit-record-info {float: left;margin-left: 10px;width: 95px;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list .selected-version ~ .version .version-up-arrow-column,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list .selected-version ~ .version .version-up-arrow-column {display: none;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list > *:not(.selected-version) .version-up-arrow-column,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list > *:not(.selected-version) .version-up-arrow-column {display: inline;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version .version-up-arrow-column,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version .version-up-arrow-column {float: left;margin-top: -12px;height: 55px;margin-left: 10px;width: 20px;display: none;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list-minimized .version-count,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list-minimized .version-count {float: right;margin-top: 10px;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list-minimized .version-count img,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list-minimized .version-count img {margin-right: 25px;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list-minimized .version-count strong,.viewbar-mobile .viewbar-content > div:not(.fullscreen-mode) .version-list-wrapper .version-list-minimized .version-count strong {position: absolute;margin-left: -23px;margin-top: 2px;}.version-list-minimized {display: none;}.approval-item.approval-pending {opacity: 0.5;}.approval-item:last-child .arrow-image {display: none;}.pin-unpin-collapsed .version-list,.pin-unpin-collapsed .version-list-approval {display: none;}.pin-unpin-collapsed .version-list-minimized {display: block;}.minimized-info {white-space: nowrap;display: table;}.viewbar-bottom .pin-unpin-collapsed {/* Version pager styles */}.viewbar-bottom .pin-unpin-collapsed + .version-pager-root {right: 55px;}.viewbar-bottom .pin-unpin-collapsed.version-list-wrapper {width: 50px;}.viewbar-bottom .pin-unpin-collapsed .minimized-info {-webkit-transform: rotate(-90deg);-moz-transform: rotate(-90deg);-ms-transform: rotate(-90deg);-o-transform: rotate(-90deg);transform: rotate(-90deg);-webkit-transform-origin: 18px 15px;-moz-transform-origin: 18px 15px;-o-transform-origin: 18px 15px;transform-origin: 18px 15px;position: absolute;bottom: 0;}.viewbar-right .pin-unpin-collapsed .minimized-info {margin-left: 25px;}.viewbar-right .pin-unpin-collapsed .version-up-arrow-head {display: none;}#viewLayout-content .jarviswidget {position: absolute;bottom: 0;left: 0;right: 0;top: 0;margin-bottom: 0px;}#viewLayout-content .jarviswidget div[role=\"content\"] {width: inherit;position: absolute;bottom: 0;top: 34px;left: 0;right: 0;}#viewLayout-content .jarviswidget .jarviswidget-editbox {display: block;}#viewLayout-viewbar .alert {margin-top: 0px;margin-bottom: 0px;}#viewLayout-viewbar .jarviswidget {margin-bottom: 0px;}#viewLayout-viewbar .jarviswidget > div[role=\"content\"] {position: absolute;bottom: 0;left: 0;right: 0;top: 34px;width: inherit;float: none;overflow-y: auto;}.jarviswidget *:not(.k-pager-nav) {box-sizing: border-box;}.jarviswidget header input[type=\"text\"] {height: 25px !important;line-height: normal;}.fullscreen-mode .jarviswidget > div[role=\"content\"] .tabs .nav {display: none;}.fullscreen-mode .jarviswidget > div[role=\"content\"] .tabs .tab-content {margin-top: -10px;}.viewbar-bottom .jarviswidget > div[role=\"content\"] .tabs .nav,.viewbar-mobile .jarviswidget > div[role=\"content\"] .tabs .nav {display: none;}.viewbar-bottom .jarviswidget > div[role=\"content\"] .tabs .tab-content,.viewbar-mobile .jarviswidget > div[role=\"content\"] .tabs .tab-content {margin-top: -10px;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) {background-color: red;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .jarviswidget header .nav {display: none;}.viewbar-right .viewbar-content > div:not(.fullscreen-mode) .jarviswidget .tabs .nav {margin-top: -10px;-webkit-transform-origin: 100% 0;-moz-transform-origin: 100% 0;-o-transform-origin: 100% 0;transform-origin: 100% 0;-moz-transform: rotate(-90deg) translate(-50%, 0%) rotate(180deg) translate(50%, 0%);-ms-transform: rotate(-90deg) translate(-50%, 0%) rotate(180deg) translate(50%, 0%);-o-transform: rotate(-90deg) translate(-50%, 0%) rotate(180deg) translate(50%, 0%);-webkit-transform: rotate(-90deg) translate(-50%, 0%) rotate(180deg) translate(50%, 0%);transform: rotate(-90deg) translate(-50%, 0%) rotate(180deg) translate(50%, 0%);}#popupLayout .ribbon {position: static;}.nav-fa-issue {margin-right: 4px;}";
    exports.TrackSummary = __underscore("<%/* interpolate the title string with the track length */var titleText = \"\'\" + rc.title.replace(\'{0}\', \"\' + tracks().length + \'\") + \"\'\";%><div class=\"track-summary\" data-bind=\"visible: tracks().length, var: { collapsed: ko.observable(<%= !!rc.collapsed %>) }\"><div class=\"header\"><span data-bind=\"text: <%= titleText %>\"></span><div class=\"extra-buttons\" ><span class=\"up-down\" data-bind=\"checkbox: collapsed\"></span></div></div><div class=\"track-list\" data-bind=\"foreach: tracks, visible: !collapsed() \"><div class=\"track-item\" data-bind=\"html: message, click: navigate\"></div></div></div>");
    exports.ValidationMessage = function() { return "<span class=\"k-tooltip k-tooltip-validation k-invalid-msg\" data-bind=\"visible: field.isModified() && !field.isValid(), attr: { title: field.error }\"><span class=\"k-icon k-warning\"> </span><span data-bind=\"text: field.error\" /><div class=\"k-callout k-callout-n\"></div></span>"; };
    exports.VersionPagerHasPendingColumn = __underscore("<% if (rc.HasPending) { %><img class=\"square20\" src=\"images/version-pending.png\" title=\"Record with pending versions.\"/><% } %>");
    exports.VersionPagerViewBar = __underscore("<div class=\"viewbar-content\" data-bind=\"var: { merged: ko.observable(false) }\"><div class=\"fullscreen-patch\"><div data-bind=\"markVersionPagerRoot: { current: currentEntity }\"><div data-bind=\"messageQueue: messageQueue\"></div><div data-bind=\"diffSummary: {}\"></div><div data-bind=\"validationSummary: {}\"></div><!--widget div --><div class=\"jarviswidget jarviswidget-sortable all-space\" data-bind=\"measurePrev: \'top\'\"><header role=\"heading\"><div class=\"jarviswidget-ctrls\" role=\"menu\"><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Export Word\',  placement: \'bottom\'}, qclick: wordExport, visible: options.wordExportUrl, keyTips: { key : \'VW\' }\"><i class=\"fa fa-file-word-o\"></i></a><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Export Pdf\',  placement: \'bottom\'}, qclick: pdfExport, visible: options.pdfExportUrl, keyTips: { key : \'VP\' }\"><i class=\"fa fa-file-pdf-o\"></i></a><!-- ko if: !trackerManager.currentVersionSelected --><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"checkbox: merged, keyTips: { key : \'VG\' }, tooltip: {title: \'Side by Side\',  placement: \'bottom\'}\"><i class=\"fa fa-code-fork\"></i></a><!-- /ko --><span data-bind=\"with: trackerManager\"><!-- ko if: versionType() === 1 --><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Approve\',  placement: \'bottom\'},qclick: approve, keyTips: { key : \'VA\' }\"><i class=\"fa fa-thumbs-o-up\"></i></a><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Reject\',  placement: \'bottom\'}, qclick: reject,  keyTips: { key : \'VJ\' }\"><i class=\"fa fa-thumbs-o-down\"></i></a><!-- /ko --><!-- ko if: versionType() === 2 --><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Revert\',  placement: \'bottom\'}, qclick: revert,  keyTips: { key : \'VV\' }\"><i class=\"fa fa-undo\"></i></a><!-- /ko --></span><!-- ko if: trackerManager.versionType() === 0 && !isReadOnly() --><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Save\',  placement: \'bottom\'}, qclick: save,  keyTips: { key : \'VS\' }\"><i class=\"fa fa-save\"></i></a><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Save+Close\',  placement: \'bottom\'}, qclick: saveAndClose,  keyTips: { key : \'VX\' }\"><i class=\"fa fa-save\"></i><i class=\"fa fa-times\"></i></a><!-- /ko --><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'FullScreen\',  placement: \'bottom\'}, toogleFullScreen : {  wrapperSelector : \'.fullscreen-patch\', class : \'fa fa-expand | fa fa-compress\'}, keyTips: { key : \'VF\' }\"><i></i></a><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Close\',  placement: \'bottom\'}, qclick: close,  keyTips: { key : \'VC\' }\" style=\"z-index: 999999\"><i class=\"fa fa-times\"></i></a></div><ul class=\"nav nav-tabs pull-left in\" data-bind=\"htmlTunnel : {id : \'versionpager-viewbar-tabs\', end: \'exit\'}\"></ul></header><!-- widget div--><div role=\"content\"><div class=\"all-space\"><div class=\"version-pager-root\"><div data-bind=\"css: { \'merged-view\': merged, \'normal-view\': !merged() }, markForceValidationErrors: forceValidationErrors\"><div id=\"viewbar-region-container\" data-bind=\"markReadOnlyTree: isReadOnly\"><%= rc.renderBody %></div></div></div><div class=\"version-list-wrapper\" data-bind=\"pinunpin: false\"><div class=\"version-up-arrow-head\"> </div><div class=\"version-list\" data-bind=\"with: item\"><!-- ko foreach: Pending() --><a class=\"version pending-version\" data-bind=\"click: function() { $parents[1].trackerManager.selectPending($data) },css: { \'selected-version\': $parents[1].trackerManager.selectedVersion() === $data }\"><div class=\"version-left-arrow\"> </div><div class=\"audit-record-label\"><strong>Audit Record:</strong> Pending</div><div class=\"audit-record-info\"><div data-bind=\"text: ModifiedBy\"></div><div data-bind=\"text: moment(ModifiedDate()).format(\'l\')\"></div></div><div class=\"version-up-arrow-column\"> </div></a><!-- /ko --><a class=\"version\" data-bind=\"click: function() { $parent.trackerManager.selectCurrent(); },css: { \'selected-version\': $parent.trackerManager.selectedVersion() === Current() }\"><div class=\"version-left-arrow\"> </div><div class=\"audit-record-label\"><strong>Audit Record:</strong> Modified</div><div class=\"audit-record-info\"><div data-bind=\"text: Current().ApprovedBy()\"></div><div data-bind=\"text: moment(Current().ApprovedDate()).format(\'l\')\"></div></div><div class=\"version-up-arrow-column\"> </div></a><!-- ko foreach: Historical() --><a class=\"version historical-version\" data-bind=\"click: function() { $parents[1].trackerManager.selectHystorical($data) },css: { \'selected-version\': $parents[1].trackerManager.selectedVersion() === $data }\"><div class=\"version-left-arrow\"> </div><div class=\"audit-record-label\"><strong>Audit Record:</strong><span data-bind=\"text: Audit()\"></span></div><div class=\"audit-record-info\"><div data-bind=\"text: ApprovedBy\"></div><div data-bind=\"text: moment(ApprovedDate()).format(\'l\')\"></div></div></a><!-- /ko --></div><div class=\"version-list-approval\" data-bind=\"with: selectedVersion\"><div><strong>Approval Workflow: </strong><span data-bind=\"text: ApprovalWorkflow()\"></span></div><div data-bind=\"foreach: Approval\"><div class=\"approval-item float-left\" data-bind=\"css: { \'approval-pending\': !ApprovedDate() }\"><img class=\"square20\" src=\"images/user-account.png\" /><span data-bind=\"text: ApprovedBy\"></span><img class=\"arrow-image square20\" src=\"images/version-approval-arrow.png\" /></div></div></div><a class=\"version-list-minimized\" data-bind=\"with: item\"><div class=\"version-count\"><img class=\"square20\" src=\"images/version-pending.png\" /><strong>(<span data-bind=\"text: Pending().length\"></span>)</strong></div><div class=\"version-count\"><img class=\"square20\" src=\"images/version-historical.png\" /><strong>(<span data-bind=\"text: Pending().length\"></span>)</strong></div><div class=\"minimized-info\"><div><strong>Created:</strong>&nbsp;<span data-bind=\"text: CreatedBy()\"></span>&nbsp;<span data-bind=\"text: moment(CreatedDate()).format(\'l\')\"></span></div><div data-bind=\"with: $parent.selectedVersion\"><strong>Last Modified:</strong>&nbsp;<span data-bind=\"text: ModifiedBy\"></span>&nbsp;<span data-bind=\"text: moment(ModifiedDate()).format(\'l\')\"></span></div><div data-bind=\"with: $parent.selectedVersion\"><strong>Final Approval:</strong>&nbsp;<span data-bind=\"text: ApprovedBy\"></span>&nbsp;<span data-bind=\"text: moment(ApprovedDate()).format(\'l\')\"></span></div></div></a><div class=\"pin-unpin checkbox checked\" data-bind=\"checkbox: $jigsawPinUnpinCheckbox\"></div></div></div></div><!-- end widget content --></div><!-- end widget div --></div></div></div>");
    exports.ViewBar = __underscore("<div class=\"viewbar-content\"><div class=\"fullscreen-patch\"><div data-bind=\"markErrorCollection: {}\"><div data-bind=\"messageQueue: messageQueue\"></div><div data-bind=\"validationSummary: {}\"></div><div class=\"jarviswidget jarviswidget-sortable all-space\" data-bind=\"measurePrev: \'top\'\"><header role=\"heading\"><div class=\"jarviswidget-ctrls\" role=\"menu\"><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Export Word\',  placement: \'bottom\'}, qclick: wordExport, visible: options.wordExportUrl, keyTips: { key : \'VW\' }\"><i class=\"fa fa-file-word-o\"></i></a><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Export Pdf\',  placement: \'bottom\'}, qclick: pdfExport, visible: options.pdfExportUrl, keyTips: { key : \'VP\' }\"><i class=\"fa fa-file-pdf-o\"></i></a><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Save\',  placement: \'bottom\'}, qclick: save, visible: !isReadOnly(), keyTips: { key : \'VS\' }\"><i class=\"fa fa-save\"></i></a><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'Save+Close\',  placement: \'bottom\'}, qclick: saveAndClose, visible: !isReadOnly(), keyTips: { key : \'VX\' }\"><i class=\"fa fa-save\"></i><i class=\"fa fa-times\"></i></a><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"tooltip: {title: \'FullScreen\',  placement: \'bottom\'}, toogleFullScreen : { wrapperSelector : \'.fullscreen-patch\', class : \'fa fa-expand | fa fa-compress\'}, keyTips: { key : \'VF\' }\"><i></i></a><a class=\"button-icon\" href=\"javascript:void(0);\" data-bind=\"qclick: close, tooltip: {title: \'Close\',  placement: \'bottom\'}, keyTips: { key : \'VC\' }\"><i class=\"fa fa-times\"></i></a></div><div class=\"widget-toolbar\" role=\"menu\" data-bind=\"visible: isReadOnly\"><a class=\"btn btn-default\" data-bind=\"qclick: showInPopupReadOnly, keyTips: { key : \'VR\' }\">ReadOnly</a></div><div class=\"widget-toolbar\" role=\"menu\" data-bind=\"visible: isReadOnly\"><a class=\"btn btn-default\" data-bind=\"qclick: showInPopup, keyTips: { key : \'VO\' }\">Popup</a></div><ul class=\"nav nav-tabs pull-left in\" data-bind=\"htmlTunnel : {id : \'viewbar-tabs\', end: \'exit\'}\"></ul></header><!-- widget div--><div role=\"content\"><div class=\"all-space\"><!-- widget content --><div data-bind=\"markForceValidationErrors: forceValidationErrors\"><div id=\"viewBar-region-container\" data-bind=\"markReadOnlyTree: isReadOnly\"><%= rc.renderBody %></div></div><!-- end widget content --></div></div><!-- end widget div --></div></div></div></div>");
    exports.ViewBarSummaryTabContent = __underscore("<div><div data-bind=\"markReadOnlyTree: true\"><div data-bind=\"markErrorCollection: {}\"><% _.each(rc.tabs, function(tab) { print(tab.content) }); %></div></div></div>");
    exports.Wizzard = __underscore("<div class=\"wizzard\" data-bind=\"markErrorCollection: { hasAny: hasErrors }\"><div class=\"modal-header\"><h4 class=\"pull-left\"><i class=\"<%= rc.classIdentifier %>\"></i>Add New <%=rc.title%> Wizzard: Step <span class=\"step-number\" data-bind=\"text: Math.min(step() + 1, totalSteps)\"></span>of <span class=\"step-number\" data-bind=\"text: totalSteps\"></span></h4><button class=\"btn btn-primary pull-right\" data-bind=\"click: saveDraft\">Save Draft</button><div class=\"clearfix\"></div></div><div class=\"modal-body\"><div data-bind=\"validationSummary: {}\"></div><div class=\"tab-headers\"><% _.each(rc.tabs, function(tab, i) { %><div class=\"tab-header\" data-bind=\"css: {\'tab-active\': step() === <%=i%>, \'tab-filled\': step() >= <%=i%> },click: function() { navigate(<%=i%>) },with: item\"><%= tab.header %></div><% }); %><div class=\"tab-header\" data-bind=\"css: {\'tab-active\': step() === <%=rc.tabs.length%>, \'tab-filled\': step() >= <%=rc.tabs.length%> },click: function() { navigate(<%=rc.tabs.length%>) }\">Summary</div></div><div class=\"tab-help\"><h2><% _.each(rc.tabs, function(tab, i) { %><span data-bind=\"visible: step() === <%=i%>, with: item\"><%= tab.header %></span><% }); %><span data-bind=\"visible: step() === <%=rc.tabs.length%>\">Summary</span>Help</h2>Lorem ipsum dolor sit amet.</div><div class=\"wizzard-content\"><div class=\"smart-form\"><div class=\"tab-contents clearfix\" data-bind=\"markForceValidationErrors: forceValidation\"><% _.each(rc.tabs, function(tab, i) { %><div class=\"tab-content\" data-bind=\"wizzardTabContent: { item: item, step: step, index: <%= i %>}\"><%= tab.content %></div><% }); %><div class=\"tab-content\" data-bind=\"wizzardTabContent: { item: item, step: step, index: <%= rc.tabs.length %>}\"><div data-bind=\"markReadOnlyTree: true\"><% _.each(rc.tabs, function(tab) { print(tab.content) }); %></div></div></div><div class=\"clearfix\"></div></div></div></div><div class=\"modal-footer\"><div class=\"action-buttons\"><div class=\"btn btn-default\" data-bind=\"click: prevStep, css: {\'k-state-disabled\': !canGoPrev() }\"><i class=\"fa fa-arrow-circle-left\"></i> Previous</div><div class=\"btn btn-default\" data-bind=\"click: nextStep, css: {\'k-state-disabled\': !canGoNext() }\"><i class=\"fa fa-arrow-circle-right\"></i> Next Step</div><div class=\"btn btn-default\" data-bind=\"qclick: saveAndClose, css: { \'k-state-disabled\': !canFinish() }\"><i class=\"fa fa-check\"></i> Finish + Close</div><div class=\"btn btn-default\" data-bind=\"qclick: close\"><i class=\"fa fa-times\"></i> Close</div></div></div></div>");
    exports.wizzardStyles = "/* data - wizzard styles *//* Wizzard styles */.wizzard .modal-header i {margin-right: 5px;}.wizzard .tab-headers {cursor: pointer;width: 180px;float: left;position: absolute;}.wizzard .tab-headers .tab-header img {height: 20px;margin: 0 0 -3px 0;}.wizzard .tab-help {float: left;clear: both;width: 170px;position: absolute;bottom: 0;}.wizzard .tab-help h2 img {display: none;}.wizzard .wizzard-content {margin-left: 180px;height: 300px;overflow-y: auto;}";
    exports.chooser = { 
        ChooserDialog:__underscore("<div><div class=\"modal-header\"><button class=\"close\" type=\"button\" data-bind=\"click: cancel\"> × </button><h4 class=\"modal-title\">Choose Columns</h4></div><div class=\"modal-body\"><div class=\"column-chooser\"><div class=\"row\"><div class=\"col-md-4 smart-form well\"><% _.each(rc.columns, function(column, i) { %><label class=\"checkbox\"><input type=\"checkbox\" data-bind=\"checked: columns[<%=i%>].active\"><i></i><%= column %></label><% }) %></div><div class=\"col-md-8\"><div class=\"smart-form\"><div><label class=\"checkbox\"><input type=\"checkbox\" data-bind=\"checked: includeHeaders\"><i></i>Include title headers</label></div><div><label class=\"checkbox\"><input type=\"checkbox\" data-bind=\"checked: allPages\"><i></i>Export all pages</label></div></div><div data-bind=\"css: {\'k-state-disabled\': allPages }\"><div class=\"form-inline\"><div class=\"form-group\"><label class=\"control-label\">Export Page from</label><input type=\"text\" class=\"form-control\" data-bind=\"value: pageFrom\"></div><div class=\"form-group\"><label class=\"control-label\" >to</label><input type=\"text\" class=\"form-control\" data-bind=\"value: pageTo\" /></div></div></div></div></div><!--<div class=\"column-chooser-items k-block\"></div><div class=\"column-chooser-settings\"></div>--></div></div><div style=\"clear:both\" /><div class=\"modal-footer\"><div class=\"btn btn-primary\" data-bind=\"click: accept\">OK</div><div class=\"btn btn-default\" data-bind=\"click: cancel\">Cancel</div></div></div>"),
        
    };
    exports.comparison = { 
        DiffCollectionTrackSummaryItem:__underscore("<strong><%= rc.field && rc.field + \':\' %></strong> <%= rc.added %> added, <%= rc.modified %> modified, <%= rc.missing %> missing"),
        DiffMessage:__underscore("<!-- as the version are readonly there\'s no need to use data-bind for the field original valueinstead to improve performance it\'s better to generate the template directly. --><span class=\"k-tooltip k-tooltip-validation\"><span class=\"k-icon k-warning\"> </span><span><%= rc.text %></span><div class=\"k-callout k-callout-n\"></div></span>"),
        DiffSummary:function() { return "<div class=\"track-summary\" data-bind=\"visible: tracks().length, var: { collapsed: ko.observable(true) }\"><div class=\"header\">There are <span data-bind=\"text: tracks().length\"></span> differences from Current<div class=\"extra-buttons\"><span class=\"up-down\" data-bind=\"checkbox: collapsed\"></span></div></div><div data-bind=\"visible: !collapsed() \"><div id=\"diffSummaryCenterColumnTable\"><div class=\"fixed-center-column-table-header\"><div class=\"fixed-center-column-row\"><div class=\"side1\"><div class=\"center\">&nbsp;</div><div>Current</div></div><div class=\"side2\"><div id=\"centerColumnTablePatch\"> &nbsp;&nbsp; </div><div><span>Version: </span><span class=\"side2-content\" data-bind=\"text: ($parent.trackerManager.selectedVersion()&& $parent.trackerManager.selectedVersion().ApprovedDate()&& moment($parent.trackerManager.selectedVersion().ApprovedDate()).format(\'L LT\'))|| \'Pending\'\"></span></div></div></div><div class=\"clearfix\"></div></div><div class=\"fixed-center-column-table\" data-bind=\"foreach: tracks\"><div class=\"fixed-center-column-row\" data-bind=\"click: navigate\"><div class=\"side1\"><div class=\"center\" data-bind=\"text: message().field\"></div><div data-bind=\"text: message().original\"></div></div><div class=\"side2\"><div data-bind=\"text: message().value\"></div></div></div><div class=\"clearfix\"> </div></div></div></div></div>"; },
        DiffTrackSummaryItem:__underscore("<strong><%= rc.field %>:</strong> <%= rc.original %>"),
        
    };
    exports.myitems = { 
        myItemsStyles:"/* data - MyItems*//* drag + drop */.can-drop {cursor: copy;}/* My Items */#myitems-content .sidebar-myitem {cursor: pointer;float: left;clear: both;padding-left: 0;}#myitems-content .sidebar-myitem .k-in {display: none;}#myitems-content .sidebar-myitem div {display: inline;}#myitems-content .sidebar-myitem .draft-mark {font-weight: bold;}",
        SidebarMyItems:function() { return "<li data-bind=\"jQueryUIDropTarget: { drop: drop, group: \'data-grid-row\', toParent: \'#sidebar\' }\"><a href=\"javascript:void(0);\"><i class=\"fa fa-lg fa-fw fa-user\"></i><span class=\"menu-item-parent\" data-bind=\"\">My Items</span></a><ul><li><div class=\"remove-dropable\" data-bind=\"jQueryUIDropTarget: { group: \'myitems-remove\', drop: remove }\">Drag item here, to remove from custom list below</div></li><!-- ko foreach: sets --><li><a data-bind=\"expandMenuWhen: collection.items\"><span data-bind=\"view: name\"></span><span data-bind=\"text: collection.items().length\" class=\"badge bg-color-greenLight pull-right\"></span></a><ul><!-- ko foreach: collection.items --><li class=\"sidebar-myitem\" data-bind=\"jQueryUIDraggable: { group: \'myitems-remove\', wrap: true, data: $data, hintTarget: \'.js-draggable-target\' }\"><a href=\"#\" data-bind=\"click: $parent.collection.navigate($data)\"><div class=\"draft-mark\" data-bind=\"if: entityAspect.entityState.isDetached()\">[DRAFT]</div><div class=\"js-draggable-target\" data-bind=\"view: $parent.collection.render($data)\"></div></a></li><!-- /ko --></ul></li><!-- /ko --></ul></li>"; },
        SidebarMyItemsCollapsed:function() { return "<!-- ko foreach: sets--><li class=\"myitems-item\"><a href=\"javascript:void(0)\"><i class=\"fa fa-lg fa-fw fa-user\"></i><span class=\"badge bg-color-greenLight pull-right inbox-badge\" data-bind=\"text: $data.collection && collection.items().length\"></span></a></li><!-- /ko -->"; },
        
    };
    exports.mysearches = { 
        mySearchesStyles:"#mysearches-content {min-height: 50px;}#mysearches-content .saved-search {margin-top: 3px;margin-left: 5px;}#mysearches-content .mysearches-header:before {content: \"\";background-image: url(images/folder-search.gif);background-position: 2px center;background-repeat: no-repeat;padding: 2px 2px 2px 18px;-moz-background-size: 16px auto;-o-background-size: 16px auto;-webkit-background-size: 16px auto;background-size: 16px auto;background-color: transparent;opacity: 0.5;z-index: -1;}.search-name {background-image: url(images/folder-search.gif);background-position: 2px center;background-repeat: no-repeat;padding: 2px 2px 2px 18px;-moz-background-size: 16px auto;-o-background-size: 16px auto;-webkit-background-size: 16px auto;background-size: 16px auto;background-color: transparent;padding-left: 20px;}.search-name .search-group {opacity: 0.7;}",
        SidebarMySearches:function() { return "<li><a href=\"javascript:void(0)\"><i class=\"fa fa-lg fa-fw fa-search\"></i><span class=\"menu-item-parent\" data-bind=\"keyTips: { key : \'SS\' }\">My Searches</span><span data-bind=\"text: storage.items().length\" class=\"badge bg-color-greenLight pull-right\"></span></a><ul data-bind=\"with: storage\" style=\"display: none;\"><li><div class=\"remove-dropable\" data-bind=\"jQueryUIDropTarget: { group: \'mysearches-remove\', drop: remove }\">Drag item here, to remove from custom list below</div></li><!-- ko foreach: items --><li class=\"saved-search\"><a><span class=\"search-name\" data-bind=\"jQueryUIDraggable: { group: \'mysearches-remove\', wrap: true, data: $data }\"><span class=\"search-group\" data-bind=\"text: \'[\' + group + \']\'\"></span><span data-bind=\"text: name\"></span></span><span class=\"btn btn-default btn-xs\" data-bind=\"qclick: function () { return $parent.load($data) }\"><i class=\"fa fa-paper-plane-o \"></i></span><span class=\"btn btn-primary btn-xs\" data-bind=\"qclick: function () { return $parent.loadAndExecute($data) }\"><i class=\"fa fa-paper-plane \"></i></span></a></li><!-- /ko --></ul></li>"; },
        SidebarMySearchesCollapsed:function() { return "<li class=\"myitems-item\"><a href=\"javascript:void(0)\"><i class=\"fa fa-lg fa-fw fa-search\"></i></a></li>"; },
        
    };
    exports.notification = { 
        NotificationContent:function() { return "<div class=\"data-module-content notification-content\"><div id=\"data-titlebar\"><header><span data-bind=\"text: localScope()?\'Local\': \'Global\'\"></span> Notifications</header><div class=\"clearfix\"></div></div><div id=\"grid-container\" data-bind=\"measurePrev: \'top\'\"><div class=\"k-grid k-widget k-secondary k-reorderable\"><div class=\"k-grid-header\" style=\"padding-right: 17px;\"><div class=\"k-grid-header-wrap\"><table tabindex=\"0\"><colgroup><col style=\"width: 60px;\"><col><col style=\"width: 100px;\"><col style=\"width: 150px;\"><col style=\"width: 120px;\"></colgroup><thead><tr><th class=\"k-header\"><span class=\"k-link\">Type</span></th><th class=\"k-header\"><span class=\"k-link\">Message</span></th><th class=\"k-header\"><span class=\"k-link\">Time</span></th><th class=\"k-header\"><span class=\"k-link\">Date</span></th><th class=\"k-header\"><span class=\"k-link\">Author</span></th></tr></thead></table></div></div><div class=\"k-grid-content\"><table tabindex=\"-1\" class=\"k-selectable\"><colgroup><col style=\"width: 60px;\"><col><col style=\"width: 100px;\"><col style=\"width: 150px;\"><col style=\"width: 120px;\"></colgroup><tbody data-bind=\"foreach: items\"><tr><td><img data-bind=\"attr: {src: Level === \'Success\'? \'images/success.png\': Level === \'Error\'? \'images/error-small.png\': \'images/warning.png\' }\" /></td><td data-bind=\"notificationTemplate: $data\"></td><td data-bind=\"text: TimeStamp.toLocaleTimeString()\"></td><td data-bind=\"text: TimeStamp.toDateString()\"></td><td data-bind=\"text: Author || \'anonymous\'\"></td></tr></tbody></table></div></div><div data-bind=\"breezeKendoPager: { dataSource: dataSource }\"></div></div></div>"; },
        styles:"/*data-notification-content*/.notification-content .k-grid-content img {width: 16px;height: 16px;position: relative;left: 50%;margin-left: -8px;}",
        
    };
});



    window || (this.window = this);
    window.CodeEffects || (window.CodeEffects = { typeName: "CodeEffects", getName: function() { return "CodeEffects"; }, __namespace: !0 });
    CodeEffects.register || (CodeEffects.register = function(a) {
        var d = window;
        a = a.split(".");
        for (var e = 0; e < a.length; e++) {
            var j = a[e], h = d[j];
            h || (h = d[j] = { typeName: a.slice(0, e + 1).join("."), __namespace: !0 }, h.getName = function() { return this.typeName; });
            d = h;
        }
    });
    CodeEffects.register("CodeEffects.Rule.Client");
    CodeEffects.register("CodeEffects.Rule.Models");
    CodeEffects.register("CodeEffects.Rule.Menu");
    CodeEffects.register("CodeEffects.Rule.Calendar");
    CodeEffects.register("CodeEffects.Rule.Time");
    CodeEffects.register("CodeEffects.Rule.TextBox");
    var $rule = CodeEffects.Rule;
    $rule.Client.type = { IE: 0, Chrome: 1, Firefox: 2, Opera: 3, Other: 4 };
    $rule.Client.browser = null;
    $rule.Client.version = 0;
    navigator.appName && -1 < navigator.appName.toLowerCase().indexOf("explorer") || -1 < navigator.userAgent.indexOf(" MSIE ") ? ($rule.Client.browser = $rule.Client.type.IE, $rule.Client.version = parseFloat(navigator.userAgent.match(/MSIE (\d+\.\d+)/)[1])) : $rule.Client.browser = -1 < navigator.userAgent.toLowerCase().indexOf(" firefox/") ? $rule.Client.type.Firefox : -1 < navigator.userAgent.toLowerCase().indexOf(" applewebkit/") ? $rule.Client.type.Chrome : navigator.appName && -1 < navigator.appName.toLowerCase().indexOf("opera") ||
        -1 < navigator.userAgent.toLowerCase().indexOf("opera/") ? $rule.Client.type.Opera : $rule.Client.type.Other;
    $rule.defined = function(a) { return null != a && "undefined" != typeof a && "NaN" != String(a); };
    $rule.text = function(a, d) {
        if (!a.tagName) return null;
        if ($rule.defined(d)) $rule.defined(document.getElementsByTagName("BODY")[0].innerText) ? a.innerText = d.toString() : a.textContent = d.toString();
        else return $rule.defined(document.getElementsByTagName("BODY")[0].innerText) ? a.innerText : a.textContent;
    };
    $rule.trim = function(a) { return !$rule.defined(a) || 0 === a.length ? a : a.replace(/^\s+|\s+$/g, ""); };
    $rule.highlight = function(a) { a.style.backgroundColor = "#ffff91"; };
    $rule.dim = function(a) { a.style.backgroundColor = ""; };
    $rule.getScrollBarWidth = function() {
        var a = document.createElement("DIV");
        a.style.width = "100%";
        a.style.height = "200px";
        var d = document.createElement("DIV");
        d.style.position = "absolute";
        d.style.top = d.style.left = "0px";
        d.style.width = "200px";
        d.style.height = "150px";
        $rule.Client.browser == $rule.Client.type.IE ? d.style.visibility = d.style.overflow = "" : d.style.overflow = "hidden";
        d.appendChild(a);
        document.body.appendChild(d);
        var e = a.offsetWidth;
        d.style.overflow = $rule.Client.browser == $rule.Client.type.IE ? "scroll" : "auto";
        a = a.offsetWidth;
        $rule.Client.browser == $rule.Client.type.IE && e == a && (a = d.clientWidth);
        document.body.removeChild(d);
        return e - a;
    };
    $rule.getElementWidth = function(a) { return a.offsetWidth && 0 < a.offsetWidth ? a.offsetWidth : a.style.pixelWidth && 0 < a.style.pixelWidth ? a.style.pixelWidth : a.style.posWidth && 0 < a.style.posWidth ? a.style.posWidth : a.style.width && 0 < a.style.width.length ? parseInt(a.style.width.substr(0, a.style.width.length - 2)) : 0; };
    $rule.getElementHeight = function(a) { return $rule.defined(a.offsetHeight) && 0 < a.offsetHeight ? a.offsetHeight : $rule.defined(a.style.pixelHeight) && 0 < a.style.pixelHeight ? a.style.pixelHeight : $rule.defined(a.style.posHeight) && 0 < a.style.posHeight ? a.style.posHeight : $rule.defined(a.style.height) && 0 < a.style.height.length ? parseInt(a.style.height.substr(0, a.style.height.length - 2), 10) : 50; };
    $rule.getWindowDimensions = function() {
        var a = 0, d = 0;
        self.innerHeight ? (a = window.innerHeight, d = window.innerWidth) : document.documentElement && document.documentElement.clientHeight ? (a = document.documentElement.clientHeight, d = document.documentElement.clientWidth) : document.body && (a = document.body.clientHeight, d = document.body.clientWidth);
        return { height: parseInt(a, 10), width: parseInt(d, 10) };
    };
    $rule.getScrollWidth = function() {
        var a = window.pageXOffset || document.body.scrollLeft || document.documentElement.scrollLeft;
        return a ? a : 0;
    };
    $rule.getScrollHeight = function() {
        var a = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
        return a ? a : 0;
    };
    $rule.position = function(a, d) {
        var e = $rule.getBounds(a), j = $rule.getBounds(d), h = $rule.getWindowDimensions(), q = $rule.getScrollHeight(), k = $rule.getScrollWidth();
        d.style.top = h.height > e.y - q + e.height + j.height ? e.y + e.height + "px" : h.height - j.height + q - 4 + "px";
        d.style.left = h.width > e.x - k + e.width + j.width ? e.x + e.width + 6 + "px" : h.width - j.width + k - 4 + "px";
    };
    $rule.leftAlign = function(a, d) {
        var e = $rule.getBounds(a), j = $rule.getBounds(d), h = $rule.getWindowDimensions(), q = $rule.getScrollWidth();
        d.style.left = h.width > e.x - q + e.width + j.width ? e.x + "px" : h.width - j.width + q - 4 + "px";
    };
    $rule.getType = function(a) {
        if (!$rule.defined(a.constructor)) throw Error("CL1");
        a = String(a.constructor).match(/function\s+(\w+)/);
        return $rule.defined(a) ? a[1] : "undefined";
    };
    $rule.getDocument = function(a) {
        a = a.ownerDocument || a.document || a;
        return a.defaultView || a.parentWindow;
    };
    $rule.getStyle = function(a) {
        if (3 === a.nodeType) return null;
        var d = $rule.getDocument(a);
        a.documentElement && (a = a.documentElement);
        var e = d && a !== d && d.getComputedStyle ? d.getComputedStyle(a, null) : a.currentStyle || a.style;
        if (!e && $rule.Client.browser == $rule.Client.type.Chrome && a.style) {
            var e = a.style.display, j = a.style.position;
            a.style.position = "absolute";
            a.style.display = "block";
            d = d.getComputedStyle(a, null);
            a.style.display = e;
            a.style.position = j;
            var e = {}, h;
            for (h in d) e[h] = d[h];
            e.display = "none";
        }
        return e;
    };
    $rule.getParentById = function(a, d) { return !$rule.defined(a) ? null : a.id && a.id == d ? a : a.parentNode ? $rule.getParentById(a.parentNode, d) : null; };
    $rule.getParentByTagName = function(a, d, e) {
        $rule.defined(e) || (e = 0);
        return 0 < e && a.tagName && a.tagName == d ? a : a.parentNode ? $rule.getParentByTagName(a.parentNode, d, ++e) : null;
    };
    $rule.getChildrenByTagName = function(a, d, e) {
        var j = [], h;
        if (a.childNodes)
            for (var q = 0; q < a.childNodes.length; q++)
                if (h = a.childNodes[q], h.tagName && h.tagName == d && j.push(h), e && h.childNodes && 0 < h.childNodes.length) {
                    h = $rule.getChildrenByTagName(h, d, e);
                    for (var k in h) j.push(h[k]);
                }
        return j;
    };
    $rule.getChildrenByAttribute = function(a, d, e) {
        for (var j = [], h, q, k = 0; k < a.childNodes.length; k++)
            if (h = a.childNodes[k], h.tagName && h.getAttribute && (q = h.getAttribute(d)) && (!$rule.defined(e) || q == e) && j.push(h), 0 < h.childNodes.length) {
                h = $rule.getChildrenByAttribute(h, d, e);
                for (var u in h) j.push(h[u]);
            }
        return j;
    };
    $rule.StringBuilder = function() {
        var a = [];
        this.append = function(d) {
            d = $rule.defined(d) ? $rule.getType(d) != $rule.getType(new String) ? String(d) : d : "";
            0 < d.length && (a[a.length] = d);
        };
        this.dump = function() { return a.join(""); };
    };
    $rule.Point = function(a, d) {
        this.x = a;
        this.y = d;
    };
    switch ($rule.Client.browser) {
    case $rule.Client.type.IE:
        $rule.getPosition = function(a) {
            if (a.self || 9 === a.nodeType) return new $rule.Point(0, 0);
            var d = { bottom: 0, height: 0, left: 0, right: 0, top: 0, width: 0 };
            try {
                d = a.getBoundingClientRect();
            } catch(e) {
            }
            if (!d) return new $rule.Point(0, 0);
            var j = a.ownerDocument.documentElement, h = d.left - 2 + j.scrollLeft, d = d.top - 2 + j.scrollTop;
            try {
                var q = a.ownerDocument.parentWindow.frameElement || null;
                if (q) var k = "0" === q.frameBorder || "no" === q.frameBorder ? 2 : 0, h = h + k, d = d + k;
            } catch(u) {
            }
            return new $rule.Point(h,
                d);
        };
        break;
    case $rule.Client.type.Chrome:
        $rule.getPosition = function(a) {
            if (a.window && a.window === a || 9 === a.nodeType) return new $rule.Point(0, 0);
            for (var d = 0, e = 0, j = null, h, q = a; q; j = h, q = q.offsetParent) {
                h = $rule.getStyle(q);
                var k = q.tagName ? q.tagName.toUpperCase() : null;
                if ((q.offsetLeft || q.offsetTop) && ("BODY" !== k || !j || "absolute" !== j.position)) d += q.offsetLeft, e += q.offsetTop;
            }
            h = (h = $rule.getStyle(a)) ? h.position : null;
            if (!h || "absolute" !== h)
                for (a = a.parentNode; a; a = a.parentNode) {
                    k = a.tagName ? a.tagName.toUpperCase() : null;
                    if ("BODY" !== k && "HTML" !== k && (a.scrollLeft || a.scrollTop)) d -= a.scrollLeft || 0, e -= a.scrollTop || 0;
                    if ((h = (h = $rule.getStyle(a)) ? h.position : null) && "absolute" === h) break;
                }
            return new $rule.Point(d, e);
        };
        break;
    case $rule.Opera:
        $rule.getPosition = function(a) {
            if (a.window && a.window === a || 9 === a.nodeType) return new $rule.Point(0, 0);
            for (var d = 0, e = 0, j = a; j; j = j.offsetParent) var h = j.tagName, d = d + (j.offsetLeft || 0), e = e + (j.offsetTop || 0);
            j = (h = a.style.position) && "static" !== h;
            for (a = a.parentNode; a; a = a.parentNode) {
                h = a.tagName ? a.tagName.toUpperCase() :
                    null;
                if ("BODY" !== h && "HTML" !== h && (a.scrollLeft || a.scrollTop) && j && ("scroll" === a.style.overflow || "auto" === a.style.overflow)) d -= a.scrollLeft || 0, e -= a.scrollTop || 0;
                h = a && a.style ? a.style.position : null;
                j = j || h && "static" !== h;
            }
            return new $rule.Point(d, e);
        };
        break;
    default:
        $rule.getPosition = function(a) {
            if (a.window && a.window === a || 9 === a.nodeType) return new $rule.Point(0, 0);
            for (var d = 0, e = 0, j = null, h = null, q = null, k = a; k; j = k, h = q, k = k.offsetParent) {
                var u = k.tagName ? k.tagName.toUpperCase() : null, q = $rule.getStyle(k);
                if ((k.offsetLeft ||
                    k.offsetTop) && !("BODY" === u && (!h || "absolute" !== h.position))) d += k.offsetLeft, e += k.offsetTop;
                if (null !== j && q && ("TABLE" !== u && ("TD" !== u && "HTML" !== u) && (d += parseInt(q.borderLeftWidth) || 0, e += parseInt(q.borderTopWidth) || 0), "TABLE" === u && ("relative" === q.position || "absolute" === q.position))) d += parseInt(q.marginLeft) || 0, e += parseInt(q.marginTop) || 0;
            }
            q = (q = $rule.getStyle(a)) ? q.position : null;
            if (!q || "absolute" !== q)
                for (a = a.parentNode; a; a = a.parentNode)
                    if (u = a.tagName ? a.tagName.toUpperCase() : null, "BODY" !== u && "HTML" !== u &&
                        (a.scrollLeft || a.scrollTop)) if (d -= a.scrollLeft || 0, e -= a.scrollTop || 0, q = $rule.getStyle(a)) d += parseInt(q.borderLeftWidth) || 0, e += parseInt(q.borderTopWidth) || 0;
            return new $rule.Point(d, e);
        };
    }
    $rule.getBounds = function(a) {
        var d = $rule.getPosition(a);
        return { x: d.x, y: d.y, width: $rule.getElementWidth(a), height: $rule.getElementHeight(a) };
    };
    $rule.Json = function() {
        this.serialize = function(d) {
            var e = new $rule.StringBuilder;
            a(d, e, !1);
            return e.dump();
        };
        this.deserialize = function(a) {
            if (!$rule.defined(a) || 0 == a.length) throw Error("CL2");
            try {
                return eval("(" + a.replace(/\\"/g, '"') + ")");
            } catch(e) {
                throw Error("CL41");
            }
        };
        var a = function(d, e) {
            var j;
            switch (typeof d) {
            case "number":
                isFinite(d) ? e.append(d.toString()) : e.append("null");
                break;
            case "string":
                e.append('"');
                e.append(d);
                e.append('"');
                break;
            case "boolean":
                e.append(d.toString());
                break;
            case "object":
                if ($rule.defined(d))
                    if ($rule.getType(d) ==
                        $rule.getType([])) {
                        e.append("[");
                        for (j = 0; j < d.length; ++j) 0 < j && e.append(","), a(d[j], e);
                        e.append("]");
                    } else {
                        var h = [], q = 0;
                        for (j in d) h[q++] = j;
                        e.append("{");
                        var k = !1;
                        for (j = 0; j < q; j++) {
                            var u = d[h[j]];
                            $rule.defined(u) && "function" !== typeof u && (k ? e.append(",") : k = !0, a(h[j], e), e.append(":"), a(u, e));
                        }
                        e.append("}");
                    }
                else e.append("null");
                break;
            default:
                e.append("null");
            }
        };
    };
    $rule.formatDate = function(a, d) {
        function e(b) { return 10 > b ? "0" + b : b.toString(); }
        function j(b) { return 10 > b ? "00" + b : 100 > b ? "0" + b : b.toString(); }
        if (!d || 0 === d.length || "i" === d) return a.toString();
        d = function(b) {
            $rule.defined(b) || (b = "d");
            if (1 == b.length)
                switch (b) {
                case "F":
                    return "dddd, MMMM dd, yyyy h:mm:ss tt";
                case "s":
                    return "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
                case "Y":
                case "y":
                    return "MMMM, yyyy";
                case "M":
                case "m":
                    return "MMMM dd";
                case "d":
                    return "M/d/yyyy";
                case "D":
                    return "dddd, MMMM dd, yyyy";
                case "t":
                    return "h:mm tt";
                case "T":
                    return "h:mm:ss tt";
                default:
                    throw Error("CL61");
                }
            return b;
        }(d);
        for (var h = new $rule.StringBuilder, q, k = 0, u = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z/g;;) {
            var f = u.lastIndex;
            q = u.exec(d);
            for (var f = d.slice(f, q ? q.index : d.length), n = h, b = 0, v = !1, K = 0, C = f.length; K < C; K++) {
                var N = f.charAt(K);
                switch (N) {
                case "'":
                    v ? n.append("'") : b++;
                    v = !1;
                    break;
                case "\\":
                    v && n.append("\\");
                    v = !v;
                    break;
                default:
                    n.append(N), v = !1;
                }
            }
            k += b;
            if (!q) break;
            if (1 === k % 2) h.append(q[0]);
            else
                switch (q[0]) {
                case "MMMM":
                    h.append($rule.monthNames[a.getMonth()]);
                    break;
                case "MMM":
                    h.append($rule.abbrMonthNames[a.getMonth()]);
                    break;
                case "MM":
                    h.append(e(a.getMonth() + 1));
                    break;
                case "M":
                    h.append(a.getMonth() + 1);
                    break;
                case "dddd":
                    h.append($rule.dayNames[a.getDay()]);
                    break;
                case "ddd":
                    h.append($rule.abbrDayNames[a.getDay()]);
                    break;
                case "dd":
                    h.append(e(a.getDate()));
                    break;
                case "d":
                    h.append(a.getDate());
                    break;
                case "yyyy":
                    h.append(a.getFullYear());
                    break;
                case "yy":
                    h.append(e(a.getFullYear() % 100));
                    break;
                case "y":
                    h.append(a.getFullYear() % 100);
                    break;
                case "hh":
                    q = a.getHours() %
                        12;
                    0 === q && (q = 12);
                    h.append(e(q));
                    break;
                case "h":
                    q = a.getHours() % 12;
                    0 === q && (q = 12);
                    h.append(q);
                    break;
                case "HH":
                    h.append(e(a.getHours()));
                    break;
                case "H":
                    h.append(a.getHours());
                    break;
                case "mm":
                    h.append(e(a.getMinutes()));
                    break;
                case "m":
                    h.append(a.getMinutes());
                    break;
                case "ss":
                    h.append(e(a.getSeconds()));
                    break;
                case "s":
                    h.append(a.getSeconds());
                    break;
                case "tt":
                    h.append(12 > a.getHours() ? "AM" : "PM");
                    break;
                case "t":
                    h.append(12 > a.getHours() ? "A" : "P");
                    break;
                case "f":
                    h.append(j(a.getMilliseconds()).charAt(0));
                    break;
                case "ff":
                    h.append(j(a.getMilliseconds()).substr(0, 2));
                    break;
                case "fff":
                    h.append(j(a.getMilliseconds()));
                    break;
                case "z":
                    q = a.getTimezoneOffset() / 60;
                    h.append((0 >= q ? "+" : "-") + Math.floor(Math.abs(q)));
                    break;
                case "zz":
                    q = a.getTimezoneOffset() / 60;
                    h.append((0 >= q ? "+" : "-") + e(Math.floor(Math.abs(q))));
                    break;
                case "zzz":
                    q = a.getTimezoneOffset() / 60, h.append((0 >= q ? "+" : "-") + e(Math.floor(Math.abs(q))) + ":" + e(Math.abs(a.getTimezoneOffset() % 60)));
                }
        }
        return h.dump();
    };
    Function.addDelegate = function(a, d) { return function() { return d.apply(a, arguments); }; };
    $rule.Event = function(a) {
        a = a || window.event;
        var d = this.type = a.type.toLowerCase();
        this.rawEvent = a;
        "keypress" == d && (this.charCode = a.charCode || a.keyCode);
        a.keyCode ? this.keyCode = 46 == a.keyCode && "keypress" != d ? 127 : a.keyCode : a.charCode ? this.keyCode = a.charCode : "undefined" != typeof a.which && (this.keyCode = a.which);
        this.offsetY = a.pageY ? a.pageY : a.clientY + document.body.scrollTop - document.body.clientTop;
        this.target = a.target ? a.target : a.srcElement;
    };
    $rule.Event.prototype = { preventDefault: function() { this.rawEvent.preventDefault ? this.rawEvent.preventDefault() : window.event && (this.rawEvent.returnValue = !1); }, stopPropagation: function() { this.rawEvent.stopPropagation ? this.rawEvent.stopPropagation() : window.event && (this.rawEvent.cancelBubble = !0); } };
    $rule.addHandler = function (a, d, e) {
        // console.log('new handler', a, d, e);
        a.ceEvents || (a.ceEvents = {});
        var j = a.ceEvents[d];
        j || (a.ceEvents[d] = j = []);
        var h;
        if (a.addEventListener) {
            h = function (d) {
                return e.call(a, new $rule.Event(d));
            }
            a.addEventListener(d, h, !1);
        } else {
            if (a.attachEvent) {
                h = function () {
                    var d = {};
                    try {
                        d = $rule.getDocument(a).event;
                    } catch (h) {

                    }
                    return e.call(a, new $rule.Event(d));
                }

                a.attachEvent("on" + d, h);
            }
        }
        j[j.length] = { handler: e, browserHandler: h };
    };
    $rule.addHandlers = function(a, d, e) {
        for (var j in d) {
            var h = d[j];
            e && (h = Function.addDelegate(e, h));
            $rule.addHandler(a, j, h);
        }
    };
    $rule.Context = {
        controls: [],
        addControl: function(a, d) {
            for (var e in $rule.Context.controls) if ($rule.Context.controls[e].id == a) throw Error("Web Rule control with specified ID already exist in the current context (CL85)");
            $rule.Context.controls.push(new $rule.Context.Item(a, d));
        },
        getControl: function(a) {
            for (var d in $rule.Context.controls) if ($rule.Context.controls[d].id == a) return $rule.Context.controls[d].ref;
            return null;
        }
    };
    $rule.Context.Item = function(a, d) {
        this.id = a;
        this.ref = d;
    };
    var $ce = $rule.Context.getControl;
    $rule.Menu.Item = function() { this.Type = this.Name = this.ID = null; };
    $rule.Menu.Control = function(a) {
        var d = $rule, e, j, h, q, k, u, f, n, b = null, v = !1, K = d.highlight, C = d.dim, N = d.getElementHeight, w = d.defined, A = d.Client.browser == d.Client.type.IE, t = d.Client.browser == d.Client.type.Opera;
        this.init = function(e, a) {
            b = e;
            u = a;
            t ? d.addHandlers(document, { keydown: D, keypress: y }, b) : d.addHandlers(document, { keydown: D }, b);
        };
        this.close = function() {
            qa();
            u && u();
        };
        this.select = function(b) {
            if (e)
                for (var a = 0; a < j.rows.length; a++)
                    if (0 === j.rows[a].cells[0].innerHTML.toLowerCase().lastIndexOf(b.toLowerCase(), 0)) {
                        Y(j.rows[a]);
                        break;
                    }
        };
        this.fill = function(b, t, B, u, T, I) {
            if (w(t) && 0 != t.length) {
                v = !0;
                q = B;
                k = I;
                f = u;
                n = T;
                j = document.createElement("TABLE");
                j.id = "ce106" + b.id;
                e = document.createElement("DIV");
                e.id = "ce107" + b.id;
                e.style.backgroundColor = "#fff";
                w(a) && (e.className = a);
                j.cellSpacing = 0;
                j.cellPadding = 2;
                j.border = 0;
                e.style.position = "absolute";
                e.style.padding = "2px";
                e.style.overflow = "auto";
                e.appendChild(j);
                document.body.appendChild(e);
                h = -1;
                e.style.width = j.style.width = "";
                A || (e.style.height = "");
                for (var D in t)
                    T = t[D], B = j.insertRow(-1), B.id =
                        "ce104" + b.id + D, B.setAttribute("ce101", w(T.ID) ? T.ID : ""), B.setAttribute("ce102", w(T.Type) ? T.Type : ""), B.setAttribute("ce103", D), B.onclick = function(b) {
                            b = b || window.event;
                            b.cancelBubble = !0;
                            q && q(this.getAttribute("ce101"), this.getAttribute("ce102"));
                        }, B.onmouseover = function() {
                            Y(this);
                            k && k(this.getAttribute("ce101"));
                        }, B.onmouseout = function() { C(this); }, u = B.insertCell(-1), u.id = "ce105" + b.id + D, A && 8 < d.Client.version && (B.style.height = "22px", u.style.fontSize = "13px", u.style.fontFamily = "Tahoma,Geneva,Arial,sans-serif"),
                    u.style.cursor = "default", u.style.paddingLeft = u.style.paddingRight = "8px", u.style.whiteSpace = "nowrap", u.innerHTML = T.Name;
                if (0 < j.rows.length) {
                    D = 12 < t.length;
                    B = N(j.rows[0]);
                    if (!w(B) || 0 == B) B = 22;
                    e.style.height = B * (D ? 12 : t.length) + "px";
                    d.position(b, e);
                    b = $rule.getBounds(j);
                    b = D ? d.getScrollBarWidth() + b.width : b.width;
                    e.style.width = b + "px";
                    e.scrollTop = j.rows[0].offsetTop;
                    e.onclick = function(b) {
                        b = b || window.event;
                        b.cancelBubble = !0;
                        return !1;
                    };
                } else qa();
            }
        };
        this.alignLeft = function(b) { w(e) && w(b) && d.leftAlign(b, e); };
        var D =
                function(b) {
                    var a = b.keyCode;
                    if (!v || !w(e) || 0 == j.rows.length) return !0;
                    switch (a) {
                    case 13:
                        w(f) && f();
                        -1 < h ? q && q(j.rows[h].getAttribute("ce101"), j.rows[h].getAttribute("ce102")) : n && n();
                        break;
                    case 32:
                        -1 < h && q && q(j.rows[h].getAttribute("ce101"), j.rows[h].getAttribute("ce102"));
                        break;
                    case 38:
                        -1 == h && (h = 0);
                        if (0 <= h) {
                            var d = j.rows[h].offsetTop - e.scrollTop < j.rows[0].cells[0].clientHeight;
                            h--;
                            0 > h && (h = 0);
                            d && (e.scrollTop = j.rows[h].offsetTop);
                            $();
                        }
                        break;
                    case 40:
                        d = j.rows[0].cells[0].clientHeight, d = e.scrollTop + 11 * d - h * d <
                            d, h++, h > j.rows.length - 1 && (h = j.rows.length - 1), d && (e.scrollTop = j.rows[h - 12 + 1].offsetTop), $();
                    }
                    if (!t && (8 == a || 9 == a || 13 == a || 32 == a || 33 == a || 34 == a || 35 == a || 36 == a || 38 == a || 40 == a)) b.preventDefault && b.preventDefault(), b.stopPropagation && b.stopPropagation();
                }, y = function(b) {
                    if (!v || !w(e) || 0 == j.rows.length) return !0;
                    var a = b.keyCode;
                    (8 == a || 9 == a || 13 == a || 32 == a || 33 == a || 34 == a || 35 == a || 36 == a || 38 == a || 40 == a) && b.preventDefault();
                    return !1;
                }, $ = function() {
                    I();
                    var b = j.rows[h];
                    K(b);
                    k && k(b.getAttribute("ce101"));
                }, Y = function(b) {
                    h = parseInt(b.getAttribute("ce103"),
                        10);
                    I();
                    K(b);
                }, qa = function() {
                    w(e) && w(e.parentNode) && e.parentNode.removeChild(e);
                    v = !1;
                }, I = function() { for (var b = 0; b < j.rows.length; b++) C(j.rows[b]); };
    };
    $rule.Time.Settings = function(a) {
        this.us = -1 < a.indexOf("t");
        this.h = -1 < a.indexOf("h") || -1 < a.indexOf("H");
        this.m = -1 < a.indexOf("m");
        this.s = -1 < a.indexOf("s");
        this.dp = this.h || this.m || this.s;
    };
    $rule.Time.Picker = function(a) {
        var d = $rule, e = null, j, h, q, k, u, f = !1, n, b, v, K = new Date;
        n = K.getHours();
        b = K.getMinutes();
        v = K.getSeconds();
        this.defaultFormat = function() { return e ? e.defaultFormat() : "hh:mm tt"; };
        this.show = function(w, A, t, D, y) {
            k = w;
            q = A;
            u = d.defined(t) ? t : "hh:mm tt";
            f = D;
            d.defined(y) && (n = y.getHours(), b = y.getMinutes(), v = y.getSeconds());
            j = document.createElement("TABLE");
            j.id = "ce110" + k.id;
            j.insertRow(-1).insertCell(-1);
            d.defined(a) && (j.className = a);
            j.cellSpacing = 0;
            j.cellPadding = 2;
            j.style.position = "absolute";
            h = document.createElement("TABLE");
            h.id = "ce111" + k.id;
            h.setAttribute("ce108", "true");
            h.cellSpacing = 0;
            h.cellPadding = 2;
            w = h.insertRow(-1).insertCell(-1);
            w.style.padding = "2px 6px 2px 6px";
            e = new d.Time.Control(w, u, C);
            e.setValue(n, b, v);
            j.rows[0].cells[0].appendChild(h);
            document.body.appendChild(j);
            j.onclick = function(b) {
                b = b || window.event;
                b.cancelBubble = !0;
                return !1;
            };
            N();
        };
        this.hide = function() { d.defined(j) && d.defined(j.parentNode) && j.parentNode.removeChild(j); };
        this.position = function() { N(); };
        this.getId = function() {
            return d.defined(j) ?
                j.id : null;
        };
        var C = function() {
            K = e.getRawValue();
            n = K.getHours();
            b = K.getMinutes();
            v = K.getSeconds();
            d.defined(q) && q(e.getValue(), e.getText());
        }, N = function() { d.defined(k) && (d.position(k, j), f && d.leftAlign(k, j)); };
    };
    $rule.Time.Control = function(a, d, e) {
        function j(b, e, a) {
            if (f.defined(b) && f.defined(b.options) && 0 != b.options.length) {
                for (var d = !1, h = 0; h < b.options.length; h++)
                    if (!a && b.options[h].text == e || a && b.options[h].value == e) {
                        b.selectedIndex = h;
                        d = !0;
                        break;
                    }
                d || (b.selectedIndex = 0);
            }
        }
        function h(b) { return !f.defined(b) || !f.defined(b.options) || -1 == b.selectedIndex ? null : b.options[b.selectedIndex].value; }
        function q(b) { return !f.defined(b) || !f.defined(b.options) || -1 == b.selectedIndex ? null : b.options[b.selectedIndex].text; }
        function k(b,
            e, a) {
            var d = document.createElement("OPTION");
            d.text = e;
            d.value = a;
            f.Client.browser == f.Client.type.IE ? b.options.add(d) : b.appendChild(d);
        }
        function u(b, e, a, f) {
            for (e -= 1; e < a; e++) {
                var d = e + 1;
                k(b, f && 10 > d ? "0" + d : d, d);
            }
        }
        var f = $rule;
        d = f.defined(d) ? d : "hh:mm tt";
        var n = new f.Time.Settings(d), b = function() {
            if (!n.h) return 0;
            if (n.us) {
                var b = parseInt(h(C), 10);
                return "AM" == h(A) ? 12 == b ? 0 : b : 12 == b ? b : b + 12;
            }
            return parseInt(h(C), 10);
        }, v = function(b) {
            var e = document.createElement("SELECT");
            e.id = b;
            e.style.width = "44px";
            a.appendChild(e);
            u(e,
                0, 59, !0);
            return e;
        }, K = function() {
            var b = document.createElement("SPAN");
            b.innerHTML = "<b>:</b>";
            b.style.marginLeft = "2px";
            b.style.marginRight = "2px";
            a.appendChild(b);
        }, C = null, N = null, w = null, A = null;
        n.h && (C = document.createElement("SELECT"), C.id = "ce113" + a.id, C.style.width = "44px", a.appendChild(C), n.us ? (k(C, "12", 12), u(C, 1, 11, !1)) : u(C, 0, 23, !0));
        n.h && n.m && K();
        n.m && (N = v("ce114" + a.id));
        n.s && (K(), w = v("ce115" + a.id));
        n.h && n.us && (A = document.createElement("SELECT"), A.id = "ce116" + a.id, A.style.width = "44px", A.style.marginLeft =
            "4px", a.appendChild(A), k(A, "AM", "AM"), k(A, "PM", "PM"));
        v = document.createElement("INPUT");
        v.id = "ce112" + a.id;
        v.type = "button";
        v.style.marginLeft = "4px";
        v.value = "OK";
        a.appendChild(v);
        v.onclick = function(b) {
            b = b || window.event;
            b.cancelBubble = !0;
            e();
        };
        this.defaultFormat = function() { return "hh:mm tt"; };
        this.getRawValue = function() { return new Date("1/1/2000 " + b() + ":" + (n.m ? q(N) : "00") + ":" + (n.s ? q(w) : "00")); };
        this.getValue = function() { return f.formatDate(this.getRawValue(), "HH:mm:ss"); };
        this.getText = function() {
            var b = (n.h ?
                q(C) : "00") + ":" + (n.m ? q(N) : "00") + ":" + (n.s ? q(w) : "00") + (n.h && n.us ? " " + q(A) : "");
            return f.formatDate(new Date("1/1/2000 " + b), d);
        };
        this.setValue = function(b, e, a) {
            if (!f.defined(b) || !f.defined(e) || !f.defined(a) || 0 == b.length || 0 == e.length || 0 == a.length) n.h && (C.selectedIndex = 0), n.m && (N.selectedIndex = 0), n.s && (w.selectedIndex = 0), n.h && n.us && (A.selectedIndex = 0);
            else {
                if (n.h)
                    if (n.us) {
                        b = parseInt(b, 10);
                        var d = b - 12;
                        13 > b ? (d = 0 == b ? 12 : b, j(A, "AM", !0)) : j(A, "PM", !0);
                        j(C, d, !0);
                    } else 2 > b.length ? j(C, b, !0) : j(C, b, !1);
                n.m && (2 > e.length ?
                    j(N, e, !0) : j(N, e, !1));
                n.s && (2 > a.length ? j(w, a, !0) : j(w, a, !1));
            }
        };
    };
    $rule.TextBox.Settings = function(a, d, e, j, h, q, k, u) {
        this.parent = a;
        this.id = d;
        this.css = e;
        this.defCss = j;
        this.max = h;
        this.defVal = q;
        this.errVal = k;
        this.errColor = u;
    };
    $rule.TextBox.Control = function() {
        var a, d;
        this.init = function(e) {
            d = e;
            a = document.createElement("INPUT");
            a.type = "text";
            a.id = d.id;
            a.className = d.defCss;
            a.maxLength = d.max;
            a.value = d.defVal;
            d.parent.appendChild(a);
            a.onfocus = function() {
                a.className = a.className.replace(" " + d.errColor, "");
                a.className = d.css;
                if (a.value.toLowerCase() == d.defVal.toLowerCase() || a.value.toLowerCase() == d.errVal.toLowerCase()) a.value = "";
            };
            a.onblur = function() {
                var e = $rule.trim(a.value);
                if (0 == e.length || e.toLowerCase() == d.defVal.toLowerCase() ||
                    e.toLowerCase() == d.errVal.toLowerCase()) a.className = a.className.replace(" " + d.errColor, ""), a.value = d.defVal, a.className = d.defCss;
            };
        };
        this.getValue = function() { return a.value; };
        this.setValue = function(e) { a.value = e; };
        this.setClass = function(e) { a.className = e; };
    };
    $rule.Calendar.Css = function() {
        this.container = "ceCal";
        this.header = "ceHeader";
        this.day = "ceDay";
        this.today = "ceToday";
        this.selected = "ceSelected";
        this.dayRollover = "ceRollover";
        this.weekDays = "ceDays";
    };
    $rule.Calendar.Control = function() {
        var a = $rule, d, e, j, h, q = !1, k = new a.Calendar.Css, u, f, n, b, v, K, C, N, w, A, t, D = new Date;
        u = D.getMonth();
        f = D.getFullYear();
        n = D.getHours();
        b = D.getMinutes();
        v = D.getSeconds();
        K = D.getDate();
        C = N = 0;
        this.show = function(I, G, X, B, D) {
            d = I;
            j = G;
            h = a.defined(X) ? X : "MMM dd, yyyy";
            q = B;
            a.defined(D) && (K = D.getDate(), N = f = D.getFullYear(), C = u = D.getMonth(), n = D.getHours(), b = D.getMinutes(), v = D.getSeconds());
            t = document.createElement("TABLE");
            t.id = "ce120" + d.id;
            t.cellSpacing = 0;
            t.cellPadding = 1;
            I = t.insertRow(-1);
            I = I.insertCell(-1);
            a.defined(k.container) && (t.className = k.container);
            t.style.position = "absolute";
            w = document.createElement("TABLE");
            w.id = "ce121" + d.id;
            w.setAttribute("ce118", "true");
            a.defined(k.header) && (w.className = k.header);
            w.cellSpacing = w.cellPadding = 0;
            w.style.width = "100%";
            G = w.insertRow(-1);
            B = G.insertCell(-1);
            B.style.padding = "1px 0px 3px 6px";
            X = Y(B, "ce123" + d.id, "&#171;&#171;");
            X.style.marginRight = "4px";
            X.onclick = function(b) {
                b = b || window.event;
                b.cancelBubble = !0;
                --f;
                y();
            };
            B = Y(B, "ce124" + d.id, "&#171;");
            B.style.marginLeft = "2px";
            B.onclick = function(b) {
                b = b || window.event;
                b.cancelBubble = !0;
                0 == u ? (u = 11, --f) : --u;
                y();
            };
            X.style.cursor = B.style.cursor = "pointer";
            B = G.insertCell(-1);
            B.style.width = "90px";
            B.style.textAlign = "center";
            B.style.padding = "1px 0px 3px 0px";
            X = Y(B, "ce125" + d.id, a.abbrMonthNames[u]);
            B = Y(B, "ce126" + d.id, f);
            X.style.marginRight = "2px";
            B.style.marginLeft = "2px";
            X.style.cursor = B.style.cursor = "default";
            X = G.insertCell(-1);
            X.style.padding = "1px 6px 3px 0px";
            X.style.textAlign = "right";
            G = Y(X, "ce127" + d.id, "&#187;");
            G.style.marginRight = "2px";
            G.onclick = function(b) {
                b = b || window.event;
                b.cancelBubble = !0;
                11 == u ? (u = 0, ++f) : ++u;
                y();
            };
            X = Y(X, "ce128" + d.id, "&#187;&#187;");
            X.style.marginLeft = "4px";
            X.onclick = function(b) {
                b = b || window.event;
                b.cancelBubble = !0;
                ++f;
                y();
            };
            X.style.cursor = G.style.cursor = "pointer";
            I.appendChild(w);
            I = document.createElement("TABLE");
            I.id = "ce148" + d.id;
            I.cellSpacing = 1;
            I.cellPadding = 0;
            I.style.width = "100%";
            for (B = 0; 7 > B; B++) {
                G = I.insertRow(-1);
                for (D = 0; 7 > D; D++)
                    X = G.insertCell(-1), 0 == B && a.defined(k.weekDays) && (X.className =
                        k.weekDays), X.innerHTML = "&nbsp;";
            }
            for (G = 0; G < I.rows[0].cells.length; G++) I.rows[0].cells[G].innerHTML = a.abbrWeekDayNames[G];
            t.rows[0].cells[0].appendChild(I);
            A = I;
            document.body.appendChild(t);
            (new a.Time.Settings(h)).dp && (I = t.insertRow(-1), I = I.insertCell(-1), I.style.padding = "0 4px 6px 4px", I.style.textAlign = "center", e = new a.Time.Control(I, h, $), e.setValue(n, b, v));
            qa();
            y();
        };
        this.hide = function() { a.defined(t) && a.defined(t.parentNode) && t.parentNode.removeChild(t); };
        this.position = function() { qa(); };
        this.defaultFormat =
            function() { return "MMM dd, yyyy"; };
        this.getId = function() { return a.defined(t) ? t.id : null; };
        var y = function() {
            var b = a.getChildrenByTagName(w.rows[0].cells[1], "SPAN", !1);
            b[0].innerHTML = a.abbrMonthNames[u];
            b[1].innerHTML = f;
            var e = new Date, d = new Date(f, u, 1), b = e.getFullYear(), j = e.getMonth(), e = e.getDate(), d = d.getDay(), n, q = 1, v, t = !0;
            n = 1 == u && (0 == f % 4 && 0 != f % 100 || 0 == f % 400) ? 29 : a.days[u];
            for (var D = 1; D < A.rows.length; D++)
                for (var y = 0; y < A.rows[D].cells.length; y++)
                    v = A.rows[D].cells[y],
                        t = !0,
                        1 == D && y >= d || 1 < D && q <= n
                            ? (v.innerHTML = q, b == f && j == u && q == e && a.defined(k.today)
                                ? (v.className = k.today, v.setAttribute("ce117", k.today), t = !1)
                                : f == N && u == C && q == K && a.defined(k.selected)
                                    ? (v.className = k.selected, v.setAttribute("ce117", k.selected), t = !1)
                                    : a.defined(k.day) && (v.className = k.day),

                        t && a.defined(k.day) && v.setAttribute("ce117", k.day),
                        v.onclick = function (b) {
                            var e = (new a.Time.Settings(h)).dp;
                            e || (b = b || window.event, b.cancelBubble = !0);
                            for (var f = 1; f < A.rows.length; f++)
                                for (var d = 0; d < A.rows[f].cells.length; d++)
                                    b = A.rows[f].cells[d], b.getAttribute("ce117") ==
                                        k.today ? b.className = k.today : (b.className = k.day, b.setAttribute("ce117", k.day));
                            K = parseInt(a.text(this), 10);
                            this.className != k.today && a.defined(k.selected) && (this.className = k.selected, this.setAttribute("ce117", k.selected));
                            e || $();
                        }, v.onmouseover = function () { a.defined(k.dayRollover) && (this.className = k.dayRollover); },
                        v.onmouseout = function () {
                            var b = this.getAttribute("ce117");
                            a.defined(b) && (this.className = b);
                        }, q++)
                            : (a.defined(k.day) && (v.className = k.day), v.innerHTML = "&nbsp;", v.onclick = v.onmouseover = v.onmouseout =
                            null);
        }, $ = function() {
            var d = u + 1 + "/" + K + "/" + f;
            D = new Date(d);
            u = D.getMonth();
            f = D.getFullYear();
            K = D.getDate();
            C = u;
            N = f;
            if ((new a.Time.Settings(h)).dp) {
                var k = e.getRawValue();
                n = k.getHours();
                b = k.getMinutes();
                v = k.getSeconds();
                d += " " + n + ":" + b + ":" + v;
            }
            a.defined(j) && j(d);
        }, Y = function(b, e, f) {
            var d = document.createElement("SPAN");
            a.defined(e) && (d.id = e);
            d.innerHTML = f;
            b.appendChild(d);
            return d;
        }, qa = function() { a.defined(d) && (a.position(d, t), q && a.leftAlign(d, t)); };
    };
    $rule.days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    $rule.dayNames = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" ");
    $rule.abbrDayNames = "Sun Mon Tue Wed Thu Fri Sat".split(" ");
    $rule.abbrWeekDayNames = "SMTWTFS".split("");
    $rule.monthNames = "January February March April May June July August September October November December ".split(" ");
    $rule.abbrMonthNames = "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ".split(" ");
    $rule.Settings = function(a) {
        this.help = a.ui[0];
        this.isEval = a.ui[1];
        this.evalIf = a.ui[2];
        this.execIf = a.ui[3];
        this.tools = a.ui[4];
        this.pb = a.ui[5];
        this.tochki = a.ui[6];
        this.clicks = a.ui[7];
        this.titles = a.ui[8];
        this.right = a.ui[9];
        this.tId = a.ui[10];
        this.tUrl = a.ui[11];
        this.els = a.s;
        this.clientFlds = [];
        this.ruleCss = "ceRule";
        this.menuCss = "ceMenu";
        this.toolCss = "ceToolBar";
        this.deleteCss = "ceDeleteButton";
        this.saveButCss = "ceSaveButton";
        this.rulesCss = "ceRulesButton";
        this.descCss = "ceDescriptionBox";
        this.nameCss = "ceNameBox";
        this.descDefCss = "ceDescriptionBoxDefault";
        this.nameDefCss = "ceNameBoxDefault";
        this.helpCss = "ceHelp";
        this.timeCss = "ceTime";
        this.flowCss = "ceFlow";
        this.fieldCss = "ceField";
        this.clauseCss = "ceClause";
        this.operCss = "ceOperator";
        this.skobkiCss = "ceParenthesis";
        this.actionCss = "ceAction";
        this.valueCss = this.calcCss = this.paramCss = "ceValue";
        this.tabCss = "ceTab";
        this.lineCss = "ceNewLine";
        this.currentBg = "ceCurrent";
        this.invalidColor = "ceError";
        this.highlightBg = "ceHighlight";
        this.warn = "ceWarn";
        this.emptyColor = "ceEmpty";
        this.cursorOuter = "ceCursorOuter";
        this.cursorInner = "ceCursorInner";
    };
    $rule.Control = function(a) {
        var d = $rule, elementType, functionType, operatorType, inputType, calculationType, valueInputType, f = null, n, b = null, v = null, K = [], C = [], N = [], w, A = null,
            t = null, D = null, y, $, Y, qa, I, G = !0, X = !0, B = null, Hb = null, T, ia, ua = null, Ia = 0,
            ic = !1, Ib = !1, da = null, Ja = !1, P = !1, fa = !1, L = !1, ib = 0, Za = 0, ka = 0, Jb = 0, Kb = 0,
            R = this, g = d.defined, Pa = new d.Json, pa, Ka, ya, jb, Lb = d.getChildrenByAttribute,
            S = "ce206", H = "ce208", mb = "C", Ea = "230rvb39ytkuFr", E = "", nb, kb, lb, Mb = !1,
            Nb = !1, Qa = null, Ob = null, Pb = null, Qb = null, $a = !1, targetElement = null, La = null, jc = null,
            elementId = a[0], Rb = a[1], kc = a[2], pb = a[3];
        
        R.loadSettings = function(c) {
            nb =
                c && c.d || c;
            loadSettingsInternal();
            return R;
        };
        R.loadRule = function(c) {
            lb = c && c.d || c;
            if (g(lb)) return Sb(), R;
        };
        R.loadInvalids = function(c) {
            kb = c && c.d || c;
            if (g(kb)) return Tb(), R;
        };
        R.setClientActions = function(c, b, e) {
            Ob = e;
            Pb = b;
            Qb = c;
            return R;
        };
        R.getRuleId = function() { return da; };
        R.isEvaluationType = function() { return f ? f.isEval : !0; };
        R.saved = function(c) {
            function b(c, p) { return c.Name.localeCompare(p.Name); }
            function e(c, b) { return c.n.localeCompare(b.n); }
            if (!$a) return R;
            !g(da) && g(c) && (da = c);
            g(da) && da != c && mc();
            c = [];
            var a, m = !1;
            if (f.tools) {
                for (var h in N)
                    a =
                        N[h], "ceEval" == a.ID || "ceExec" == a.ID || (a.ID == da && (a.Name = Ma(Y.getValue()), m = !0), c.push({ ID: a.ID, Name: a.Name }));
                m || (a = new d.Menu.Item, a.ID = da, a.Name = Ma(Y.getValue()), c.push(a));
                c.sort(b);
                f.els.rls = c;
                nc();
            }
            if (f.isEval) {
                var m = !1, j;
                for (j in f.els.fds)
                    if (a = f.els.fds[j], a.ir && a.v == da) {
                        a.n = Ma(Y.getValue());
                        m = !0;
                        break;
                    }
                m || (a = { n: Ma(Y.getValue()), v: da, o: 4, t: 1, ai: 2, ir: !0, l: !1 }, f.els.fds.push(a));
                f.els.fds.sort(e);
            }
            return R;
        };
        R.deleted = function(c) {
            var b = [], e, a;
            for (a in N) e = N[a], e.ID != c && b.push(e);
            N = b;
            if (f.isEval) {
                var b =
                        [], g;
                for (g in f.els.fds) e = f.els.fds[g], e.v != c && b.push(e);
                f.els.fds = b;
            }
            return R;
        };
        R.extract = function() {
            Qa = "ceExtract";
            Ja = !1;
            return Pa.serialize(qb());
        };
        R.clear = function() {
            oc();
            pc();
            Ra();
            return R;
        };
        R.dispose = function() {
            disposeInternal();
            return R;
        };
        R.redraw = function() {
            qc();
            rc();
            return R;
        };
        R.init = function(c) {
            nb = c;
            d.addHandlers(window, { load: loadSettingsInternal }, R);
        };
        R.load = function(c) { g(c) && (lb = c, d.addHandlers(window, { load: Sb }, R)); };
        R.invalid = function(c) { g(c) && (kb = c, d.addHandlers(window, { load: Tb }, R)); };
        R.valid = function() {
            Ub();
            bb();
        };
        R.post = function() { Vb(); };
        var loadSettingsInternal = function() {
            f = new $rule.Settings(Pa.deserialize(nb));
            nb = null;
            f.els.ens && 0 < f.els.ens.length && sc(f.els.ens, !0);
            f.els.mds && 0 < f.els.mds.length && sc(f.els.mds, !1);
            elementType = d.Client.ElementType;
            functionType = d.Client.FunctionType;
            operatorType = d.Models.OperatorType;
            inputType = d.Client.InputType;
            calculationType = d.Client.CalculationType;
            valueInputType = d.Common.ValueInputType;
            Ka = d.text;
            pa = $rule.getBounds;
            ya = d.Client.browser == d.Client.type.IE;
            jb = d.Client.browser == d.Client.type.Opera;
            Kb = 0;
            targetElement = document.getElementById(elementId);
            pb ? jc = document.getElementById(pb) :
                $a = !0;
            if ($a && g(f.tId) && g(f.tUrl)) {
                var c = Lb(document, f.tId);
                0 < c.length && (c[0].href = f.tUrl);
            }
            f.els.ms = f.help && g(d.Help) ? d.Help : {};
            f.els.er = d.Errors;
            !kc && !$a && (La = d.getParentByTagName(targetElement, "FORM"), g(La) && d.addHandlers(La, { submit: Vb }, this));
            f.tools ? (nc(), tc(!1), f.help ? uc(targetElement, !0) : vc()) : f.help ? tc(!0) : (y = document.getElementById("ceT" + targetElement.id), g(y) && y.parentNode.removeChild(y), y = null);
            var c = "_" + elementId, b = document.getElementById(c);
            g(b) || (b = document.createElement("DIV"), b.id = c);
            b.className = aa(f.ruleCss);
            targetElement.appendChild(b);
            targetElement = b;
            wc();
            n = 2;
            w = E;
            qc();
            if (!ic) {
                pc();
                c = Lb(document.body, "ce002");
                if (g(c) && 0 < c.length) {
                    if (Wb)
                        try {
                            t = c[0], t.id = Ia + E, Ia++;
                        } catch(a) {
                        }
                    for (b = 0; b < c.length; b++) c[b].style.display = "none";
                }
                if (Wb) {
                    xc();
                    try {
                        Hb = window.setInterval(xc, 400);
                    } catch(l) {
                        throw Error("CL92");
                    }
                }
                ua = new d.Menu.Control(f.menuCss);
                T = new d.Calendar.Control;
                ia = new d.Time.Picker(f.timeCss);
                d.addHandlers(document, { click: Uc }, this);
                d.addHandlers(document, { keydown: Vc, keypress: Wc, keyup: Xc }, this);
                ua.init(this, f.help ? bb : null);
                d.addHandlers(window, { resize: rc },
                    this);
                ic = !0;
            }
            Nb && Sb();
            Mb && Tb();
            Mb = Nb = !1;
        }, Sb = function() {
            if (g(f)) {
                var c = Pa.deserialize(lb);
                if (0 != c.length) {
                    da = c[0].g;
                    f.isEval = c[0].v;
                    if (f.tools) {
                        g(da) && mc();
                        var p = c[0].n, a = c[0].d;
                        g(p) && 0 < p.length ? (Y.setValue(Fa(p)), Y.setClass(aa(f.nameCss))) : (Y.setValue(Fa(f.els.lbl.n)), Y.setClass(aa(f.nameDefCss)));
                        g(a) && 0 < a.length ? (qa.setValue(Fa(a)), qa.setClass(aa(f.descCss))) : (qa.setValue(Fa(f.els.lbl.d)), qa.setClass(aa(f.descDefCss)));
                    }
                    Ia = c.length + 1;
                    yc();
                    for (var l, m, ab = null, s = null, ea = 0, w = 0, r = !1, u = null, t = 1; t < c.length; t++) {
                        p =
                            c[t];
                        if (!g(p)) break;
                        r = !1;
                        if (p.t == elementType.NewLine) Sa(!1, !0);
                        else if (p.t == elementType.Tab) O(p.t, null, E, "&nbsp;", null, null, null, null, !0);
                        else {
                            a = g(p.n) ? p.n : null;
                            switch (p.t) {
                            case elementType.Flow:
                                m = z(f.els.fls, p.v);
                                if (!g(m)) throw Error("CL10");
                                switch (p.v) {
                                case "if":
                                    l = f.isEval ? f.evalIf : f.execIf;
                                    break;
                                default:
                                    l = m.n;
                                }
                                break;
                            case elementType.LeftParenthesis:
                                l = "(";
                                break;
                            case elementType.RightParenthesis:
                                l = ")";
                                break;
                            case elementType.LeftBracket:
                                l = "{";
                                break;
                            case elementType.RightBracket:
                                l = "}";
                                break;
                            case elementType.Action:
                            case elementType.Function:
                                switch (p.f) {
                                case functionType.Name:
                                    w = 0;
                                    if (p.d)
                                        ea = 0, l = p.v, r =
                                            !0;
                                    else {
                                        m = z(p.t == elementType.Function ? f.els.fds : f.els.acs, p.v);
                                        if (!g(m)) throw Error("CL11");
                                        l = 0 < m.ps.length ? m.n + "&nbsp;(" : m.n;
                                        ea = m.ps.length;
                                        p.t == elementType.Function && (m.rt.o == operatorType.Enum ? v = eval(Ta(m.rt.e)) : m.rt.o == operatorType.Numeric && g(m.rt.mds) ? v = cb(m.rt.mds) : m.rt.o == operatorType.Date ? ab = m.rt.f : m.rt.o == operatorType.Time && (s = m.rt.f));
                                    }
                                    break;
                                case functionType.Param:
                                    if (p.i == inputType.Field) m = z(f.els.fds, p.v), g(m) ? l = m.n : (l = p.v, r = !0);
                                    else if (p.o == operatorType.String) l = '"' + p.v + '"';
                                    else if (p.o == operatorType.Numeric)
                                        m = ba(b), m.ps.length >= w && g(m.ps[w].mds) ? (l = cb(m.ps[w].mds), g(l) && 0 < l.length ? (p.i = inputType.Field,
                                        l = z(l, p.v), g(l) ? l = l.Name : (l = p.v, r = !0)) : (r = !0, l = p.v)) : l = "[" + p.v + "]";
                                    else if (p.o == operatorType.Date) l = d.formatDate(new Date(p.v), g(p.r) ? p.r : T.defaultFormat());
                                    else if (p.o == operatorType.Time) l = d.formatDate(new Date("1/1/2010 " + p.v), g(p.r) ? p.r : ia.defaultFormat());
                                    else if (p.o == operatorType.Enum) l = z(eval(Ta(p.e)), p.v).Name;
                                    else if (p.o == operatorType.Bool) l = sb(p.v);
                                    else throw Error("CL22");
                                    w++;
                                    break;
                                case functionType.Comma:
                                    l = ",";
                                    break;
                                case functionType.End:
                                    l = 0 < ea ? ")" : "&nbsp;";
                                    ea = w = 0;
                                    break;
                                default:
                                    throw Error("CL36");
                                }
                                break;
                            case elementType.Calculation:
                                switch (p.c) {
                                case calculationType.Field:
                                    m =
                                        z(f.els.fds, p.v);
                                    g(m) ? l = m.n : (l = p.v, r = !0);
                                    break;
                                case calculationType.Number:
                                    l = "[" + p.v + "]";
                                    break;
                                case calculationType.LeftParenthesis:
                                    l = "(";
                                    break;
                                case calculationType.RightParenthesis:
                                    l = ")";
                                    break;
                                case calculationType.Multiplication:
                                    l = "&#215;";
                                    break;
                                case calculationType.Division:
                                    l = "&#247;";
                                    break;
                                case calculationType.Addition:
                                    l = "+";
                                    break;
                                case calculationType.Subtraction:
                                    l = "&#150;";
                                    break;
                                default:
                                    throw Error("CL90");
                                }
                                break;
                            case elementType.Field:
                                p.d ? (l = p.v, v = ab = s = null, r = !0) : (m = z(f.els.fds, p.v), g(m) ? (v = p.o == operatorType.Enum ? g(p.e) ? eval(Ta(p.e)) : m.ens : p.o == operatorType.Numeric && g(m.mds) ? cb(m.mds) : null, ab = p.o == operatorType.Date && g(m.f) ? m.f : null,
                                s = p.o == operatorType.Time && g(m.f) ? m.f : null, l = m.n) : (l = p.v, v = ab = s = null));
                                break;
                            case elementType.Clause:
                                l = z(f.els.cls, p.v).n;
                                break;
                            case elementType.Operator:
                                l = zc(p.v, p.o);
                                g(l) ? l = l.n : (l = "is", r = !0);
                                break;
                            case elementType.Value:
                                p.o == operatorType.Enum ? !g(v) || 0 == v.length ? (l = "[Unknown]", r = !0) : (m = z(v, p.v), g(m) ? l = m.Name : (m = z(f.els.fds, p.v), g(m) ? l = m.n : (l = p.v, r = !0))) : p.i == inputType.Field ? (m = z(f.els.fds, p.v), g(m) ? l = m.n : (l = p.v, r = !0)) : p.o == operatorType.String ? l = '"' + p.v + '"' : p.o == operatorType.Numeric ? g(v) && 0 < v.length ? (p.i = inputType.Field, l = z(v, p.v), g(l) ? l = l.Name : (l = p.v, r = !0)) : l = "[" + p.v + "]" : l = p.o == operatorType.Date ?
                                    d.formatDate(new Date(p.v), g(ab) ? ab : T.defaultFormat()) : p.o == operatorType.Time ? d.formatDate(new Date("1/1/2010 " + p.v), g(s) ? s : ia.defaultFormat()) : sb(p.v);
                            }
                            O(p.t, a, Fa(p.v), Fa(l), p.o, p.c, p.f, p.i, !0);
                            va(p.t, p.o, p.c, p.i) && la();
                            r && (b.className = b.className + " " + aa(f.warn), u = f.els.er.e107);
                        }
                    }
                    v = lb = null;
                    n = 0;
                    disposeInternal();
                    g(u) && alert(u);
                }
            } else Nb = !0;
        }, Tb = function() {
            if (g(f)) {
                var c = Pa.deserialize(kb);
                if (0 != c.length) {
                    c[0].e && g(Y) && (Y.setValue(f.els.er.e104), Y.setClass(aa(f.nameCss) + " " + aa(f.invalidColor)));
                    for (var b = 1; b < c.length; b++) {
                        var e =
                                c[b], a = document.getElementById(e.c || e.ClientID);
                        g(a) && (a.className = a.className + " " + f.highlightBg, a.title = e.h || e.Hint, K.push(a.id));
                    }
                    f.help && (1 < c.length ? (db(f.els.er.e102), $.className = $.className + " " + aa(f.invalidColor)) : c[0].e && (db(f.els.er.e103), $.className = $.className + " " + aa(f.invalidColor)));
                    kb = null;
                }
            } else Mb = !0;
        }, Vb = function() { $a || (Ja = !1, jc.value = Pa.serialize(qb())); }, qb = function() {
            var c = za(), b, a, l, m = !1, k = new d.Models.RuleModel;
            k.Elements = [];
            g(da) && (k.Id = da);
            k.IsLoadedRuleOfEvalType = f.isEval;
            k.Command =
                Qa;
            if (!Ja) {
                f.tools ? (b = Y.getValue(), k.Name = 0 == d.trim(b).length || d.trim(b).toLowerCase() == f.els.lbl.n.toLowerCase() || d.trim(b).toLowerCase() == f.els.er.e104.toLowerCase() ? null : Ma(b), b = qa.getValue(), k.Desc = 0 == d.trim(b).length || d.trim(b).toLowerCase() == f.els.lbl.d.toLowerCase() || d.trim(b).toLowerCase() == f.els.er.e104.toLowerCase() ? null : Ma(b), k.SkipNameValidation = !1) : k.SkipNameValidation = !0;
                for (var n in c)
                    if (a = c[n], l = r(a), g(l) && l != elementType.HtmlTag) {
                        b = new d.Client.Element;
                        b.Type = l;
                        b.Name = a.id;
                        b.Oper = ca(a);
                        b.FuncType =
                            M(a);
                        b.InpType = ga(a);
                        switch (l) {
                        case elementType.Field:
                            b.Value = a.getAttribute(H);
                            b.IsRule = "true" == a.getAttribute("ce213");
                            a = z(f.els.fds, b.Value);
                            m = g(a) && g(a.mds);
                            switch (b.Oper) {
                            case operatorType.String:
                                a = z(f.els.fds, b.Value);
                                g(a) && (b.Max = a.max);
                                break;
                            case operatorType.Numeric:
                                a = z(f.els.fds, b.Value);
                                g(a) && (b.Dec = a.dec, b.Cal = a.cal, b.Min = a.min, b.Max = a.max, g(a.mds) && (b.InpType = inputType.Input, m = !0));
                                break;
                            case operatorType.Date:
                            case operatorType.Time:
                                a = z(f.els.fds, b.Value);
                                g(a) && (b.Format = a.f);
                                break;
                            case operatorType.Enum:
                                a = z(f.els.fds, b.Value), g(a) && (b.En = a.e);
                            }
                            break;
                        case elementType.Value:
                            b.Value =
                                Ma(a.getAttribute(S));
                            b.Oper == operatorType.Numeric && m && (a = z(f.els.fds, b.Value), g(a) || (b.InpType = inputType.Input));
                            m = !1;
                            break;
                        case elementType.Calculation:
                            b.CalType = V(a);
                            g(a.getAttribute(S)) && (b.Value = a.getAttribute(S));
                            break;
                        case elementType.Action:
                        case elementType.Function:
                            if (l == elementType.Function && b.FuncType == functionType.Name) b.Value = a.getAttribute(H), a = z(f.els.fds, b.Value), m = g(a) && g(a.rt.mds);
                            else if (b.FuncType == functionType.Param) {
                                var ea = a;
                                l = b.Oper;
                                var s = ba(ea), v = null;
                                g(s) && (ea = Ua(ea), v = 0 <= ea && s.ps.length >= ea && s.ps[ea].o == l ? s.ps[ea] : Ac(s, l, 0 > ea ? 0 : ea));
                                l = v;
                                if (b.InpType ==
                                    inputType.Input) {
                                    if (g(l))
                                        switch (b.Oper) {
                                        case operatorType.String:
                                            b.Max = l.max;
                                            break;
                                        case operatorType.Numeric:
                                            b.Dec = l.dec;
                                            b.Min = l.min;
                                            b.Max = l.max;
                                            break;
                                        case operatorType.Date:
                                        case operatorType.Time:
                                            b.Format = l.f;
                                            break;
                                        case operatorType.Enum:
                                            b.En = l.e;
                                        }
                                    g(a.getAttribute(S)) && (b.Value = Ma(a.getAttribute(S)));
                                } else b.Value = a.getAttribute(H), a = z(f.els.fds, b.Value), g(l) && (l.o == operatorType.Numeric && g(l.mds) && !g(a)) && (b.InpType = inputType.Input);
                            } else b.Value = a.getAttribute(H);
                            break;
                        default:
                            b.Value = a.getAttribute(H);
                        }
                        k.Elements.push(b);
                    }
            }
            return k;
        }, disposeInternal = function() {
            Ra();
            6 == n ? (ua.close(), n = 1) : 3 == n ?
                (T.hide(), n = 1) : 4 == n ? (ia.hide(), n = 1) : 0 == n && (n = 1, g(b) && g(b.getAttribute("ce207")) && la());
            Bc() || Cc();
            2 != n && f.help && db(f.els.ms.i102);
            Ub();
            w = E;
            if (g(b) && (b.className = b.className.replace(" " + f.currentBg, ""), ma(b))) {
                var c = tb(b, functionType.Name);
                g(c) && (c.className = c.className.replace(" " + f.currentBg, ""));
            }
        }, ub = function(c, p) {
            var a = z(c == elementType.Action ? f.els.acs : f.els.fds, p);
            O(a.t, null, a.v, 0 < a.ps.length ? a.n + "&nbsp;(" : a.n, a.t == elementType.Action ? null : a.rt.o, calculationType.None, functionType.Name, inputType.None);
            var l = b;
            O(a.t, null, a.v, 0 < a.ps.length ? ")" : "&nbsp;", a.t == elementType.Action ?
                null : a.rt.o, calculationType.None, functionType.End, inputType.None);
            0 < a.ps.length ? (b = x(l), Z() && Da(a)) : Z() && eb(a);
        }, Da = function(c) {
            var p = Ua(b);
            if (p >= c.ps.length - 1 && !L) {
                var a = Xb(b, functionType.End);
                g(a) && (b = x(a), eb(c));
            } else {
                p += 1;
                L && (p -= 1);
                c = c.ps[p];
                var l = [], d;
                v = null;
                switch (c.ai) {
                case valueInputType.All:
                case valueInputType.Fields:
                    a: {
                        var k = c.o, n = p, p = [], q = wa(b);
                        if (g(q)) {
                            d = z(f.els.fds, q.getAttribute(H));
                            g(d) || (d = z(f.els.acs, q.getAttribute(H)));
                            if (!g(d)) {
                                d = p;
                                break a;
                            }
                            d = d.ps[n];
                        }
                        if (g(d))
                            for (var r in f.els.fds)
                                if (n = f.els.fds[r], n.t == elementType.Field && !n.ir && n.o == k) {
                                    if (d.o == operatorType.Numeric) {
                                        if (d.l !=
                                            n.l || n.min < d.min || n.max > d.max || n.dec != d.dec || n.mds != d.mds) continue;
                                    } else if (d.o == operatorType.Enum) {
                                        if (d.e != n.e || d.l != n.l) continue;
                                    } else if (d.l != n.l) continue;
                                    p.push(n);
                                }
                        d = p;
                    }
                    if (0 < d.length) {
                        c.ai == valueInputType.All && J(Ea, g(c.mds) ? c.mds : c.o, Va(c.o, g(c.mds)), l);
                        for (a in d) J(d[a].v, c.o, d[a].n, l);
                        0 < w.length ? ha(l, b, Wa, null) : s(l, b, Wa, null);
                    } else g(c.mds) ? Yb(c.mds) : Wa(Ea, c.o);
                    break;
                case valueInputType.User:
                    g(c.mds) ? Yb(c.mds) : Wa(Ea, c.o);
                    break;
                default:
                    throw Error("CL58");
                }
            }
        }, Yb = function(c) {
            v = cb(c);
            var p = [];
            if (null != v && 0 < v.length) {
                for (var a in v)
                    J(v[a].ID,
                        c, v[a].Name, p);
                0 < w.length ? ha(p, b, Wa, null) : s(p, b, Wa, null);
            } else Wa(Ea, operatorType.Numeric);
        }, Wa = function(c, p) {
            function a(c, p) {
                var e;
                L ? (e = b, L = !1) : e = M(b) == functionType.Name ? b : b.nextSibling;
                e = Xa(e, p);
                g(e) ? ja(e) : Zb(c);
            }
            function e(c) {
                var p = null, a = c ? operatorType.Date : operatorType.Time;
                c = c ? "" : "1/1/2000 ";
                try {
                    var d = b;
                    if (M(d) != functionType.Param || ca(d) != a) d = Xa(d, a);
                    g(d) && (p = new Date(c + d.getAttribute(S)));
                    isNaN(p.getDate()) && (p = null);
                    return p;
                } catch(l) {
                    return null;
                }
            }
            var d = ba(b);
            if (c == Ea) {
                var r = Dc(p);
                if (g(r)) P = L, Yb(r.Name);
                else
                    switch (parseInt(p, 10)) {
                    case operatorType.Numeric:
                        P =
                            !1;
                        if (vb(Xa(g(b.nextSibling) ? b.nextSibling : b, operatorType.Numeric))) a(d, operatorType.Numeric), O(d.t, null, E, "[]", operatorType.Numeric, calculationType.None, functionType.Param, inputType.Input);
                        break;
                    case operatorType.String:
                        P = !1;
                        if (vb(Xa(g(b.nextSibling) ? b.nextSibling : b, operatorType.String))) a(d, operatorType.String), O(d.t, null, E, '""', operatorType.String, calculationType.None, functionType.Param, inputType.Input);
                        break;
                    case operatorType.Date:
                        ua.close();
                        n = 3;
                        T.show(b, Yc, $b(d, T.defaultFormat()), L, e(!0));
                        T.position();
                        break;
                    case operatorType.Time:
                        ua.close();
                        n = 4;
                        ia.show(b, Zc, $b(d, ia.defaultFormat()), L, e(!1));
                        ia.position();
                        break;
                    case operatorType.Enum:
                        r = Ua(b) + (L ? 0 : 1);
                        0 > r && (r = 0);
                        r <= d.ps.length -
                            1 && (v = eval(Ta(d.ps[r].e)), P = L);
                        s(v, b, $c, null);
                        break;
                    case operatorType.Bool:
                        P = L;
                        s(Ec(), b, ad, null);
                        break;
                    default:
                        throw Error("CL62");
                    }
            } else r = cb(p), g(r) ? (a(d, operatorType.Numeric), O(d.t, null, c, z(r, c).Name, operatorType.Numeric, calculationType.None, functionType.Param, inputType.Field)) : (r = z(f.els.fds, c), a(d, parseInt(p, 10)), O(d.t, null, r.v, r.n, r.o, calculationType.None, functionType.Param, inputType.Field)), v = null, b = x(b), Z() && Da(d);
        }, ad = function(c) { Fc(c, operatorType.Bool, sb(c)); }, $c = function(c) { Fc(c, operatorType.Enum, z(v, c).Name); }, Fc = function(c, p, a) {
            var e = Xa(L ? b : b.nextSibling, p), d = !1;
            g(e) && (ua.close(), ja(e), d = !0, L = !1);
            e = ba(b);
            d || Zb(e);
            O(e.t, null, c, a, p, calculationType.None, functionType.Param, inputType.Input);
            b.setAttribute(S, c);
            b = x(b);
            Z() && Da(e);
        }, Yc = function(c) {
            var p = ba(b);
            Gc(c, p, operatorType.Date, d.formatDate(new Date(c), $b(p, T.defaultFormat())), T);
        }, Zc = function(c, p) { Gc(c, ba(b), operatorType.Time, p, ia); }, Gc = function(c, p, a, d, f) {
            var h = Xa(L ? b : b.nextSibling, a), r = !1;
            g(h) && (ja(h), r = !0, L = !1);
            O(p.t, null, c, d, a, null, functionType.Param, inputType.Input);
            b = x(b);
            f.hide();
            n = 0;
            if (!r)
                switch (c = Ya(b.nextSibling), M(c)) {
                case functionType.Param:
                    c = b;
                    O(p.t, null, E, ",", p.t == elementType.Action ? null : p.rt.o, calculationType.None, functionType.Comma, inputType.None);
                    b = x(c);
                    break;
                case functionType.End:
                case functionType.Comma:
                    c = b, a = Aa(b.previousSibling), M(a) == functionType.Param && 1 < ba(b).ps.length && (b = a, O(p.t, null, E, ",", p.t == elementType.Action ? null : p.rt.o, calculationType.None, functionType.Comma, inputType.None), b = x(c));
                }
            P = !1;
            Q();
            Z() && Da(p);
        }, Zb = function(c) {
            var p = Ya(b.nextSibling), a;
            switch (M(p)) {
            case functionType.Comma:
                b = p;
                Zb(c);
                break;
            case functionType.Param:
                O(c.t, null, E, ",", c.t == elementType.Action ? null : c.rt.o, calculationType.None, functionType.Comma, inputType.None);
                b = x(b.previousSibling);
                break;
            case functionType.End:
                p = M(b) != functionType.None ? null : b, a = Aa(b), M(a) == functionType.Param && 1 < ba(b).ps.length && (b = x(a), O(c.t, null, E, ",", c.t == elementType.Action ? null : c.rt.o,
                    calculationType.None, functionType.Comma, inputType.None), g(p) && (b = x(p)));
            }
        }, Ua = function(c) {
            for (var b = -1; g(c) && M(c) != functionType.Name;) M(c) == functionType.Param && b++, c = c.previousSibling;
            return b;
        }, eb = function(c) { g(c) && Z() && (c.t == elementType.Function ? s(Na(c), b, Ga, null) : (c = ac(), 0 < c.length && s(c, b, bc, null))); }, ba = function(c) {
            c = tb(c, functionType.Name);
            return !g(c) ? null : z(r(c) == elementType.Action ? f.els.acs : f.els.fds, c.getAttribute(H));
        }, Ac = function(c, b, a) {
            for (var e = a; e <= c.ps.length; e++) if (c.ps[e].o == b) return c.ps[e];
            return 0 < a ? Ac(c, b, 0) : null;
        }, sc = function(c, b) {
            var a, e, f;
            for (f in c)
                if (a = c[f], !g(a.Client) ||
                    !a.Client) {
                    e = new d.StringBuilder;
                    b ? g(a.Ns) && 0 < a.Ns.length && (CodeEffects.register(a.Ns), e.append(a.Ns), e.append(".")) : e.append("CodeEffects.Rule.");
                    e.append(Ta(a.Name));
                    e.append(" = [");
                    for (var h = 0; h < a.Data.length; h++) 0 < h && e.append(","), e.append('{"ID":"'), e.append(a.Data[h].ID), e.append('","Name":"'), e.append(a.Data[h].Name), e.append('"}');
                    e.append("]");
                    eval(e.dump());
                }
        }, bd = function(c) {
            G = !0;
            L = P = fa = !1;
            if (1 == n || 2 == n) return !0;
            var p = c.keyCode;
            if (16 == p) return !0;
            if (127 == p || 27 == p || 8 == p) G = !1;
            32 == p && 0 < w.length &&
                (w += " ");
            (6 == n || 8 == n) && 40 == p && Jb++;
            if ((6 == n || 8 == n) && 37 != p && 39 != p && (38 != p || 0 < Jb)) return !0;
            if (4 == n || 3 == n) {
                if (13 == p) return !0;
                4 == n ? ia.hide() : T.hide();
                n = 0;
            }
            var a = r(b), d = ca(b);
            switch (p) {
            case 9:
                w = E;
                (a == elementType.NewLine || a == elementType.Tab) && O(elementType.Tab, null, E, "&nbsp;", null, null, null, null);
                G = !1;
                break;
            case 13:
                if (!ya || ya && X)
                    if (w = E, a == elementType.Value) (d == operatorType.String || d == operatorType.Numeric) && g(b.getAttribute("ce207")) ? (la(), b = x(b), Q(), Z() && s(W(), b, U, elementType.RightParenthesis)) : Sa(!1);
                    else if (a == elementType.Calculation && V(b) == calculationType.Number)
                        g(b.getAttribute("ce207")) ? (la(),
                        b = x(b), Q(), Z() && s(Ba(), b, na, null)) : Sa(!1);
                    else if (a == elementType.Function || a == elementType.Action) (d == operatorType.String || d == operatorType.Numeric) && g(b.getAttribute("ce207")) ? (la(), b = x(b), Q(), Da(ba(b))) : ma(b) ? (Ca(b), Sa(!1)) : M(b) == functionType.End && Sa(!1);
                    else if (wb(b)) {
                        if (g(b.nextSibling) && M(b.nextSibling) == functionType.End && 0 == ba(b).ps.length) {
                            var m = cc(b);
                            g(m) && (b = m);
                        }
                        Sa(!1);
                    }
                X || (X = !0);
                G = !1;
                break;
            case 34:
                ka = 0;
                la();
                m = za();
                b = x(m[m.length - 1]);
                m = pa(b);
                dc(m.y, m.height);
                ma(b) && Ca(b);
                Q();
                G = !1;
                break;
            case 35:
                ka = 0;
                la();
                m = xb(b, elementType.HtmlTag);
                g(m) ? b = x(m.previousSibling) : (m = za(),
                b = x(m[m.length - 1]));
                ma(b) && Ca(b);
                Q();
                G = !1;
                break;
            case 33:
                ka = 0;
                la();
                b = x(za()[0]);
                yb(pa(b).y);
                Q();
                G = !1;
                break;
            case 36:
                ka = 0;
                la();
                m = ec(b, elementType.NewLine);
                if (!g(m) && (m = za()[0], "if" != m.getAttribute(H))) throw Error("CL02");
                b = x(m);
                Q();
                G = !1;
                break;
            case 38:
                (6 == n || 8 == n) && ra();
                va(a, d, V(b), ga(b)) && g(b.getAttribute("ce207")) && (la(), b = x(b));
                var a = za(), d = pa(b), v = null, u = 0;
                0 == ka && (ka = d.x + d.width);
                for (var ea = !1, t = a.length - 1; -1 < t; t--)
                    if (ea) {
                        u = r(a[t]);
                        if (g(v) && (u == elementType.NewLine || fb(a[t]))) {
                            b = x(a[t]);
                            yb(m.y);
                            break;
                        }
                        m = pa(a[t]);
                        if (!(m.y >
                            d.y - parseInt(m.height / 2, 10)))
                            if (g(v) || (v = a[t]), ka > m.x + m.width || !g(a[t].previousSibling) || pa(a[t].previousSibling).y < m.y) {
                                b = x(a[t]);
                                yb(m.y);
                                break;
                            } else if (u = m.x + parseInt(m.width / 2, 10), ka > u) {
                                yb(m.y);
                                b = x(a[t]);
                                break;
                            }
                    } else ea = a[t].id == b.id;
                ma(b) && Ca(b);
                Q();
                G = !1;
                break;
            case 40:
                va(a, d, V(b), ga(b)) && g(b.getAttribute("ce207")) && (la(), b = x(b));
                m = za();
                a = pa(b);
                v = null;
                0 == ka && (ka = a.x + a.width);
                ea = !1;
                for (t = m.length - 1; -1 < t && m[t].id != b.id; t--)
                    if (d = pa(m[t]), ea || (ea = d.y - a.height - parseInt(a.height / 2, 10) < a.y), ea)
                        if (ka > d.x +
                            d.width || !g(pa(m[t].previousSibling)) || pa(m[t].previousSibling).y < d.y) {
                            b = x(m[t]);
                            dc(d.y, d.height);
                            break;
                        } else if (v = d.x + parseInt(d.width / 2, 10), ka >= v) {
                            b = x(m[t]);
                            dc(d.y, d.height);
                            break;
                        }
                ma(b) && Ca(b);
                Q();
                G = !1;
                break;
            case 37:
                ka = 0;
                (6 == n || 8 == n) && ra();
                va(a, d, V(b), ga(b)) && ga(b) != inputType.Field ? (g(b.getAttribute("ce207")) ? (la(), b = x(b.previousSibling), ma(b) && Ca(b)) : b.setAttribute("ce207", "true"), Q()) : g(b.previousSibling) && (m = r(b.previousSibling), b = x(m == elementType.HtmlTag ? b.previousSibling.previousSibling : b.previousSibling), ma(b) &&
                    (M(b) == functionType.End ? Ca(b) : b = x(b.previousSibling)), Q());
                G = !1;
                break;
            case 39:
                ka = 0;
                (6 == n || 8 == n) && ra();
                if (a == elementType.Value && (d == operatorType.String || d == operatorType.Numeric) && g(b.getAttribute("ce207"))) la(), b = x(b), Q(), Z() && s(W(), b, U, elementType.RightParenthesis);
                else if (a == elementType.Calculation && V(b) == calculationType.Number && g(b.getAttribute("ce207"))) la(), b = x(b), Q(), Z() && s(Ba(), b, na, null);
                else if ((a == elementType.Function || a == elementType.Action) && ga(b) == inputType.Input && (d == operatorType.String || d == operatorType.Numeric) && g(b.getAttribute("ce207"))) la(), b = x(b), Q();
                else if (g(b.nextSibling) && ma(b.nextSibling))
                    Ca(b.nextSibling),
                    Q(), eb(ba(b));
                else if (m = !1, g(b.nextSibling) && (b = r(b.nextSibling) == elementType.HtmlTag ? x(b.nextSibling.nextSibling) : x(b.nextSibling), m = !0), m) {
                    a = r(b);
                    m = Z();
                    if (va(a, ca(b), V(b), ga(b)) && ga(b) != inputType.Field) b.setAttribute("ce207", "true"), Q();
                    else if (!g(b.nextSibling) && a == elementType.RightBracket) s(W(), b, U, elementType.RightParenthesis);
                    else if ((a == elementType.Function || a == elementType.Action) && m)
                        switch (M(b)) {
                        case functionType.End:
                            eb(ba(b));
                            break;
                        case functionType.Name:
                            m = ba(b), 0 < m.ps.length && M(b.nextSibling) == functionType.End && Da(m);
                        }
                    else
                        a == elementType.Flow && m ? "else" == b.getAttribute(H) ? s(f.els.acs, b, Ha,
                            null) : s(sa(), b, ta, elementType.LeftParenthesis) : a == elementType.LeftParenthesis && m ? s(sa(), b, ta, elementType.LeftParenthesis) : a == elementType.RightParenthesis && m ? s(W(), b, U, elementType.RightParenthesis) : a == elementType.Field && m ? (m = Na(z(f.els.fds, b.getAttribute(H))), s(m, b, Ga, null)) : a == elementType.Operator && m ? "isNull" == b.getAttribute(H) || "isNotNull" == b.getAttribute(H) ? s(W(), b, U, elementType.RightParenthesis) : gb(b, !0) : a == elementType.Clause && m ? "then" == b.getAttribute(H) ? s(f.els.acs, b, Ha, null) : s(sa(), b, ta, elementType.LeftParenthesis) : a == elementType.RightBracket && m ? s(W(), b, U, elementType.RightParenthesis) : a == elementType.LeftBracket && m ? s(Ba(),
                                b, na, null) : a == elementType.Calculation && m ? s(Ba(), b, na, null) : a == elementType.Value && m && s(W(), b, U, elementType.RightParenthesis);
                    bb();
                }
                G = !1;
            }
            if (jb) return 8 == p && c.preventDefault(), !1;
            if (ya && 13 == p || 8 == p || 9 == p || 33 == p || 34 == p || 35 == p || 36 == p || 38 == p || 39 == p || 40 == p) c.preventDefault && c.preventDefault(), c.stopPropagation && c.stopPropagation();
            return G;
        }, cd = function(c) {
            var a = c.keyCode;
            if (!G) return G = !0, jb ? ((9 == a || 13 == a || 33 == a || 34 == a || 35 == a || 36 == a || 38 == a || 40 == a) && c.preventDefault(), !1) : !0;
            if (1 == n || 2 == n) return !0;
            if ((6 == n || 8 == n) && !oa(a) || (6 == n || 8 == n) &&
                38 == a) return !1;
            if (3 != n && 4 != n) {
                ya || c.preventDefault();
                var d = w;
                w = E;
                if (8 == n) 32 == a ? (P = !0, s(N, I, zb, null), n = 8) : oa(a) && (w = d += String.fromCharCode(a), P = !0, ha(N, I, zb, null), n = 8);
                else {
                    var l = Aa(b);
                    switch (r(l)) {
                    case elementType.Flow:
                        "else" == l.getAttribute(H) ? 32 == a ? s(f.els.acs, b, Ha, null) : oa(a) && (w = d += String.fromCharCode(a), ha(f.els.acs, b, Ha, null)) : 32 == a ? s(sa(), b, ta, elementType.LeftParenthesis) : oa(a) && (w = d += String.fromCharCode(a), ha(sa(), b, ta, elementType.LeftParenthesis));
                        break;
                    case elementType.Function:
                    case elementType.Action:
                        if (fc(a))
                            switch (M(l)) {
                            case functionType.End:
                                if (32 ==
                                    a) eb(ba(l));
                                else if (oa(a) && (d = ba(l), Z() && (l = d.t == elementType.Function ? Na(d) : ac(), 0 < l.length))) {
                                    var d = d.t == elementType.Function ? Ga : bc, m = Hc(l, w);
                                    0 < m.length ? s(m, b, d, null, !0) : s(l, b, d, null, !1);
                                }
                                break;
                            default:
                                if (m = ca(l), va(r(l), m, V(l), ga(l)) && (m == operatorType.String || m == operatorType.Numeric && (43 < a && 47 > a || 47 < a && 58 > a)) && g(l.getAttribute("ce207"))) {
                                    var d = Ua(l), d = 0 > d ? 0 : d, q = ba(l);
                                    Ab(l, a, m, q.ps[d].max, g(q.ps[d].min) ? q.ps[d].min : null, q.ps[d].dec);
                                } else 32 == a ? Da(ba(l)) : oa(a) && (w = d += String.fromCharCode(a), Da(ba(l)));
                            }
                        break;
                    case elementType.LeftParenthesis:
                        32 == a ? s(sa(),
                            b, ta, elementType.LeftParenthesis) : oa(a) && (w = d += String.fromCharCode(a), ha(sa(), b, ta, elementType.LeftParenthesis));
                        break;
                    case elementType.RightParenthesis:
                        32 == a ? s(W(), b, U, elementType.RightParenthesis) : oa(a) && (w = d += String.fromCharCode(a), ha(W(), b, U, elementType.RightParenthesis));
                        break;
                    case elementType.Field:
                        l = z(f.els.fds, l.getAttribute(H));
                        l = Na(l);
                        32 == a ? s(l, b, Ga, null) : oa(a) && (w = d += String.fromCharCode(a), ha(l, b, Ga, null));
                        break;
                    case elementType.Operator:
                        32 == a ? "isNull" == l.getAttribute(H) || "isNotNull" == l.getAttribute(H) ? s(W(), l, U, elementType.RightParenthesis) : gb(l) : oa(a) && (w = d += String.fromCharCode(a),
                        "isNull" == l.getAttribute(H) || "isNotNull" == l.getAttribute(H) ? ha(W(), b, U, elementType.RightParenthesis) : 0 < C.length ? ha(C, b, Ib ? Ic : Jc, null) : gb(l));
                        break;
                    case elementType.Clause:
                        32 == a ? "then" == l.getAttribute(H) ? s(f.els.acs, b, Ha, null) : s(sa(), b, ta, elementType.LeftParenthesis) : oa(a) && (l = "then" == l.getAttribute(H), w = d += String.fromCharCode(a), ha(l ? f.els.acs : sa(), b, l ? Ha : ta, l ? null : elementType.LeftParenthesis));
                        break;
                    case elementType.RightBracket:
                        32 == a ? s(W(), b, U, elementType.RightParenthesis) : oa(a) && (w = d += String.fromCharCode(a), ha(W(), b, U, elementType.RightParenthesis));
                        break;
                    case elementType.LeftBracket:
                        32 ==
                            a ? s(Ba(), b, na, null) : oa(a) && (w = d += String.fromCharCode(a), ha(Ba(), b, na, null));
                        break;
                    case elementType.Calculation:
                        if (V(l) == calculationType.Number) {
                            if (fc(a))
                                if (43 < a && 47 > a || 47 < a && 58 > a) {
                                    if (g(l.getAttribute("ce207")) && (d = Ka(l), d = 3 > d.length ? E : d.substr(1, d.length - 2), 28 > d.length && (45 != a || 1 > d.length))) {
                                        if (44 == a || 46 == a) d = d.replace(/[\.,]+/g, E);
                                        d += String.fromCharCode(a);
                                        if ("," == d || "." == d) d = "0" + d;
                                        if ("-," == d || "-." == d) d = "-0" + d.substr(1, 1);
                                        1 < d.length && ("0" == d.substr(0, 1) && "," != d.substr(1, 1) && "." != d.substr(1, 1)) && (d = d.substr(1));
                                        2 < d.length &&
                                            ("-0" == d.substr(0, 2) && "," != d.substr(2, 1) && "." != d.substr(2, 1)) && (d = "-" + d.substr(2));
                                        Ka(l, "[" + d + "]");
                                        l.setAttribute(S, d);
                                        b = l;
                                        Q();
                                    }
                                } else 32 == a ? s(Ba(), b, na, null) : oa(a) && (w = d += String.fromCharCode(a), ha(Ba(), b, na, null));
                        } else 32 == a ? s(Ba(), b, na, null) : oa(a) && (w = d += String.fromCharCode(a), ha(Ba(), b, na, null));
                        break;
                    case elementType.Value:
                        if (fc(a))
                            if (m = ca(l), m == operatorType.String || m == operatorType.Numeric && (43 < a && 47 > a || 47 < a && 58 > a))
                                g(l.getAttribute("ce207")) ? (d = wa(l), d = g(d) ? z(f.els.fds, d.getAttribute(H)) : null, g(d) ? d.t == elementType.Function ? Ab(l, a, m, d.rt.max,
                                    g(d.rt.min) ? d.rt.min : null, d.rt.dec) : Ab(l, a, m, d.max, g(d.min) ? d.min : null, d.dec) : Ab(l, a, m, null, null, null)) : 32 == a ? s(W(), b, U, elementType.RightParenthesis) : oa(a) && (w = d += String.fromCharCode(a), ha(W(), b, U, elementType.RightParenthesis));
                            else if (m == operatorType.Numeric && 32 == a) g(l.getAttribute("ce207")) || s(W(), b, U, elementType.RightParenthesis);
                            else if (m == operatorType.Date || m == operatorType.Time || m == operatorType.Bool || m == operatorType.Enum) 32 == a ? s(W(), b, U, elementType.RightParenthesis) : oa(a) && (w = d += String.fromCharCode(a), ha(W(), b, U, elementType.RightParenthesis));
                    }
                }
            }
            if (jb)
                return (8 == a || 9 == a || 32 == a || 33 == a || 34 == a || 35 ==
                    a || 36 == a || 38 == a || 40 == a) && c.preventDefault(), !1;
            if (8 == a || 9 == a || 32 == a) c.preventDefault && c.preventDefault(), c.stopPropagation && c.stopPropagation();
        }, fc = function(c) {
            switch (c) {
            case 8:
            case 9:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 27:
            case 127:
                return !1;
            default:
                return !0;
            }
        }, Ab = function(c, a, e, d, m, j) {
            var k = Ka(c), k = 3 > k.length ? E : k.substr(1, k.length - 2), n = g(d) ? d : 256, q = g(j) ? j : !0, r = g(m) ? 0 > m : !0;
            if (e == operatorType.String && k.length < n) {
                var s;
                if (22 == a)
                    if (ya)
                        try {
                            s = window.clipboardData.getData("Text").replace(/[\s]+/g, " "), k.length +
                                s.length > n && (s = s.substr(0, n - k.length));
                        } catch(v) {
                        }
                    else f.help && g(f.els.er.e101) && alert(f.els.er.e101);
                else s = String.fromCharCode(a), 0 == k.length && (s = s.replace(/[\s]+/g, E));
                d = k + s;
                Ka(c, '"' + d + '"');
                c.setAttribute(S, d);
            } else if (e == operatorType.Numeric && 28 > k.length && (q || 44 != a && 46 != a) && (r && 1 > k.length || 45 != a)) {
                if (j && (44 == a || 46 == a)) k = k.replace(/[\.,]+/g, E);
                a = k + String.fromCharCode(a);
                if ("," == a || "." == a) a = "0" + a;
                if ("-," == a || "-." == a) a = "-0" + a.substr(1, 1);
                1 < a.length && ("0" == a.substr(0, 1) && "," != a.substr(1, 1) && "." != a.substr(1, 1)) &&
                    (a = a.substr(1));
                2 < a.length && ("-0" == a.substr(0, 2) && "," != a.substr(2, 1) && "." != a.substr(2, 1)) && (a = "-" + a.substr(2));
                e = parseFloat(a.replace(",", "."));
                m = g(m) ? m : -9007199254740992;
                d = g(d) ? d : 9007199254740992;
                e > d && (0 <= d ? a = d + E : (parseInt(e, 10) + E).length >= (parseInt(m, 10) + E).length && (a = d + E));
                Ka(c, "[" + a + "]");
                c.setAttribute(S, a);
                c.setAttribute("ce212", d.toString());
                c.setAttribute("ce211", m.toString());
            }
            b = c;
            Q();
        }, s = function(c, a, h, l, m) {
            ua.close();
            var j = [], k;
            if (g(l)) {
                var q = xb(b, elementType.Flow);
                g(q) ? q = q.previousSibling : (q = za(),
                q = q[q.length - 1]);
                for (var s = 0, v = 0; g(q) && r(q) != elementType.Flow;) r(q) == elementType.LeftParenthesis && s++, r(q) == elementType.RightParenthesis && v++, q = g(q.previousSibling) && r(q.previousSibling) != elementType.Flow ? q.previousSibling : null;
                if (l == elementType.RightParenthesis && s > v) {
                    if (l = new d.Menu.Item, l.Name = ")", l.Type = elementType.RightParenthesis, j.push(l), c[0].t == elementType.Clause) {
                        l = [];
                        for (k in c) "then" != c[k].v && l.push(c[k]);
                        c = l;
                    }
                } else l == elementType.LeftParenthesis && (l = new d.Menu.Item, l.Name = "(", l.Type = elementType.LeftParenthesis, j.push(l));
            }
            for (var t in c) {
                k = c[t];
                l = new d.Menu.Item;
                l.ID = k.v || k.ID;
                l.Name = k.n || k.Name;
                if (g(k.t) || g(k.Type)) l.Type = k.t || k.Type;
                j.push(l);
            }
            ua.fill(a, j, h, ya && 9 > d.Client.version ? dd : null, ed, f.help ? fd : null);
            P && ua.alignLeft(a);
            P = !1;
            n = 6;
            m || (w = E);
        }, ha = function(c, b, a, e) {
            c = Hc(c, w);
            if (0 < c.length) {
                var d = w;
                s(c, b, a, e, !0);
                ua.select(d);
            } else ra();
        }, gb = function(c, a) {
            function d(c, a) {
                if (c == Ea)
                    switch (parseInt(a, 10)) {
                    case operatorType.Numeric:
                        O(elementType.Value, null, E, "[]", operatorType.Numeric, null, null, null);
                        break;
                    default:
                        Bb(Aa(b));
                    }
                else if (c == mb) Kc(c);
                else {
                    var p = z(f.els.fds, c);
                    O(elementType.Value, null, p.v, p.n, p.o, null, null, inputType.Field);
                    b.setAttribute(S, c);
                    Z() && s(W(), b, U, elementType.RightParenthesis);
                }
            }
            function l(c) {
                O(elementType.Value, null, c, z(v, c).Name, operatorType.Numeric, null, null, inputType.Field);
                v = null;
                b.setAttribute(S, c);
                Z() && s(W(), b, U, elementType.RightParenthesis);
            }
            function m(c) {
                if (c == Ea) {
                    c = j();
                    var b = null;
                    c.t == elementType.Function ? g(c.rt.mds) && (b = c.rt.mds) : g(c.mds) && (b = c.mds);
                    k(b);
                } else d(c);
            }
            function k(c) {
                v = cb(c);
                null != v && (P = L, s(v, b, l, null));
            }
            function j() {
                var c = wa(b);
                return !g(c) ? null : z(f.els.fds, c.getAttribute(H));
            }
            var n = j();
            if (g(n)) {
                var r = n.t == elementType.Function ? n.rt.ai : n.ai, t = n.t == elementType.Function ?
                    n.rt.o : n.o, x = null;
                n.t == elementType.Function ? g(n.rt.mds) && (x = n.rt.mds) : g(n.mds) && (x = n.mds);
                if (g(x)) {
                    var A = Lc(t, n);
                    if (r == valueInputType.User || 0 == A.length || 1 == A.length && A[0].v == n.v) k(x);
                    else {
                        var D = [];
                        if (0 < A.length) {
                            r == valueInputType.All && J(Ea, t, Va(t, !0), D);
                            for (var B in A) r = A[B], r.v != n.v && J(r.v, r.o, r.n, D);
                            0 < w.length ? ha(D, b, m, null) : s(D, b, m, null);
                        } else k(x);
                    }
                } else if (r == valueInputType.User) (!a || t == operatorType.Enum || t == operatorType.Bool) && Bb(c);
                else if (B = [], x = Lc(t, n), 0 < x.length)
                    if (1 == x.length && x[0].v == n.v) Bb(c);
                    else {
                        (t == operatorType.Numeric && n.t == elementType.Function ? n.rt.cal : n.cal) && J(mb, t, f.els.lbl.c,
                            B);
                        r == valueInputType.All && J(Ea, t, Va(t), B);
                        for (A in x) r = x[A], r.v != n.v && J(r.v, r.o, r.n, B);
                        0 < w.length ? ha(B, b, d, null) : s(B, b, d, null);
                    }
                else a || Bb(c);
            }
        }, Bb = function(c) {
            function a(c) {
                var d = null;
                try {
                    var p = b;
                    c = c ? "" : "1/1/2000 ";
                    r(p) != elementType.Value && (p = xb(p, elementType.Value));
                    g(p) && (d = new Date(c + p.getAttribute(S)));
                    isNaN(d.getDate()) && (d = null);
                } catch(f) {
                    d = null;
                }
                return d;
            }
            ra();
            switch (ca(c)) {
            case operatorType.String:
                vb(b.nextSibling) && O(elementType.Value, null, E, '""', operatorType.String, null, null, null);
                break;
            case operatorType.Date:
                n = 3;
                c = wa(b);
                c = g(c) ? z(f.els.fds, c.getAttribute(H)) : null;
                c =
                    !g(c) ? T.defaultFormat() : g(c.rt) ? c.rt.f : c.f;
                T.show(b, gd, c, L, a(!0));
                T.position();
                break;
            case operatorType.Time:
                n = 4;
                c = wa(b);
                c = g(c) ? z(f.els.fds, c.getAttribute(H)) : null;
                c = !g(c) ? ia.defaultFormat() : g(c.rt) ? c.rt.f : c.f;
                ia.show(b, hd, c, L, a(!1));
                ia.position();
                break;
            case operatorType.Enum:
                c = wa(c);
                g(c) && (r(c) == elementType.Function ? (c = ba(c), v = eval(Ta(c.rt.e))) : (c = z(f.els.fds, c.getAttribute(H)), v = g(c.e) ? eval(Ta(c.e)) : c.ens), C = v, Ib = !1, P = L, s(v, b, Jc, null));
                break;
            case operatorType.Bool:
                C = Ec();
                Ib = !0;
                P = L;
                s(C, b, Ic, null);
                break;
            default:
                c = wa(b), c = g(c) ? z(f.els.fds, c.getAttribute(H)) :
                    null, g(c) && (c.cal || g(c.rt) && c.rt.cal) ? (c = [], J(mb, null, f.els.lbl.c, c), J(Ea, null, Va(operatorType.Numeric), c), s(c, b, Kc, null)) : vb(b.nextSibling) && O(elementType.Value, null, E, "[]", operatorType.Numeric, null, null, null);
            }
        }, Ga = function(c) {
            var a = Aa(b), d = ca(a);
            hb(zc(c, d), null);
            Z() ? "isNull" == c || "isNotNull" == c ? s(W(), b, U, elementType.RightParenthesis) : gb(a) : G = !1;
        }, Kc = function(c) {
            switch (c) {
            case mb:
                O(elementType.LeftBracket, null, E, "{", null, null, null, null);
                c = b;
                O(elementType.RightBracket, null, E, "}", null, null, null, null);
                b = x(c);
                Q();
                s(Ba(), b, na, null);
                break;
            default:
                O(elementType.Value, null, E,
                    "[]", operatorType.Numeric, null, null, null);
            }
        }, na = function(c, a) {
            c = parseInt(c, 10);
            if (c == calculationType.Number) O(elementType.Calculation, null, E, "[]", operatorType.Numeric, c, null, null), b.setAttribute("ce207", "true"), Q();
            else {
                var d = E, l;
                switch (c) {
                case calculationType.Field:
                    l = z(f.els.fds, a);
                    if (!g(l)) throw Error("CL48");
                    d = l.v;
                    l = l.n;
                    break;
                case calculationType.LeftParenthesis:
                    l = "(";
                    break;
                case calculationType.RightParenthesis:
                    l = ")";
                    break;
                case calculationType.Multiplication:
                    l = "&#215;";
                    break;
                case calculationType.Division:
                    l = "&#247;";
                    break;
                case calculationType.Addition:
                    l = "+";
                    break;
                case calculationType.Subtraction:
                    l = "&#150;";
                    break;
                default:
                    throw Error("CL64");
                }
                O(elementType.Calculation, null, d, l, null, c, null, null);
                s(Ba(), b, na, null);
            }
        }, Ic = function(c) {
            O(elementType.Value, null, c, sb(c), operatorType.Bool, null, null, null);
            b.setAttribute(S, c);
            Z() && s(W(), b, U, elementType.RightParenthesis);
        }, Jc = function(c) {
            O(elementType.Value, null, c, z(v, c).Name, operatorType.Enum, null, null, null);
            v = null;
            b.setAttribute(S, c);
            Z() && s(W(), b, U, elementType.RightParenthesis);
        }, ta = function(c, a) {
            if (g(a) && parseInt(a, 10) == elementType.LeftParenthesis) O(elementType.LeftParenthesis, null, "(", "(", null, null, null, null), Z() && s(sa(), b, ta, elementType.LeftParenthesis);
            else {
                var d = z(f.els.fds, c);
                d.t == elementType.Function ?
                    ub(d.t, c) : (hb(d, null), Z() && s(Na(d), b, Ga, null));
            }
        }, U = function(c, a) { g(a) && parseInt(a, 10) == elementType.RightParenthesis ? (O(elementType.RightParenthesis, null, ")", ")", null, null, null, null), Z() && s(W(), b, U, elementType.RightParenthesis)) : (hb(z(f.els.cls, c), null), "then" == c && Z() ? s(f.els.acs, b, Ha, null) : Z() && s(sa(), b, ta, elementType.LeftParenthesis)); }, gd = function(c) {
            var a = wa(b), a = g(a) ? z(f.els.fds, a.getAttribute(H)) : null, a = !g(a) ? T.defaultFormat() : g(a.rt) ? a.rt.f : a.f, k = !0, l = Ya(b);
            g(l) && (r(l) == elementType.Value && ca(l) == operatorType.Date) && (b = x(l), k = !1);
            k ? O(elementType.Value, null, c, d.formatDate(new Date(c),
                a), operatorType.Date, null, null, null) : (b.setAttribute(S, c), d.text(b, d.formatDate(new Date(c), a)));
            T.hide();
            P = !1;
            n = 0;
            Q();
            Z() && s(W(), b, U, elementType.RightParenthesis);
        }, hd = function(c, a) {
            var f = !0;
            if (g(b.nextSibling)) {
                var l = Ya(b.nextSibling);
                g(l) && (r(l) == elementType.Value && ca(l) == operatorType.Time) && (b = x(l), f = !1);
            }
            f ? O(elementType.Value, null, c, a, operatorType.Time, null, null, null) : (b.setAttribute(S, c), d.text(b, a));
            ia.hide();
            P = !1;
            n = 0;
            Q();
            Z() && s(W(), b, U, elementType.RightParenthesis);
        }, Ha = function(c) { ub(z(f.els.acs, c).t, c); }, bc = function(c) {
            hb(z(f.els.fls, c), null);
            Z() && ("else" == c ? s(f.els.acs,
                b, Ha, null) : s(sa(), b, ta, elementType.LeftParenthesis));
        }, O = function(c, b, a, e, f, n, r, s, v) {
            var t = new d.Client.Element;
            t.n = e;
            t.v = a;
            t.t = c;
            t.o = g(f) ? f : operatorType.None;
            t.CalType = g(n) ? n : calculationType.None;
            t.FuncType = g(r) ? r : functionType.None;
            t.InpType = g(s) ? s : inputType.None;
            hb(t, b, v);
        }, hb = function(c, a, d) {
            var l, m;
            l = !(!g(b) || !g(b.nextSibling));
            m = document.createElement("SPAN");
            m.id = g(a) ? a : targetElement.id + Ia;
            Ia++;
            99999999999 < Ia && (Ia = 0);
            m.innerHTML = c.n;
            c.t == elementType.Value ? (xa(m, f.valueCss), g(m.getAttribute(S)) || m.setAttribute(S, c.v)) : c.t == elementType.Calculation ? (xa(m, f.calcCss), g(c.v) && m.setAttribute(S,
                c.v), c.CalType == calculationType.RightParenthesis ? (m.onmouseover = function() { Cb(this, Mc); }, m.onmouseout = function() { Db(this, Mc); }, m.style.paddingRight = m.style.paddingLeft = "2px") : c.CalType == calculationType.LeftParenthesis && (m.onmouseover = function() { Cb(this, Nc); }, m.onmouseout = function() { Db(this, Nc); }, m.style.paddingRight = m.style.paddingLeft = "2px")) : c.t == elementType.Flow ? xa(m, f.flowCss) : c.t == elementType.Field ? xa(m, f.fieldCss) : c.t == elementType.Function ? c.FuncType == functionType.Name || c.FuncType == functionType.End ? xa(m, f.fieldCss) : (xa(m, f.paramCss), c.InpType == inputType.Input && g(c.v) && m.setAttribute(S,
                    c.v)) : c.t == elementType.Action ? c.FuncType == functionType.Name || c.FuncType == functionType.End ? xa(m, f.actionCss) : (xa(m, f.paramCss), c.InpType == inputType.Input && g(c.v) && m.setAttribute(S, c.v)) : c.t == elementType.Operator ? xa(m, f.operCss) : c.t == elementType.LeftBracket || c.t == elementType.RightBracket ? xa(m, f.skobkiCss) : c.t == elementType.Clause ? xa(m, f.clauseCss) : c.t == elementType.Tab ? xa(m, f.tabCss) : c.t == elementType.NewLine && xa(m, f.lineCss);
            if (c.t == elementType.Tab) m.style.paddingRight = m.style.paddingLeft = "8px";
            else if ((c.t == elementType.Function || c.t == elementType.Action) && c.FuncType == functionType.End) {
                if (a = z(c.t == elementType.Function ? f.els.fds : f.els.acs, c.v), !g(a) ||
                    !g(a.ps) || 0 == a.ps.length) m.style.paddingRight = m.style.paddingLeft = "0px", m.style.width = "2px";
            } else c.t == elementType.RightParenthesis ? (m.onmouseover = function() { Cb(this, Oc); }, m.onmouseout = function() { Db(this, Oc); }, g(f.skobkiCss) && 0 < f.skobkiCss.length && (m.className = aa(f.skobkiCss))) : c.t == elementType.LeftParenthesis && (m.onmouseover = function() { Cb(this, Pc); }, m.onmouseout = function() { Db(this, Pc); }, g(f.skobkiCss) && 0 < f.skobkiCss.length && (m.className = aa(f.skobkiCss))), m.style.paddingRight = m.style.paddingLeft = "2px";
            m.style.paddingBottom =
                "2px";
            m.style.marginTop = m.style.marginLeft = m.style.marginRight = m.style.marginBottom = "0px";
            m.style.display = "inline-block";
            m.style.whiteSpace = "nowrap";
            if (c.CalType == calculationType.Number || (c.t == elementType.Value || c.FuncType == functionType.Param) && c.InpType != inputType.Field && (c.o == operatorType.String || c.o == operatorType.Numeric)) m.style.cursor = "text";
            m.setAttribute("ce202", c.t);
            c.t == elementType.Field && c.o == operatorType.Bool && (c.ir ? m.setAttribute("ce213", "true") : (a = z(f.els.fds, c.v), g(a) && (g(a.ir) && a.ir) && m.setAttribute("ce213", "true")));
            m.setAttribute("ce203", g(c.CalType) ? c.CalType : calculationType.None);
            m.setAttribute("ce204", g(c.FuncType) ? c.FuncType : functionType.None);
            m.setAttribute("ce205", g(c.InpType) ? c.InpType : inputType.None);
            m.setAttribute(H, c.v);
            g(c.o) && c.o != operatorType.None ? (m.setAttribute("ce209", c.o), va(c.t, c.o, c.CalType, c.InpType) && c.InpType != inputType.Field && m.setAttribute("ce207", "true")) : m.setAttribute("ce209", operatorType.None);
            L && Oa();
            L = !1;
            if (l) {
                if (l = b.nextSibling, targetElement.insertBefore(m, b.nextSibling), c.t != elementType.Tab) {
                    if (g(l) && r(l) == elementType.Tab) for (; g(l) && r(l) == elementType.Tab;) a = l.nextSibling, targetElement.removeChild(l), l = a;
                    if (g(l)) {
                        if (c.t == elementType.RightBracket && r(l) == elementType.LeftBracket) {
                            for (; r(l) !=
                                elementType.RightBracket;) a = l.nextSibling, targetElement.removeChild(l), l = a;
                            targetElement.removeChild(l);
                        }
                        c.t == elementType.Calculation && (c.CalType == calculationType.Field || c.CalType == calculationType.Number) ? c.t == r(l) && id(c.CalType, V(l)) && targetElement.removeChild(l) : (c.t == elementType.Value || c.t == elementType.Operator && "isNull" != c.v && "isNotNull" != c.v || c.t == elementType.Clause && "then" == c.v || c.t == elementType.Flow && "else" == c.v) && (c.t == r(l) && c.o == ca(l)) && targetElement.removeChild(l);
                    }
                }
            } else targetElement.appendChild(m);
            (c.t == elementType.Function || c.t == elementType.Action) && c.FuncType == functionType.End && ma(m) ? Ca(m, d) : b = d ? m : x(m);
            if (f.titles)
                switch (d = function(c) {
                    c = z(f.els.fds, c);
                    g(c) && g(c.d) &&
                        (b.title = Fa(c.d));
                }, c.t) {
                case elementType.Function:
                case elementType.Action:
                    switch (c.FuncType) {
                    case functionType.Name:
                        c = z(c.t == elementType.Function ? f.els.fds : f.els.acs, c.v);
                        g(c) && g(c.d) && (b.title = Fa(c.d));
                        break;
                    case functionType.Param:
                        c = ba(b), g(c) && 0 < c.ps.length && (d = Ua(b), 0 <= d && (c = c.ps[d], g(c) && g(c.d) && (b.title = Fa(c.d))));
                    }
                    break;
                case elementType.Field:
                    d(c.v);
                    break;
                case elementType.Value:
                    c.InpType == inputType.Field && d(c.v);
                    break;
                case elementType.Calculation:
                    c.CalType == calculationType.Field && d(c.v);
                }
            fa = !1;
            Q();
        }, Oa = function() {
            var c;
            r(b) == elementType.HtmlTag && (b = x(g(b.nextSibling) ? b.nextSibling : b.previousSibling));
            switch (r(b)) {
            case elementType.Function:
            case elementType.Action:
                switch (M(b)) {
                case functionType.Name:
                    for (; M(b) !=
                        functionType.End;) c = b.nextSibling, targetElement.removeChild(b), b = c;
                    ja(b);
                    break;
                case functionType.End:
                    for (; M(b) != functionType.Name;) ja(b);
                    ja(b);
                    break;
                case functionType.Comma:
                    for (ja(b); M(b) != functionType.Name && M(b) != functionType.Comma;) ja(b);
                    break;
                case functionType.Param:
                    c = Ya(b.nextSibling);
                    if (M(c) == functionType.Comma) b = c, Oa();
                    else for (ja(b); M(b) != functionType.Name && M(b) != functionType.Param;) ja(b);
                    break;
                default:
                    throw Error("CL89");
                }
                break;
            case elementType.LeftBracket:
                if (!g(b.nextSibling)) throw Error("CL82");
                for (; r(b) != elementType.RightBracket;) c = b.nextSibling, targetElement.removeChild(b), b = c;
                ja(b);
                break;
            case elementType.RightBracket:
                if (!g(b.previousSibling)) throw Error("CL84");
                for (; r(b) != elementType.LeftBracket;) ja(b);
                ja(b);
                break;
            default:
                ja(b);
            }
            Q();
        }, ja = function(c) {
            if (g(c.previousSibling)) {
                var a = c.previousSibling;
                targetElement.removeChild(c);
                b = x(a);
            }
        }, Cb = function(c, a) {
            if (!Eb(c)) {
                var e = a(c);
                if (g(e)) {
                    if (1 == n || c.id != b.id) c.className = c.className + " " + f.highlightBg;
                    if (!Eb(e) && (1 == n || e.id != b.id)) e.className = e.className + " " + f.highlightBg;
                }
            }
        }, Db = function(c, a) {
            if (!Eb(c)) {
                var e = a(c);
                if (g(e)) {
                    if (1 == n || c.id != b.id) c.className = c.className.replace(" " + f.highlightBg, "");
                    if (!Eb(e) && (1 == n || e.id != b.id))
                        e.className =
                            e.className.replace(" " + f.highlightBg, "");
                }
            }
        }, Eb = function(c) {
            if (!g(K) || 0 == K.length) return !1;
            for (var a in K) if (K[a] == c.id) return !0;
            return !1;
        }, Oc = function(c) {
            var a = 1;
            for (c = c.previousSibling; g(c) && !(r(c) == elementType.LeftParenthesis ? a-- : r(c) == elementType.RightParenthesis && a++, 0 == a);) c = c.previousSibling;
            return g(c) ? c : null;
        }, Pc = function(c) {
            var a = 1;
            for (c = c.nextSibling; g(c) && !(r(c) == elementType.RightParenthesis ? a-- : r(c) == elementType.LeftParenthesis && a++, 0 == a);) c = c.nextSibling;
            return g(c) ? c : null;
        }, Mc = function(c) {
            var a = 1;
            for (c = c.previousSibling; r(c) !=
                elementType.LeftBracket && !(V(c) == calculationType.LeftParenthesis ? a-- : V(c) == calculationType.RightParenthesis && a++, 0 == a);) c = c.previousSibling;
            return g(c) && r(c) != elementType.LeftBracket ? c : null;
        }, Nc = function(c) {
            var a = 1;
            for (c = c.nextSibling; r(c) != elementType.RightBracket && !(V(c) == calculationType.RightParenthesis ? a-- : V(c) == calculationType.LeftParenthesis && a++, 0 == a);) c = c.nextSibling;
            return g(c) && r(c) != elementType.RightBracket ? c : null;
        }, Sa = function(c, a) {
            if (!g(b.nextSibling) || !(r(b.nextSibling) == elementType.HtmlTag && g(b.nextSibling.nextSibling.nextSibling) && r(b.nextSibling.nextSibling.nextSibling) == elementType.HtmlTag)) {
                var d =
                    document.createElement("BR");
                d.setAttribute("ce202", elementType.HtmlTag);
                g(b) && g(b.nextSibling) || c ? targetElement.insertBefore(d, c ? b : b.nextSibling) : targetElement.appendChild(d);
                b = a ? d : x(d);
                O(elementType.NewLine, null, E, f.tochki ? "&#149;&nbsp;" : "&nbsp;&nbsp;", null, null, null, null, a);
            }
        }, Qc = function() { r(b) == elementType.NewLine || r(b.previousSibling) == elementType.NewLine ? (b = Aa(b.previousSibling), Fb(), b = x(g(b.nextSibling) ? b.nextSibling : b)) : fb(b.previousSibling) || (b = b.previousSibling, Oa(), b = x(g(b.nextSibling) ? b.nextSibling : b)); }, Cc = function() {
            wc();
            f.help && db(f.els.ms.i101);
            ka = 0;
            w = E;
            n = 2;
        }, oc = function() {
            if (g(targetElement)) {
                (6 == n || 8 == n) && ra();
                Cc();
                Ra();
                if (f.tools) {
                    Y.setValue(f.els.lbl.n);
                    Y.setClass(f.nameDefCss);
                    qa.setValue(f.els.lbl.d);
                    qa.setClass(f.descDefCss);
                    var c = document.getElementById("ceC" + targetElement.id);
                    c && c.parentNode.removeChild(c);
                }
                da = null;
                n = 1;
            }
        }, vb = function(c) { return g(c) && (c = Ya(c), g(c) && va(r(c), ca(c), V(c), ga(c)) && ga(c) != inputType.Field) ? (Rc(c), L = P = !1, Q(), !1) : !0; }, Ub = function() {
            if (0 < K.length) {
                var c, a;
                for (a in K)
                    c = document.getElementById(K[a]), g(c) && (c.className = c.className.replace(" " + f.highlightBg,
                        ""), c.title = E);
                K = [];
            }
            f.help && ($.className = $.className.replace(" " + f.invalidColor, ""));
        }, tc = function(c) {
            var a = "ceT" + targetElement.id;
            y = document.getElementById(a);
            g(y) && y.parentNode.removeChild(y);
            y = document.createElement("DIV");
            y.id = a;
            y.className = aa(f.toolCss);
            a = document.createElement("TABLE");
            a.cellPadding = a.cellSpacing = a.border = 0;
            a.style.width = "100%";
            var b = a.insertRow(-1), h = b.insertCell(-1);
            h.style.paddingRight = "6px";
            c ? uc(h) : (I = document.createElement("SPAN"), I.id = "ceRl" + targetElement.id, I.className = aa(f.rulesCss), I.innerHTML =
                f.els.lbl.r + "&nbsp;&#9662;", h.appendChild(I), I.onclick = function(c) {
                    (new d.Event(c)).stopPropagation();
                    disposeInternal();
                    P = !0;
                    0 < w.length ? ha(N, I, zb, null) : s(N, I, zb, null);
                    n = 8;
                }, h = b.insertCell(-1), h.style.textAlign = "right", spnShared = document.createElement("SPAN"), spnShared.className = f.lblCss, spnShared.style.display = "none", h.appendChild(spnShared), Y = new d.TextBox.Control, Y.init(new d.TextBox.Settings(h, "ceTl" + targetElement.id, aa(f.nameCss), aa(f.nameDefCss), 50, f.els.lbl.n, f.els.er.e104, aa(f.invalidColor))), qa = new d.TextBox.Control,
            qa.init(new d.TextBox.Settings(h, "ceTd" + targetElement.id, aa(f.descCss), aa(f.descDefCss), 80, f.els.lbl.d, f.els.er.e104, aa(f.invalidColor))), c = document.createElement("SPAN"), c.id = "ceA" + targetElement.id, c.className = aa(f.saveButCss), c.innerHTML = f.els.lbl.a, h.appendChild(c), c.onclick = function() {
                (6 == n || 8 == n) && ra();
                var c = za();
                0 == c.length || 1 == c.length && (!g(r(c[0])) || r(c[0]) == elementType.Flow) ? alert(f.els.er.e106) : gc("ceSave");
            });
            y.appendChild(a);
            targetElement.appendChild(y);
        }, uc = function(c, a) {
            if (g(f.els.ms.i101)) {
                var b = "ceH" + targetElement.id;
                $ = document.getElementById(b);
                g($) && $.parentNode.removeChild($);
                $ = document.createElement("DIV");
                $.id = b;
                a && ($.className = aa(f.helpCss));
                c.appendChild($);
                $.innerHTML = f.els.ms.i101;
            } else vc();
        }, vc = function() {
            var c = document.getElementById("ceH" + targetElement.id);
            g(c) && c.parentNode.removeChild(c);
            $ = null;
            f.help = !1;
        }, gc = function(c) {
            Qa = c;
            if ($a)
                switch (Qa) {
                case "ceDelete":
                    if (!g(da)) throw Error("CL31");
                    if (!g(Pb)) {
                        alert("Delete action is not defined");
                        break;
                    }
                    Ja = !0;
                    Pb(da);
                    break;
                case "ceSave":
                    if (!g(Ob)) {
                        alert("Save action is not defined");
                        break;
                    }
                    Ja = !1;
                    Ob(Pa.serialize(qb()));
                    break;
                default:
                    if (!g(Qb)) {
                        alert("Load action is not defined");
                        break;
                    }
                    Ja = !0;
                    Qb(c);
                }
            else if (kc) {
                Ja = "ceSave" != Qa;
                try {
                    eval(f.pb + "('" + elementId + "','')");
                } catch(a) {
                    throw Error("CL81");
                }
            } else
                switch (Qa) {
                case "ceDelete":
                    if (!g(da)) throw Error("CL32");
                    if (!f.pb || !f.pb.d) {
                        alert("Delete action is not defined");
                        break;
                    } else window.location = f.pb.d.replace("_ce_", da);
                    break;
                case "ceSave":
                    if (!g(pb)) throw Error("CL33");
                    if (!f.pb || !f.pb.s) {
                        alert("Save action is not defined");
                        break;
                    } else if (g(La))
                        Vb(), La.action ? La.action = f.pb.s : La.setAttribute("action",
                            f.pb.s), La.submit();
                    else {
                        c = document.createElement("FORM");
                        document.body.appendChild(c);
                        c.action ? c.action = f.pb.s : c.setAttribute("action", f.pb.s);
                        c.method ? c.method = "post" : c.setAttribute("method", "post");
                        var b = document.createElement("INPUT");
                        b.type = "hidden";
                        b.id = pb;
                        b.name = elementId;
                        Ja = !1;
                        b.value = Pa.serialize(qb());
                        c.appendChild(b);
                        c.submit();
                    }
                    break;
                default:
                    !f.pb || !f.pb.l ? alert("Load action is not defined") : window.location = f.pb.l.replace("_ce_", Qa);
                }
        }, fd = function(c) {
            if (f.help) {
                var a = z(f.els.fds, c), b = null;
                g(a) ?
                    a.d && (b = a.d) : (a = z(f.els.acs, c), g(a) && a.d ? b = a.d : (a = z(f.els.rls, c), g(a) && a.d && (b = a.d)));
                g(b) && 0 < b.length ? db(b) : bb();
            }
        }, zb = function(c) { "ceEval" == c || "ceExec" == c ? (f.isEval = "ceEval" == c, oc()) : (ua.close(), n = 1, gc(c)); }, mc = function() {
            var c = "ceC" + targetElement.id;
            if (!g(document.getElementById(c))) {
                var a = document.createElement("SPAN");
                a.id = c;
                a.className = aa(f.deleteCss);
                a.innerHTML = f.els.lbl.u;
                d.getChildrenByTagName(y, "TABLE", !0)[0].rows[0].cells[1].appendChild(a);
                a.onclick = function() { confirm(f.els.er.e105) && gc("ceDelete"); };
            }
        },
            xc = function() {
                if (g(t))
                    try {
                        var c = t.parentNode;
                        g(c) || (c = document.body);
                        c.removeChild(t);
                    } catch(a) {
                        t.style.display = "none";
                    }
                t = document.createElement("DIV");
                t.id = (new Date).getMilliseconds() * Ia + E;
                t.style.position = "absolute";
                t.style.left = "0px";
                t.style.top = "0px";
                t.style.textAlign = "right";
                t.style.width = "200px";
                c = document.createElement("A");
                c.innerHTML = "Rule.CodeEffects.com";
                c.href = "http://rule.codeeffects.com";
                c.target = "_blank";
                c.style.fontSize = "10px";
                t.appendChild(c);
                document.body.appendChild(t);
                Sc();
            }, Sc =
                function() {
                    if (Wb && g(t)) {
                        var c = pa(f.tools || f.help ? y : targetElement), a = pa(t);
                        t.style.left = c.x + c.width - a.width - 8 + "px";
                        c = c.y - a.height - 4;
                        0 > c && (c = 0);
                        t.style.top = c + "px";
                    }
                }, Wb = 0 < Lb(document.body, "ce002", "true").length, z = function(c, a) {
                    for (var b in c) if (g(c[b].v) && c[b].v == a || g(c[b].ID) && c[b].ID == a) return c[b];
                    return null;
                }, sa = function() {
                    if (!g(da)) return f.els.fds;
                    var c = [], a, b;
                    for (b in f.els.fds) a = f.els.fds[b], a.ir && a.v == da || c.push(a);
                    return c;
                }, W = function() {
                    var c = [], a, b;
                    for (b in f.els.cls)
                        a = f.els.cls[b], f.isEval && "then" ==
                            a.v || c.push(a);
                    return c;
                }, zc = function(c, a) {
                    for (var b in f.els.ops) if (f.els.ops[b].v == c && f.els.ops[b].o == a) return f.els.ops[b];
                    return null;
                }, Na = function(c, a) {
                    var b = [], d, m, k, j;
                    c.t == elementType.Function ? (m = c.rt.o, k = c.rt.l, j = g(c.rt.mds)) : c.ir ? (k = j = !1, m = operatorType.Bool) : (k = c.l, m = c.o, j = g(c.mds));
                    for (var n in f.els.ops)
                        if (d = f.els.ops[n], d.o == m && !(g(a) && d.v == a) && (k || !("isNull" == d.v || "isNotNull" == d.v))) {
                            if (m == operatorType.Numeric && j)
                                if (k) {
                                    if ("isNull" != d.v && "isNotNull" != d.v && "equal" != d.v && "notEqual" != d.v) continue;
                                } else if ("equal" != d.v && "notEqual" !=
                                    d.v) continue;
                            b.push(d);
                        }
                    return b;
                }, Ec = function() {
                    var c = [];
                    J("true", null, f.els.lbl.t, c);
                    J("false", null, f.els.lbl.f, c);
                    return c;
                }, Lc = function(c, a) {
                    var b = [], d, k = a.t == elementType.Function ? a.rt.e : a.e, j = a.t == elementType.Function ? a.rt.mds : a.mds, n;
                    for (n in f.els.fds) d = f.els.fds[n], d.o == operatorType.Enum && (!g(k) || k != d.e) || d.t == elementType.Field && (!d.ir && d.o == c) && (g(d.mds) ? g(j) && d.mds == j && b.push(d) : g(j) || b.push(d));
                    return b;
                }, hc = function(c) {
                    var a = [], b, d;
                    for (d in f.els.fds)
                        b = f.els.fds[d], b.t == elementType.Field && (!b.ir && !g(b.mds) && b.o == operatorType.Numeric && b.i && (!g(c) || b.v !=
                            c)) && a.push(b);
                    return a;
                }, cb = function(c) {
                    var a = Dc(c), b = null;
                    null != a && (b = a.Client ? eval(a.Data[0] + "()") : eval("CodeEffects.Rule." + c));
                    return b;
                }, Dc = function(c) {
                    for (var a in f.els.mds) if (f.els.mds[a].Name == c) return f.els.mds[a];
                    return null;
                }, Rc = function(c) {
                    if (g(D)) {
                        var a = document.getElementById(D);
                        g(a) && (a.className = a.className.replace(" " + f.currentBg, ""));
                    }
                    g(b) && (b.className = b.className.replace(" " + f.currentBg, ""));
                    c.setAttribute("ce207", "true");
                    b = c;
                }, la = function() {
                    if (g(b)) {
                        b.removeAttribute("ce207");
                        var c =
                            r(b);
                        if (c == elementType.Value && ca(b) == operatorType.Numeric && ga(b) != inputType.Field || c == elementType.Calculation && V(b) == calculationType.Number || (c == elementType.Function || c == elementType.Action) && ga(b) == inputType.Input && ca(b) == operatorType.Numeric) {
                            var a, d;
                            var l = b.getAttribute(S);
                            try {
                                if (g(l)) {
                                    var m = parseFloat(l);
                                    a = g(m) && "-0." != l && "0." != l;
                                } else a = !1;
                            } catch(n) {
                                a = !1;
                            }
                            a ? c != elementType.Calculation && (g(b.getAttribute("ce211")) ? d = parseInt(b.getAttribute("ce211"), 10) : (a = wa(b), g(a) && (c = z(c == elementType.Action ? f.els.acs : f.els.fds, a.getAttribute(H)), M(b) == functionType.Param ? (c = c.ps[Ua(b)], g(c.min) && (d = c.min)) : d = c.t == elementType.Function && g(c.rt.min) ?
                                c.rt.min : c.t == elementType.Field && g(c.min) ? c.min : 0)), d > parseInt(b.getAttribute(S), 10) && (b.innerHTML = "[" + d + "]", b.setAttribute(S, d))) : c == elementType.Calculation ? (b.innerHTML = "[0]", b.setAttribute(S, "0")) : (d = 0, g(b.getAttribute("ce211")) ? d = parseInt(b.getAttribute("ce211"), 10) : (a = wa(b), g(a) && (c = z(c == elementType.Action ? f.els.acs : f.els.fds, a.getAttribute(H)), c.t == elementType.Function && g(c.rt.min) ? d = c.rt.min : c.t == elementType.Field && g(c.min) && (d = c.min))), b.innerHTML = "[" + d + "]", b.setAttribute(S, d));
                            g(b.getAttribute("ce212")) && (d = parseInt(b.getAttribute("ce212"),
                                10), d < parseInt(b.getAttribute(S), 10) && (b.innerHTML = "[" + d + "]", b.setAttribute(S, d)));
                        }
                    }
                }, ac = function() {
                    var c = za(), a = !1, d;
                    for (d in c) r(c[d]) == elementType.Flow && "else" == c[d].getAttribute(H) && (a = !0);
                    if (!g(b.nextSibling) && a) return [];
                    var c = [], h;
                    for (h in f.els.fls) "if" != f.els.fls[h].v && (!a || "else" != f.els.fls[h].v) && c.push(f.els.fls[h]);
                    return c;
                }, Ba = function() {
                    var c = [];
                    switch (r(Aa(b))) {
                    case elementType.LeftBracket:
                        J(calculationType.LeftParenthesis, null, "(", c);
                        J(calculationType.Number, null, Va(operatorType.Numeric), c);
                        var a = hc(), d;
                        for (d in a)
                            J(calculationType.Field, a[d].v, a[d].n,
                                c);
                        break;
                    case elementType.Calculation:
                        d = V(b);
                        d == calculationType.None && (d = V(Aa(b)));
                        switch (d) {
                        case calculationType.Number:
                        case calculationType.Field:
                        case calculationType.RightParenthesis:
                            d = a = 0;
                            var f;
                            a: {
                                for (f = b; g(f);) {
                                    if (r(f) == elementType.RightBracket) break a;
                                    f = f.nextSibling;
                                }
                                f = null;
                            }
                            for (f = f.previousSibling; g(f) && r(f) != elementType.LeftBracket;) V(f) == calculationType.LeftParenthesis && a++, V(f) == calculationType.RightParenthesis && d++, f = f.previousSibling;
                            a > d && J(calculationType.RightParenthesis, null, ")", c);
                            J(calculationType.Addition, null, "+", c);
                            J(calculationType.Subtraction, null, "&#150;", c);
                            J(calculationType.Multiplication, null, "&#215;", c);
                            J(calculationType.Division, null, "&#247;", c);
                            break;
                        case calculationType.LeftParenthesis:
                        case calculationType.Addition:
                        case calculationType.Subtraction:
                        case calculationType.Multiplication:
                        case calculationType.Division:
                            for (a in J(calculationType.LeftParenthesis, null, "(", c), J(calculationType.Number, null, Va(operatorType.Numeric), c), d = hc(), d) J(calculationType.Field, d[a].v, d[a].n, c);
                        }
                        break;
                    default:
                        throw Error("CL80");
                    }
                    return c;
                }, $b = function(c, a) {
                    if (!g(c) || 0 == c.ps.length) return a;
                    var d = Ua(b);
                    for (0 > d && (d = 0); d < c.ps.length;) {
                        if (g(c.ps[d].f)) return c.ps[d].f;
                        d++;
                    }
                    return a;
                }, J = function(c, a, b, e) {
                    var f = new d.Menu.Item;
                    f.ID = c;
                    g(a) && (f.Type = a + E);
                    f.Name = b;
                    e.push(f);
                }, id = function(c, a) {
                    if (c ==
                        calculationType.None || a == calculationType.None) throw Error("CL90");
                    switch (c) {
                    case calculationType.Field:
                        return a == calculationType.Number || a == calculationType.Field;
                    case calculationType.Number:
                        return a == calculationType.Field || a == calculationType.Number;
                    case calculationType.LeftParenthesis:
                        return a == calculationType.LeftParenthesis;
                    case calculationType.RightParenthesis:
                        return a == calculationType.RightParenthesis;
                    default:
                        return a == calculationType.Multiplication || a == calculationType.Division || a == calculationType.Addition || a == calculationType.Subtraction;
                    }
                }, Hc = function(c, a) {
                    var b = [];
                    if (!g(c) || 0 == c.length) return b;
                    a = a.toLowerCase();
                    var d, e;
                    for (e in c) d = c[e].n || c[e].Name, d.length >= a.length && d.substr(0, a.length).toLowerCase() == a && b.push(c[e]);
                    return b;
                }, jd = function() {
                    if (!g(b)) return "i101";
                    if (8 == n) return "i126";
                    var a = Aa(b), d;
                    switch (r(a)) {
                    case elementType.Flow:
                        return "else" == a.getAttribute(H) ? "i110" : "i103";
                    case elementType.LeftParenthesis:
                        return "i103";
                    case elementType.RightParenthesis:
                        return "i111";
                    case elementType.Field:
                        return fa ? "i127" : "i104";
                    case elementType.LeftBracket:
                        return "i106";
                    case elementType.RightBracket:
                        return "i121";
                    case elementType.Calculation:
                        return "i108";
                    case elementType.Action:
                        switch (M(a)) {
                        case functionType.End:
                            return ma(a) && fa ? "i128" : "else" == ec(a, elementType.Flow).getAttribute(H) ? "i124" : "i125";
                        case functionType.Name:
                            return fa ? "i128" :
                                "i123";
                        default:
                            return "i123";
                        }
                    case elementType.Function:
                        switch (M(a)) {
                        case functionType.End:
                            return ma(a) && fa ? "i127" : "i104";
                        case functionType.Name:
                            return fa ? "i127" : "i123";
                        default:
                            return "i123";
                        }
                    case elementType.Operator:
                        if (fa) return "i129";
                        d = ca(a);
                        return d == operatorType.Numeric ? (a = wa(a), a = g(a) ? z(f.els.fds, a.getAttribute(H)) : null, g(a) && a.cal ? "i122" : "i113") : d == operatorType.String ? "i113" : d == operatorType.Date ? "i114" : d == operatorType.Time ? "i117" : "i119";
                    case elementType.Value:
                        return d = ca(a), d == operatorType.String || d == operatorType.Numeric ? g(a.getAttribute("ce207")) ? "i105" : fa ? "i131" : "i107" : d == operatorType.Date ? 3 == n ? "i109" : fa ? "i132" : "i115" :
                            d == operatorType.Time ? 4 == n ? "i116" : fa ? "i133" : "i118" : fa ? "i134" : "i120";
                    case elementType.Clause:
                        return "then" == a.getAttribute(H) ? "i110" : fa ? "i129" : "i103";
                    default:
                        return "i122";
                    }
                }, Va = function(a, b) {
                    switch (a) {
                    case operatorType.String:
                        return f.els.lbl.s;
                    case operatorType.Date:
                        return f.els.lbl.v;
                    case operatorType.Time:
                        return f.els.lbl.j;
                    case operatorType.Numeric:
                        return b ? f.els.lbl.e : f.els.lbl.m;
                    case operatorType.Bool:
                        return f.els.lbl.b;
                    case operatorType.Enum:
                        return f.els.lbl.e;
                    default:
                        throw Error("CL45");
                    }
                }, tb = function(a, b) {
                    return a.getAttribute && g(a.getAttribute("ce204")) && (r(a) == elementType.Function || r(a) ==
                        elementType.Action) && M(a) == b ? a : g(a.previousSibling) ? tb(a.previousSibling, b) : null;
                }, Xb = function(a, b) { return a.getAttribute && g(a.getAttribute("ce204")) && (r(a) == elementType.Function || r(a) == elementType.Action) && M(a) == b ? a : g(a.nextSibling) ? Xb(a.nextSibling, b) : null; }, ec = function(a, b) { return a.getAttribute && g(a.getAttribute("ce202")) && r(a) == b ? a : g(a.previousSibling) ? ec(a.previousSibling, b) : null; }, wa = function(a) {
                    return !g(a) ? null : g(a.getAttribute) && g(a.getAttribute("ce202")) && (r(a) == elementType.Field || elementType.Function && M(a) == functionType.Name) ? a : g(a.previousSibling) ?
                        wa(a.previousSibling) : null;
                }, xb = function(a, b) { return !g(a) ? null : g(a.getAttribute) && g(a.getAttribute("ce202")) && r(a) == b ? a : g(a.nextSibling) ? xb(a.nextSibling, b) : null; }, cc = function(a) { return a.getAttribute && g(a.getAttribute("ce202")) && r(a) != elementType.HtmlTag ? a : g(a.nextSibling) ? cc(a.nextSibling) : null; }, Aa = function(a) { return wb(a) ? a : g(a.previousSibling) ? Aa(a.previousSibling) : null; }, Ya = function(a) { return wb(a) ? a : g(a.nextSibling) ? Ya(a.nextSibling) : null; }, Xa = function(a, b) {
                    if (!g(a)) return null;
                    var d = M(a);
                    return d == functionType.End ?
                        null : d == functionType.Param && ca(a) == b ? a : g(a.nextSibling) ? Xa(a.nextSibling, b) : null;
                }, nc = function() {
                    N = [];
                    var a = new d.Menu.Item;
                    a.ID = "ceEval";
                    a.Name = f.els.lbl.y;
                    N.push(a);
                    g(f.els.lbl.x) && (a = new d.Menu.Item, a.ID = "ceExec", a.Name = f.els.lbl.x, N.push(a));
                    for (var b in f.els.rls) a = new d.Menu.Item, a.ID = f.els.rls[b].v || f.els.rls[b].ID, a.Name = f.els.rls[b].n || f.els.rls[b].Name, N.push(a);
                }, Ca = function(a, d) {
                    if (!d) {
                        var e = tb(a, functionType.Name);
                        D = e.id;
                        b = x(e);
                    }
                    b = b.nextSibling;
                }, x = function(a) {
                    if (g(D)) {
                        var d = document.getElementById(D);
                        g(d) && (d.className =
                            d.className.replace(" " + f.currentBg, ""));
                    }
                    g(b) && (b.className = b.className.replace(" " + f.currentBg, "").replace(" " + f.highlightBg, ""));
                    -1 == a.className.indexOf(f.currentBg) && (a.className = a.className + " " + f.currentBg);
                    return a;
                }, ma = function(a) { return (r(a) == elementType.Function || r(a) == elementType.Action) && (M(a) == functionType.Name || M(a) == functionType.End) ? (a = ba(a), !g(a) || !g(a.ps) ? !0 : 0 == a.ps.length) : !1; }, wb = function(a) { return a.getAttribute && g(a.getAttribute("ce202")) ? (a = r(a), a != elementType.Tab && a != elementType.NewLine && a != elementType.HtmlTag) : !1; }, va = function(a, b, d, f) {
                    return a == elementType.Value &&
                        (b == operatorType.String || b == operatorType.Numeric) || a == elementType.Calculation && d == calculationType.Number || (a == elementType.Function || a == elementType.Action) && f == inputType.Input && (b == operatorType.String || b == operatorType.Numeric);
                }, oa = function(a) { return 31 < a && 40 > a || 41 < a && 60 > a || 61 == a || 63 < a && 91 > a || 96 < a && 123 > a || 222 < a; }, Bc = function() {
                    var a = za(), b;
                    for (b in a)
                        switch (r(a[b])) {
                        case elementType.Clause:
                        case elementType.Function:
                        case elementType.Field:
                        case elementType.Operator:
                        case elementType.Value:
                        case elementType.Action:
                        case elementType.LeftParenthesis:
                        case elementType.RightParenthesis:
                        case elementType.Calculation:
                            return !0;
                        }
                    return !1;
                }, pc = function() {
                    try {
                        window.clearInterval(Hb);
                    } catch(a) {
                    }
                    Hb = null;
                },
            Tc = function() {
                g(B) && Ra();
                if (va(r(b), ca(b), V(b), ga(b)) && g(b.getAttribute("ce207"))) {
                    b.className = b.className.replace(" " + f.currentBg, "");
                    if (g(b) && g(A)) {
                        var a = d.Client.browser == d.Client.type.Firefox ? 3 : 2, j = r(b), n = ca(b);
                        if (j == elementType.Value) n == operatorType.String ? a += ib : n == operatorType.Numeric && (a += Za);
                        else if (j == elementType.Calculation && V(b) == calculationType.Number) a = Za + 2;
                        else if ((j == elementType.Function || j == elementType.Action) && ga(b) == inputType.Input) n == operatorType.String ? a += ib : n == operatorType.Numeric && (a += Za);
                        j = pa(b);
                        A.style.left = j.x + j.width - a + "px";
                        a = 0;
                        if (d.Client.browser == d.Client.type.Firefox || d.Client.browser ==
                            d.Client.type.IE && 8 > d.Client.version && Rb) a = -2;
                        else if (d.Client.browser == d.Client.type.Chrome || jb) a = -1;
                        A.style.top = j.y + j.height / 2 - 9 + a + "px";
                    }
                    try {
                        B = window.setInterval(kd, 320);
                    } catch(l) {
                        throw Ra(), Error("CL94");
                    }
                }
            }, kd = function() {
                try {
                    window.clearInterval(B);
                } catch(a) {
                    throw Error("CL96");
                }
                B = null;
                A.style.display = "none" == A.style.display ? "" : "none";
                Tc();
            }, Ra = function() {
                try {
                    window.clearInterval(B);
                } catch(a) {
                    throw Error("CL97");
                }
                B = null;
                g(A) && (A.style.display = "none");
            }, Q = function() {
                Ra();
                Ub();
                g(A) && g(b) && (fa || bb(), Tc(),
                3 == n ? T.position() : 4 == n ? ia.position() : (6 == n || 8 == n) && ra());
            }, Z = function() {
                if (g(b.nextSibling)) {
                    if (f.right) {
                        var a = r(b.nextSibling);
                        return a != elementType.NewLine && a != elementType.Tab;
                    }
                    return !1;
                }
                return !0;
            }, Fb = function() {
                if (g(b.nextSibling))
                    for (b = b.nextSibling; g(b.nextSibling) && !wb(b.nextSibling);) {
                        var a = b.nextSibling;
                        targetElement.removeChild(b);
                        b = a;
                    }
                Oa();
            }, qc = function() {
                var a = ya ? 1 : 2, b = document.createElement("SPAN");
                b.id = "ceQ" + targetElement.id;
                targetElement.appendChild(b);
                b.innerHTML = '"';
                ib = pa(b).width + a;
                ya && Rb && (ib += 2);
                b.innerHTML = "]";
                Za = pa(b).width + a;
                ya && Rb && (Za +=
                    1);
                targetElement.removeChild(b);
            }, Gb = function() {
                if (!g(A)) {
                    A = document.createElement("DIV");
                    A.id = "ceR" + targetElement.id;
                    A.className = f.cursorOuter;
                    A.style.position = "absolute";
                    A.style.display = "none";
                    A.style.left = "0px";
                    A.style.top = "0px";
                    A.style.textAlign = "center";
                    A.style.width = "3px";
                    A.style.paddingLeft = "2px";
                    var a = document.createElement("DIV");
                    a.id = "ceD" + targetElement.id;
                    a.className = f.cursorInner;
                    a.style.height = "18px";
                    a.style.width = "1px";
                    A.appendChild(a);
                    document.body.appendChild(A);
                }
            }, rc = function() {
                if (ya && 8 < d.Client.version && window.Modernizr &&
                    3 > Kb) Kb++;
                else if (!b || !ya || !(8 > d.Client.version && va(r(b), ca(b), V(b), ga(b)) && g(b.getAttribute("ce207")))) ka = 0, 1 != n && 2 != n && Q(), Sc();
            }, ed = function() {
                if (G) {
                    (6 == n || 8 == n) && ra();
                    var a = r(b);
                    a != elementType.NewLine && a != elementType.Tab ? Sa(!1) : Q();
                }
            }, ra = function() {
                Jb = 0;
                w = E;
                C = [];
                ua.close();
                n = 0;
            }, wc = function() {
                targetElement.innerHTML = E;
                var a = document.createElement("SPAN");
                a.className = f.emptyColor;
                a.style.marginTop = a.style.marginLeft = a.style.marginRight = a.style.marginBottom = "0px";
                a.style.paddingBottom = "2px";
                a.style.display = "inline-block";
                a.style.whiteSpace =
                    "nowrap";
                a.style.cursor = "default";
                a.innerHTML = f.els.lbl.g;
                targetElement.appendChild(a);
                b = null;
            }, yc = function() { g(targetElement) && (targetElement.innerHTML = E, targetElement.style.color = ""); }, yb = function(a) {
                if (d.getScrollHeight() > a)
                    try {
                        window.scroll(d.getScrollWidth(), a);
                    } catch(b) {
                    }
            }, dc = function(a, b) {
                var e = d.getWindowDimensions().height, f = d.getScrollHeight();
                if (e + f < a + b)
                    try {
                        window.scroll(d.getScrollWidth(), f + (a + b - (e + f)));
                    } catch(g) {
                    }
            }, Ma = function(a) { return String(a).replace(/\\/g, "\\\\").replace(/'/g, "'").replace(/"/g, "&quot;"); }, Fa = function(a) {
                return String(a).replace(/&#92;/g,
                    "\\").replace(/&#39;/g, "'").replace(/&quot;/g, '"');
            }, Ta = function (a) {
                return a.replace("+", "$");
            }, xa = function (a, b) {
                g(b) && 0 < b.length && (a.className = aa(b));
            }, sb = function (a) {
                return "true" == a ? f.els.lbl.t : f.els.lbl.f;
            }, aa = function (a) {
                return d.defined(a) ? a : "";
            }, bb = function () {
                f.help && db(f.els.ms[jd()]);
            }, dd = function () {
                X = !1;
            }, fb = function (a) {
                return g(a) && a.getAttribute && "if" == a.getAttribute(H);
            }, za = function () {
                return d.getChildrenByTagName(targetElement, "SPAN", !1);
            }, r = function (a) {
                return parseInt(a.getAttribute("ce202"), 10);
            }, ca = function (a) {
                return parseInt(a.getAttribute("ce209"), 10);
            }, V = function(a) { return parseInt(a.getAttribute("ce203"), 10); }, M = function(a) { return parseInt(a.getAttribute("ce204"), 10); }, ga = function(a) { return parseInt(a.getAttribute("ce205"), 10); }, Vc = function(a) {
                Gb();
                return bd(a);
            }, Xc = function(a) {
                Gb();
                var d;
                if (1 == n || 2 == n) d = !0;
                else {
                    a = a.keyCode;
                    if (16 != a) {
                        var f;
                        8 != n && (46 == a && g(b.nextSibling) && (b = cc(b.nextSibling)), f = r(b), d = ca(b));
                        switch (a) {
                        case 27:
                            w = E;
                            if (8 == n) {
                                ra();
                                break;
                            }
                            6 == n ? ra() : 3 == n ? (T.hide(), n = 0) : 4 == n && (ia.hide(), n = 0);
                            break;
                        case 127:
                            w = E;
                            if (8 == n) {
                                ra();
                                break;
                            }
                            6 ==
                                n && ra();
                            if (3 == n) T.hide(), n = 0;
                            else if (4 == n) ia.hide(), n = 0;
                            else if (va(f, d, V(b), ga(b)) && g(b.getAttribute("ce207"))) break;
                            else g(b.nextSibling) ? r(b.nextSibling) == elementType.HtmlTag ? Fb() : f == elementType.NewLine ? (ja(b), ja(b), g(b.nextSibling) && (g(b.nextSibling) && r(b.nextSibling) == elementType.Tab && Fb(), b = x(g(b.nextSibling) ? b.nextSibling : b))) : fb(b) ? (b = b.nextSibling, Oa()) : (Oa(), g(b.nextSibling) && (r(b.nextSibling) == elementType.HtmlTag && Fb(), b = x(g(b.nextSibling) ? b.nextSibling : b))) : f == elementType.NewLine ? (ja(b), ja(b)) : fb(b) || Oa(), ma(b) && Ca(b);
                            break;
                        case 8:
                            w = E;
                            if (8 == n) {
                                ra();
                                break;
                            }
                            6 == n && ra();
                            3 == n ? (T.hide(), n = 0) : 4 == n ? (ia.hide(), n = 0) : (va(f, d, V(b), ga(b)) ? g(b.getAttribute("ce207")) ? (f = Ka(b), 2 < f.length ? (d = d == operatorType.String ? '"' : "]", Ka(b, f.substr(0, f.length - 2) + d), b.setAttribute(S, f.substr(1, f.length - 3)), Q()) : (la(), Q(), b = x(b))) : Qc() : g(b.previousSibling) && (!fb(b) && !fb(b.previousSibling)) && Qc(), ma(b) && Ca(b));
                        }
                    }
                    d = !1;
                }
                return d;
            }, Wc = function(a) {
                Gb();
                return cd(a);
            }, Uc = function(a) {
                Gb();
                var p = function(a) { ma(a) ? Ca(a) : b = x(a); }, t = function() {
                    var a = Xb(b, functionType.End);
                    g(a) && (b = x(a), Oa());
                }, l = function(a,
                    c) {
                    var d = ca(a), j = z(f.els.fds, c), k, l, m;
                    g(j) ? (j = j.t == elementType.Function ? j.rt : j, k = j.l, l = j.o, m = j.e, j = j.mds) : (k = !0, l = d, m = j = null);
                    var n = [], p, q;
                    for (q in f.els.fds) if (p = f.els.fds[q], !p.ir || !(g(da) && p.v == da || d != operatorType.Bool)) p.v != c && (p.t == elementType.Function ? p.rt.o == d && (p.rt.l == k && (l != operatorType.Enum || m == p.rt.e) && p.mds == j) && n.push(p) : p.o == d && (p.l == k && (l != operatorType.Enum || m == p.e) && p.mds == j) && n.push(p));
                    0 < n.length ? (P = !0, s(n, a, v, null)) : (fa = !1, d = z(f.els.fds, c), g(d) && (d.t == elementType.Function ? 0 < d.ps.length ? (b = x(a), Da(d)) : eb(d) : s(Na(d), a, Ga, null)));
                }, m = function(a,
                    c) {
                    var d = [], e, g;
                    for (g in f.els.acs) e = f.els.acs[g], e.v != c && d.push(e);
                    1 < d.length || 1 == d.length && d[0].v != c ? (P = !0, s(d, a, w, null)) : (fa = !1, d = ac(), 0 < d.length && s(d, b, bc, null));
                }, v = function(a) {
                    r(b) == elementType.Function ? t(a) : L = !0;
                    var c = z(f.els.fds, a);
                    c.t == elementType.Function ? ub(c.t, a) : (hb(c, null), Z() && s(Na(c), b, Ga, null));
                }, w = function(a) {
                    t(a);
                    ub(z(f.els.acs, a).t, a);
                };
                fa = !1;
                var u = a.target;
                g(A) && (A.style.display = "none");
                L = P = !1;
                if (g(d.getParentById(u, targetElement.id))) {
                    Ra();
                    la();
                    ka = 0;
                    if (6 == n || 8 == n) ua.close(), n = Bc() ? 0 : 2;
                    if (4 == n) ia.hide(), n = 0;
                    else if (3 ==
                        n) T.hide(), n = 0;
                    else if (2 == n || 1 == n && !g(b)) yc(), O(elementType.Flow, null, "if", f.isEval ? f.evalIf : f.execIf, null, null, null, null), b = x(b), s(sa(), b, ta, elementType.LeftParenthesis);
                    else {
                        var B = !0;
                        if (g(u.getAttribute("ce202"))) va(r(u), ca(u), V(u), ga(u)) && ga(u) != inputType.Field ? Rc(u) : p(u);
                        else {
                            var B = !1, u = za(), D, E = !1, K = d.Client.browser == d.Client.type.IE && 9 > d.Client.version ? d.getScrollHeight() : 0, G;
                            for (G in u) {
                                if (!g(u[G].nextSibling)) {
                                    p(u[G]);
                                    E = !0;
                                    break;
                                }
                                D = pa(r(u[G].nextSibling) == elementType.HtmlTag ? u[G].nextSibling.nextSibling : u[G].nextSibling);
                                if (D.y >
                                    a.offsetY + K) {
                                    p(u[G]);
                                    E = !0;
                                    break;
                                }
                            }
                            !E && 0 < u.length && p(u[u.length - 1]);
                        }
                        fa = f.clicks && g(b) && B && !g(b.getAttribute("ce207"));
                        Q();
                        n = 0;
                        if (fa) {
                            a = b.getAttribute(H);
                            switch (r(b)) {
                            case elementType.Flow:
                                "else" == a ? s(f.els.acs, b, w, null) : s(sa(), b, ta, elementType.LeftParenthesis);
                                break;
                            case elementType.Function:
                                switch (M(b)) {
                                case functionType.Param:
                                    var y = ba(b);
                                    L = P = !0;
                                    Da(y);
                                    break;
                                case functionType.Name:
                                    l(b, a);
                                    break;
                                case functionType.End:
                                    ma(b) && l(b.previousSibling, a);
                                }
                                break;
                            case elementType.Field:
                                l(b, a);
                                break;
                            case elementType.Action:
                                switch (M(b)) {
                                case functionType.Param:
                                    y = ba(b);
                                    L = P = !0;
                                    Da(y);
                                    break;
                                case functionType.Name:
                                    m(b, a);
                                    break;
                                case functionType.End:
                                    ma(b) && m(b.previousSibling, a);
                                }
                                break;
                            case elementType.Calculation:
                                var C = [];
                                switch (V(b)) {
                                case calculationType.Field:
                                    J(calculationType.Number, null, Va(operatorType.Numeric), C);
                                    l = hc(a);
                                    for (y in l) J(calculationType.Field, l[y].v, l[y].n, C);
                                    L = P = !0;
                                    s(C, b, na, null);
                                    break;
                                case calculationType.Addition:
                                    J(calculationType.Subtraction, null, "&#150;", C);
                                    J(calculationType.Multiplication, null, "&#215;", C);
                                    J(calculationType.Division, null, "&#247;", C);
                                    L = P = !0;
                                    s(C, b, na, null);
                                    break;
                                case calculationType.Subtraction:
                                    J(calculationType.Addition, null, "+", C);
                                    J(calculationType.Multiplication, null, "&#215;", C);
                                    J(calculationType.Division, null, "&#247;", C);
                                    L = P = !0;
                                    s(C, b, na, null);
                                    break;
                                case calculationType.Multiplication:
                                    J(calculationType.Addition,
                                        null, "+", C);
                                    J(calculationType.Subtraction, null, "&#150;", C);
                                    J(calculationType.Division, null, "&#247;", C);
                                    L = P = !0;
                                    s(C, b, na, null);
                                    break;
                                case calculationType.Division:
                                    J(calculationType.Addition, null, "+", C), J(calculationType.Subtraction, null, "&#150;", C), J(calculationType.Multiplication, null, "&#215;", C), L = P = !0, s(C, b, na, null);
                                }
                                break;
                            case elementType.Operator:
                                y = wa(b);
                                g(y) && (y = z(f.els.fds, y.getAttribute(H)), g(y) && (y = Na(y, a), g(y) && 0 < y.length ? (L = P = !0, s(y, b, Ga, null)) : (fa = !1, "isNull" == a || "isNotNull" == a ? s(W(), b, U, elementType.RightParenthesis) : gb(Aa(b)))));
                                break;
                            case elementType.Clause:
                                if ("then" == a) s(f.els.acs, b, Ha, null);
                                else {
                                    y =
                                        [];
                                    for (C in f.els.cls) l = f.els.cls[C], "then" != l.v && l.v != a && y.push(l);
                                    g(y) && 0 < y.length ? (L = P = !0, s(y, b, U, null)) : s(sa(), b, ta, elementType.LeftParenthesis);
                                }
                                break;
                            case elementType.Value:
                                L = P = !0, gb(Aa(b));
                            }
                            bb();
                        }
                    }
                } else 8 == n ? u.id != I.id && (ua.close(), n = 1) : (y = T.getId(), (3 != n || null == y || !g(d.getParentById(u, y))) && disposeInternal());
            }, db = function(a) { g($) && ($.innerHTML = a); };
    };
define("codeeffects.control", function(){});

/// <reference path="../src/definitions/webrule.d.ts" />
define('modules/../../codeeffects/codeeffects',["require", "exports", 'codeeffects.control'], function(require, exports, codeeffects) {
    if (codeeffects) {
    }

    CodeEffects.register('CodeEffects.Rule.Client');
    CodeEffects.register('CodeEffects.Rule.Models');
    $rule.Client.Element = function () {
    };
    $rule.Models.RuleModel = function () {
    };
    $rule.Client.ElementType = { Flow: 0, Field: 1, Function: 2, Operator: 3, Value: 4, Clause: 6, Action: 7, LeftParenthesis: 8, RightParenthesis: 9, LeftBracket: 10, RightBracket: 11, Calculation: 12, Tab: 13, NewLine: 15, HtmlTag: 16 };
    $rule.Models.OperatorType = { String: 0, Numeric: 1, Date: 2, Time: 3, Bool: 4, Enum: 6, None: 8 };
    $rule.Client.FunctionType = { Name: 0, Param: 1, Comma: 2, End: 3, None: 4 };
    $rule.Client.InputType = { Field: 0, Input: 1, None: 2 };
    $rule.Client.CalculationType = { Field: 0, LeftParenthesis: 1, RightParenthesis: 2, Multiplication: 3, Division: 4, Addition: 6, Subtraction: 7, Number: 8, None: 9 };
    CodeEffects.register('CodeEffects.Rule.Common');
    $rule.Common.ValueInputType = { Fields: 0, User: 2, All: 4 };
    $rule.Help = {
        'i101': 'Click inside of the Filter Area to begin a new filter',
        'i102': 'Click anywhere inside of the Filter Area to modify the filter',
        'i103': 'Select a field or parenthesis from the menu; hit Space Bar if it&#39;s hidden',
        'i104': 'Select an operator from the menu; hit Space Bar if it&#39;s hidden',
        'i105': 'Type the value; use Backspace to delete, Enter or Right Arrow to complete',
        'i106': 'Select calculation elements from the menu; hit Space Bar if it&#39;s hidden',
        'i107': 'Use Left Arrow to edit the value; hit Space Bar and select a field to continue',
        'i108': 'Build calculation by selecting elements; hit Space Bar if the menu is hidden',
        'i109': 'Use your mouse to pick a date',
        'i110': 'Select an action from the menu; hit Space Bar if it&#39;s hidden',
        'i111': 'Select a clause or parenthesis from the menu; hit Space Bar if it&#39;s hidden',
        'i112': 'Use Arrows, Home, End, Tab, Backspace or Delete keys to edit this filter',
        'i113': 'Hit Space Bar to insert a new value; use Right Arrow to edit existing value',
        'i114': 'Hit Space Bar to bring up the date picker',
        'i115': 'Delete the date or select a clause from the menu; hit Space Bar if it&#39;s hidden',
        'i116': 'Use your mouse to pick the time; click OK to select it',
        'i117': 'Hit Space Bar to bring up the time picker',
        'i118': 'Delete the time or select a clause from the menu; hit Space Bar if it&#39;s hidden',
        'i119': 'Select a value from the menu; hit Space Bar if it&#39;s hidden',
        'i120': 'Delete the value or select a clause from the menu; hit Space Bar if it&#39;s hidden',
        'i121': 'Use Left Arrow to edit, Backspace to delete; hit Space Bar to continue',
        'i122': 'Make your selection; hit Space Bar if the menu is hidden',
        'i123': 'Type or select the parameter&#39;s value; hit Space Bar if selection is hidden',
        'i124': 'Use arrows to navigate the filter or Delete, Backspace and Space bar to edit it',
        'i125': 'Select a flow element from the menu; hit Space Bar if it&#39;s hidden',
        'i126': 'Create a new filter or select an existing one for editing',
        'i127': 'Select a new field from the menu to replace the current one',
        'i128': 'Select a new action from the menu to replace the current one',
        'i129': 'Select a new operator from the menu to replace the current one',
        'i130': 'Select a new clause from the menu to replace the current one',
        'i131': 'Type or select a new value to replace the current one',
        'i132': 'Pick a new date or select a field from the menu to replace the current one',
        'i133': 'Pick a new time or select a field from the menu to replace the current one',
        'i134': 'Select a new value from the menu to replace the current one'
    };
    $rule.Errors = {
        'e101': 'Your browser does not allow access to clipboard. Use Internet Explorer version 7 and up.',
        'e102': 'This filter is invalid. Hover over each highlighted element for details.',
        'e107': 'The highlighted filter elements have been deleted or could not be located. Please update this filter or roll back all changes made to the source object.'
    };
});
// $rule.Context.addControl('filterControl', new $rule.Control(["filterControl", false, false, null]));

/// <reference path="../definitions/_definitions.d.ts" />
/// <reference path="../definitions/webrule.d.ts" />
/// <reference path="../definitions/jquery.d.ts" />
/// <reference path="../definitions/jqueryui.d.ts" />
/// <reference path="../definitions/kendo.web.d.ts" />
/// <reference path="../definitions/Q.d.ts" />
/// <reference path="../definitions/underscore.d.ts" />
/// <reference path="../definitions/knockout.d.ts" />
/// <reference path="../definitions/knockout.validation.d.ts" />
/// <reference path="../definitions/knockout.mapping.d.ts" />
/// <reference path="../definitions/knockout.projections.d.ts" />
/// <reference path="../definitions/breeze.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/data',["require", "exports", '../app', 'templates/data', '../../codeeffects/codeeffects'], function(require, exports, _app, templates, codeeffects) {
    if (codeeffects) {
    }

    (function (Server) {
        (function (EntitySetup) {
            function addValidationRules(entity) {
                var entityType = entity.entityType;

                if (entityType) {
                    for (var i = 0; i < entityType.dataProperties.length; i++) {
                        var property = entityType.dataProperties[i];
                        var propertyName = property.name;
                        var propertyObject = entity[propertyName];

                        var validators = [];
                        for (var u = 0; u < property.validators.length; u++) {
                            var validator = property.validators[u];
                            var nValidator = {
                                propertyName: propertyName,
                                validator: function (val, other) {
                                    var error = this.innerValidator.validate(val, { displayName: this.propertyName });
                                    this.message = error ? error.errorMessage : "";
                                    return error === null;
                                },
                                message: "",
                                innerValidator: validator
                            };
                            validators.push(nValidator);
                        }

                        propertyObject.extend({
                            validation: validators
                        });
                    }

                    for (var i = 0; i < entityType.foreignKeyProperties.length; i++) {
                        var property = entityType.foreignKeyProperties[i];
                        var propertyName = property.name;
                        var propertyObject = entity[propertyName];

                        var validators = [];
                        for (var u = 0; u < property.validators.length; u++) {
                            var validator = property.validators[u];
                            var nValidator = {
                                propertyName: propertyName,
                                validator: function (val, other) {
                                    var error = this.innerValidator.validate(val, { displayName: this.propertyName });
                                    this.message = error ? error.errorMessage : "";
                                    return error === null;
                                },
                                message: "",
                                innerValidator: validator
                            };
                            validators.push(nValidator);
                        }
                        propertyObject.extend({
                            validation: validators
                        });
                    }
                }
            }

            /** all breeze entities need to be configured to work with Jigsaw. For example to make all observable
            properties validatable with the ko.validation plugin */
            function init(entity) {
                addValidationRules(entity);
            }
            EntitySetup.init = init;
        })(Server.EntitySetup || (Server.EntitySetup = {}));
        var EntitySetup = Server.EntitySetup;

        

        

        

        /**  */
        var DataSource = (function () {
            function DataSource(options) {
                this.data = [];
                this._queryLevels = [];
                this._offlineFilters = [];
                this.page = ko.guarded();
                this._refreshEvent = new _app.Common.Event();
                /** event occurs after a query has been performed */
                this._refreshedEvent = new _app.Common.Event();
                this._errorCallback = $.Callbacks();
                this.pending = ko.observableArray();
                this.options = _.defaults(options, {
                    cacheData: true,
                    pageSize: 10
                });

                this.manager = options.manager;
                this.endPoint = options.endPoint;
                this.typeName = options.typeName;

                this.currentQuery = this.endPoint;
                if (this.typeName) {
                    this.configureEntity();
                }

                if (this.options.cacheData) {
                    if (!this.manager.metadataStore.hasMetadataFor(this.manager.serviceName)) {
                        var metadata = localStorage.getItem(this.offlineMetadataCacheKey());

                        // import the metadata before importing the entities, the metadata may be cached
                        // even if there're no entities yet, as it's determined per service address
                        this.manager.metadataStore.importMetadata(metadata);
                    }

                    // load previously cached data
                    var cachedData = localStorage.getItem(this.offlineCacheKey());
                    if (cachedData) {
                        this.manager.importEntities(cachedData);
                        this.updateNotificationsFromManager();
                    }
                }
            }
            Object.defineProperty(DataSource.prototype, "entityType", {
                get: function () {
                    return this.manager.metadataStore.getEntityType(this.typeName);
                },
                enumerable: true,
                configurable: true
            });

            DataSource.prototype.refreshed = function (handler) {
                return this._refreshedEvent.add(handler);
            };

            /** Notifies interested parties that the datasource needs to be refreshed, most likely
            because some of the queries in the query layers had changed */
            DataSource.prototype.refresh = function (handler) {
                if (handler) {
                    return this._refreshEvent.add(handler);
                } else {
                    this._refreshEvent.fire();
                    return null;
                }
            };

            /** refreshes the DataShource and returns a promise that is resolved after the operation completes */
            DataSource.prototype.update = function (mergeStrategy) {
                var defer = Q.defer(), disposable = this.refreshed(refreshedHandler);

                this.refresh();

                return defer.promise;

                function refreshedHandler() {
                    disposable.dispose();
                    defer.resolve(true);
                }
            };

            /** Extends the given breeze entity so the ko observable properties
            have validation metadata */
            DataSource.prototype.configureEntity = function () {
                var _this = this;
                var initializer = function (entity) {
                    _this.initializeEntity(entity);
                };

                this.manager.metadataStore.registerEntityTypeCtor(this.typeName, this.entityBuilder(), initializer);
            };

            /** returns a function that will be used as the type for the entities in the data source */
            DataSource.prototype.entityBuilder = function () {
                return function builder() {
                };
            };

            /** this method is executed once for each new entity arriving to the manager, should initialize it */
            DataSource.prototype.initializeEntity = function (entity) {
                EntitySetup.init(entity);
            };

            DataSource.prototype.createEntity = function (props) {
                var entity = this.manager.createEntity(this.typeName, props);

                // insert new element at the start of the array
                this.data.splice(0, 0, entity);
                return entity;
            };

            DataSource.prototype.offlineCacheKey = function () {
                return this.manager.serviceName + this.typeName;
            };

            /** cache key used to store the metadata */
            DataSource.prototype.offlineMetadataCacheKey = function () {
                return 'metadata: ' + this.manager.serviceName;
            };

            /** save the actual state of the manager in the application localStorage */
            DataSource.prototype.cacheData = function () {
                if (this.options.cacheData) {
                    // don't include the metadata in the exported string as it will be saved sepparatedly
                    localStorage.setItem(this.offlineCacheKey(), this.manager.exportEntities(null, false));
                }
            };

            DataSource.prototype.projectedQuery = function (level) {
                var endPoint = this.endPoint;

                _.each(this._queryLevels, function (queryLevel) {
                    endPoint = queryLevel(endPoint);
                });

                if (level) {
                    endPoint = level(endPoint);
                }

                endPoint = endPoint.toType(this.typeName);

                return endPoint;
            };

            DataSource.prototype.query = function (level) {
                var _this = this;
                var endPoint = this.projectedQuery(level);

                this.currentQuery = endPoint;

                return _app.ajax.connection.online().then(function (online) {
                    if (online) {
                        return _this.manager.executeQuery(endPoint).then(function (xhr) {
                            _this.data = xhr.results;
                            _this.inlineCount = xhr.inlineCount;

                            // store items on the cache after every query
                            _this.cacheData();

                            return xhr;
                        }).fail(function (e) {
                            if (_app.ajax.isOfflineError(e)) {
                                _app.ajax.connection.disconnect();
                                return _this.queryLocal(endPoint);
                            } else {
                                _this.data = [];
                                _this.inlineCount = 0;

                                // and notify interested partys of the error
                                _this._errorCallback.fire(e);

                                return {
                                    results: [],
                                    inlineCount: 0
                                };
                            }
                        }).finally(function () {
                            _this._refreshedEvent.fire();
                        });
                    } else {
                        return _this.queryLocal(endPoint);
                    }
                });
            };

            /** performs the given query in the local cache */
            DataSource.prototype.queryLocal = function (endPoint) {
                var takeCount = endPoint.takeCount, skipCount = endPoint.skipCount || 0, endPoint = endPoint.take(null).skip(null), offlineItems = this.manager.executeQueryLocally(endPoint);

                // apply offline filters
                _.each(this._offlineFilters, function (filter) {
                    return offlineItems = filter(offlineItems);
                });

                var inlineCount = offlineItems.length;

                if (takeCount) {
                    offlineItems = offlineItems.slice(skipCount, skipCount + takeCount);
                }

                this.data = offlineItems;

                return {
                    results: offlineItems,
                    inlineCount: inlineCount
                };
            };

            DataSource.prototype.onError = function (callback) {
                var _this = this;
                this._errorCallback.add(callback);

                return {
                    dispose: function () {
                        return _this._errorCallback.remove(callback);
                    }
                };
            };

            /** adds a new querylevel to the collection, it will be used to build the
            query before is sent to the server */
            DataSource.prototype.addQueryLevel = function (level, offlineFilter) {
                var _this = this;
                this._queryLevels.push(level);
                if (offlineFilter) {
                    this._offlineFilters.push(offlineFilter);
                }

                return {
                    dispose: function () {
                        _app.Utils.remove(_this._queryLevels, level);
                        if (offlineFilter) {
                            _app.Utils.remove(_this._offlineFilters, offlineFilter);
                        }
                    }
                };
            };

            DataSource.prototype.saveChanges = function (entities) {
                var _this = this;
                return _app.ajax.connection.online().then(function (online) {
                    if (online) {
                        entities = entities || _this.manager.getChanges();

                        return _this.manager.saveChanges(entities).then(function () {
                            _this.updateNotificationsFromManager();
                            _this.cacheData();
                        }).fail(function (error) {
                            // check if the request failed because the server is offline
                            // in which case just cache the data
                            if (_app.ajax.isOfflineError(error)) {
                                _app.ajax.connection.disconnect();
                                _this.updateNotificationsFromManager();
                                _this.cacheData();
                                return true;
                            } else {
                                // assume this is a server validation error and try resaving the entities without errors
                                if (error.entityErrors) {
                                    var entitiesWithErrors = _(error.entityErrors).map(function (serverError) {
                                        return serverError.entity;
                                    }), coolEntities = _.difference(entities, entitiesWithErrors);

                                    if (coolEntities.length) {
                                        // there're some entities that didn't returned any error from the server, try saving those
                                        return _this.saveChanges(coolEntities).fail(function (innerError) {
                                            if (innerError.entityErrors) {
                                                // if the cool entities also had some return both lists concatenated
                                                innerError.entityErrors = _.union(error.entityErrors, innerError);
                                            }
                                            return Q.reject(innerError);
                                        }).then(function () {
                                            return Q.reject(error);
                                        });
                                    }
                                }

                                // otherwise repeat the error
                                return Q.reject(error);
                            }
                        });
                    } else {
                        // application is offline
                        _this.updateNotificationsFromManager();
                        _this.cacheData();
                    }
                });
            };

            DataSource.prototype.rejectChanges = function () {
                this.manager.rejectChanges();
                this.pending.removeAll();
                this.cacheData();
            };

            /** syncronizes all changes with the server */
            DataSource.prototype.sync = function () {
                var _this = this;
                return this.saveChanges().then(function () {
                    // remove all pending notifications
                    _this.pending.removeAll();
                    return true;
                }).finally(function () {
                    return _this.updateCaches();
                }).fail(function () {
                    // catch all errors during sync and update the notifications
                    _this.updateNotificationsFromManager();
                    return true;
                }).then(function () {
                    return _this.refresh();
                });
            };

            DataSource.balanceArray = function (array, maxItems) {
                var numberOfSets = Math.ceil(array.length / maxItems), count = array.length / numberOfSets, result = [];

                for (var i = 0; i < numberOfSets; i++) {
                    result.push(array.slice(i * count, i < numberOfSets - 1 ? (i + 1) * count : array.length - 1));
                }

                return result;
            };

            /** performs a query against the server returning all entities in the cache,
            these get merged with any updated values */
            DataSource.prototype.updateCaches = function () {
                var _this = this;
                var entities = this.manager.getEntities(this.typeName), entitiesBalanced = DataSource.balanceArray(entities, 10), queries = _.map(entitiesBalanced, function (q) {
                    return breeze.EntityQuery.fromEntities(q);
                }), promises = _.map(queries, function (q) {
                    return _this.manager.executeQuery(q);
                });

                return Q.all(promises);
            };

            DataSource.prototype.updateNotificationsFromManager = function () {
                this.pending.removeAll();

                var entities = this.manager.getEntities(this.typeName), notifications = [];
                _.each(entities, function (entity) {
                    if (entity.entityAspect.entityState.isAdded()) {
                        notifications.push({ title: 'entity added' });
                    } else if (entity.entityAspect.entityState.isModified()) {
                        notifications.push({ title: 'entity modified' });
                    } else if (entity.entityAspect.entityState.isDeleted()) {
                        notifications.push({ title: 'entity deleted' });
                    }
                });

                // make a single update operation to improve performance
                this.pending.push.apply(this.pending, notifications);
            };

            DataSource.prototype.status = function () {
                var unchanged = 0, added = 0, deleted = 0, modified = 0, detached = 0, entities = this.manager.getEntities();

                _.each(entities, function (entity) {
                    if (entity.entityAspect.entityState.isAdded()) {
                        added = added + 1;
                    } else if (entity.entityAspect.entityState.isModified()) {
                        modified = modified + 1;
                    } else if (entity.entityAspect.entityState.isDeleted()) {
                        deleted = deleted + 1;
                    } else if (entity.entityAspect.entityState.isUnchanged()) {
                        unchanged = unchanged + 1;
                    } else if (entity.entityAspect.entityState.isDetached()) {
                        detached = detached + 1;
                    }
                });

                return {
                    added: added,
                    deleted: deleted,
                    unchanged: unchanged,
                    modified: modified,
                    detached: detached
                };
            };

            /** fetchs the metadata for the current manager if no metadata has been fetched and
            caches it after, if the cacheData option is setted. */
            DataSource.prototype.fetchMetadata = function () {
                var _this = this;
                if (!this.manager.metadataStore.hasMetadataFor(this.manager.serviceName)) {
                    // check if the metadata has been cached by other module
                    var cachedMetadata = localStorage.getItem(this.offlineMetadataCacheKey());
                    if (cachedMetadata) {
                        this.manager.metadataStore.importMetadata(cachedMetadata);
                        return Q(true);
                    } else {
                        return Metadata.ensureMetadataIsFetched(this.manager).then(function () {
                            // cache the metadata if the option is specified
                            if (_this.options.cacheData) {
                                localStorage.setItem(_this.offlineMetadataCacheKey(), _this.manager.metadataStore.exportMetadata());
                            }

                            return true;
                        });
                    }
                } else {
                    return Q(true);
                }
            };
            return DataSource;
        })();
        Server.DataSource = DataSource;

        /** This function came from the breeze source code, there is named breeze.EntityQuery._toUri,
        this is needed to replicate an OData request to a different endpoint on the server.
        Query options like filter, order by or expand can only be mapped if the entityType is specified. */
        function getQueryOptions(eq, entityType) {
            var queryOptions = {};

            var $skip = toSkipString();
            if ($skip)
                queryOptions['$skip'] = $skip;

            var $top = toTopString();
            if ($top)
                queryOptions['$top'] = $top;

            var $inlinecount = toInlineCountString();
            if ($inlinecount)
                queryOptions['$inlinecount'] = $inlinecount;

            if (entityType) {
                var $filter = toFilterString();
                if ($filter)
                    queryOptions['$filter'] = $filter;

                var $orderby = toOrderByString();
                if ($orderby)
                    queryOptions['$orderby'] = $orderby;

                var $expand = toExpandString();
                if ($expand)
                    queryOptions['$expand'] = $expand;

                var $select = toSelectString();
                if ($select)
                    queryOptions['$select'] = $select;
            }

            queryOptions = _.extend(queryOptions, eq.parameters);

            // remove undefined fields from the result object, they throw exceptions if
            // sent empty to the server
            return queryOptions;

            function toInlineCountString() {
                return eq['inlineCountEnabled'] ? "allpages" : "none";
            }

            function toSkipString() {
                var count = eq.skipCount;
                if (!count)
                    return;
                return count.toString();
            }

            function toTopString() {
                var count = eq.takeCount;
                if (count === null)
                    return;
                return count.toString();
            }

            function toFilterString() {
                var clause = eq.wherePredicate;
                if (!clause)
                    return;
                clause.validate(entityType);
                return clause['toODataFragment'](entityType);
            }

            function toOrderByString() {
                var clause = eq['orderByClause'];
                if (!clause)
                    return;
                return clause['toODataFragment'](entityType);
            }

            function toSelectString() {
                var clause = eq['selectClause'];
                if (!clause)
                    return;
                clause.validate(entityType);
                return clause['toODataFragment'](entityType);
            }

            function toExpandString() {
                var clause = eq['expandClause'];
                if (!clause)
                    return;
                return clause['toODataFragment'](entityType);
            }
        }
        Server.getQueryOptions = getQueryOptions;

        /** fetches a breeze query directly from the server.
        Why not use another EntityManager?? Because an entityManager requires to fetch metadata
        for the entities that it will handle. For simpler cases, and Many types on the server with
        no client metadata this is a better option... like the Notifications use case. */
        function fetchQuery(service, query, entityType) {
            var serviceName = service + '/' + query.resourceName, options = getQueryOptions(query, entityType);
            return _app.ajax.get(serviceName, options).then(function (data) {
                return ({ results: data.Results, inlineCount: data.InlineCount });
            });
        }
        Server.fetchQuery = fetchQuery;

        var DataSourceBase = (function () {
            function DataSourceBase(options) {
                this.options = options;
                this.data = ko.observableArray();
                this.refreshEvent = new _app.Common.Event();
                /** event occurs after a query has been performed */
                this.refreshedEvent = new _app.Common.Event();
                this._queryLevels = [];
                this.options = _.defaults(options, {
                    endPoint: new breeze.EntityQuery()
                });
            }
            DataSourceBase.prototype.replaceData = function (newData) {
                _app.Utils.replaceObservable(this.data, newData);
            };

            DataSourceBase.prototype.addQueryLevel = function (level) {
                var _this = this;
                this._queryLevels.push(level);

                return {
                    dispose: function () {
                        _app.Utils.remove(_this._queryLevels, level);
                    }
                };
            };

            /** returns an EntityQuery resulting from applying all QueryLevels to the endPoint */
            DataSourceBase.prototype.processQueryLevels = function (level) {
                var endPoint = this.options.endPoint;

                _.each(this._queryLevels, function (queryLevel) {
                    endPoint = queryLevel(endPoint);
                });

                if (level) {
                    endPoint = level(endPoint);
                }

                return endPoint;
            };

            DataSourceBase.prototype.query = function (level) {
                throw new Error('abstract: not implemented');
            };

            DataSourceBase.prototype.refreshed = function (handler) {
                if (handler) {
                    return this.refreshedEvent.add(handler);
                } else {
                    this.refreshedEvent.fire();
                    return null;
                }
            };

            /** Notifies interested parties that the datasource needs to be refreshed, most likely
            because some of the queries in the query layers had changed */
            DataSourceBase.prototype.refresh = function (handler) {
                if (handler) {
                    return this.refreshEvent.add(handler);
                } else {
                    this.refreshEvent.fire();
                    return null;
                }
            };

            /** refreshes the DataShource and returns a promise that is resolved after the operation completes */
            DataSourceBase.prototype.update = function () {
                var defer = Q.defer(), disposable = this.refreshed(refreshedHandler);

                this.refresh();

                return defer.promise;

                function refreshedHandler() {
                    disposable.dispose();
                    defer.resolve(true);
                }
            };
            return DataSourceBase;
        })();
        Server.DataSourceBase = DataSourceBase;

        /** Similar to a DataSource but works with plain JS objects, is intended to be used
        in simple modules that doesn't require big modifications to the items returned by the queries.
        And also work with services without metadata.
        Although for complex notifications having Metadata is a good idea, but that might not exist.
        So until then the notifications will be handled as plain JS objects */
        var LightDataSource = (function (_super) {
            __extends(LightDataSource, _super);
            function LightDataSource(options) {
                _super.call(this, _.defaults(options, {
                    namingConvention: breeze.NamingConvention.camelCase
                }));
            }
            LightDataSource.prototype.query = function (level) {
                var _this = this;
                var query = this.processQueryLevels(level), options = getQueryOptions(query);

                return _app.ajax.connection.online().then(function (online) {
                    if (online) {
                        return fetchQuery(_this.options.serviceName, query);
                    } else {
                        return Q.reject('application offline');
                    }
                }).then(function (result) {
                    _this.inlineCount = result.inlineCount;
                    _this.replaceData(result.results);
                    return result;
                }).fail(function (e) {
                    _this.inlineCount = 0;
                    _this.replaceData([]);
                    return { results: [], inlineCount: 0 };
                }).finally(function () {
                    _this.refreshed();
                });
            };
            return LightDataSource;
        })(DataSourceBase);
        Server.LightDataSource = LightDataSource;

        function createManager(serviceName, metadata) {
            var dataService = new breeze.DataService({ serviceName: serviceName }), manager = new breeze.EntityManager({ dataService: dataService });

            if (metadata) {
                var parsedMetadata = JSON.parse(metadata);

                // import the json metadata into the current metadataStore and add the corresponding
                // dataService so the manager knows it has metadata for this service
                manager.metadataStore.importMetadata(parsedMetadata);
                manager.metadataStore.addDataService(dataService);

                if (parsedMetadata['schema']) {
                    // for some reason breeze doesn't import any custom metadata
                    // when the query is fetched, that's why all custom metadata is
                    // extracted and injected into the metadataStore AGAIN
                    // IMPORTANT!! this might NOT be necessary for future versions of breeze
                    var customMetadata = Metadata.extractCustomMetadata(parsedMetadata);
                    manager.metadataStore.importMetadata(customMetadata, true);
                }
            }

            return manager;
        }
        Server.createManager = createManager;

        (function (Metadata) {
            /** extracts any custom metadata received from the server. this metadata can be imported
            into a metadataStore by setting the allowMerge parameter to true */
            function extractCustomMetadata(metadata) {
                return {
                    structuralTypes: _(metadata.schema.entityType).filter(function (type) {
                        return _.any(type.property, function (p) {
                            return !!p.custom;
                        });
                    }).map(function (typeMetadata) {
                        var propertiesWithCustomMetadata = _(typeMetadata.property).filter(function (property) {
                            return !!property.custom;
                        });
                        return {
                            shortName: typeMetadata.name,
                            namespace: metadata.schema.namespace,
                            dataProperties: _.map(propertiesWithCustomMetadata, function (propertyMetadata) {
                                return {
                                    name: propertyMetadata.name,
                                    description: propertyMetadata.description,
                                    custom: propertyMetadata.custom
                                };
                            })
                        };
                    })
                };
            }
            Metadata.extractCustomMetadata = extractCustomMetadata;

            function ensureMetadataIsFetched(manager) {
                return manager.metadataStore.hasMetadataFor(manager.serviceName) ? Q(true) : manager.fetchMetadata().then(function (metadata) {
                    if (!metadata.schema)
                        return;

                    // for some reason breeze doesn't import any custom metadata
                    // when the query is fetched, that's why all custom metadata is
                    // extracted and injected into the metadataStore
                    // IMPORTANT!! this might NOT be necessary for future versions of breeze
                    var customMetadata = extractCustomMetadata(metadata);
                    manager.metadataStore.importMetadata(customMetadata, true);

                    return Q.delay(true, 0);
                });
            }
            Metadata.ensureMetadataIsFetched = ensureMetadataIsFetched;
        })(Server.Metadata || (Server.Metadata = {}));
        var Metadata = Server.Metadata;

        

        /** Contains general method, these are glue code between knockout and breeze. */
        (function (Kendo) {
            // helper to map kendo operators (from grid filter dropdown) to breeze operators
            function mapOperator(kendoOperator) {
                var kendoToBreeze = {
                    'eq': 'eq',
                    'neq': 'ne',
                    'lt': 'lt',
                    'lte': 'le',
                    'gt': 'gt',
                    'gte': 'ge',
                    'startswith': 'startswith',
                    'endswith': 'endswith',
                    'contains': 'substringof'
                };
                return kendoToBreeze[kendoOperator];
            }

            var BreezeTransport = (function () {
                function BreezeTransport(options) {
                    var _this = this;
                    this.options = options;
                    /** can be used to block read operations making the transport, to resolve the previous
                    retrieved results, this is used in conjunction with the BreezeDataSource.readLocal method */
                    this.localQuery = false;
                    this.propertyPaths = {};
                    this.keyPropertyNames = keyPropertyNames(options.dataSource.entityType);
                    this.dataSource = options.dataSource;

                    this.columns = options.columns || _.map(this.dataSource.entityType.dataProperties, function (property) {
                        return property.name;
                    });

                    // store property paths to retrieve the original paths when needed
                    _.each(this.columns, function (property) {
                        var field = normalizePropertyPath(property);
                        _this.propertyPaths[field] = property;
                    });
                }
                BreezeTransport.prototype.mapEntityToJs = function (entity) {
                    var result = {};
                    _.each(this.keyPropertyNames, include);
                    _.each(this.columns, include);

                    return result;

                    function include(property) {
                        var field = normalizePropertyPath(property);
                        result[field] = getPropertyValue(entity, property);
                    }
                };

                BreezeTransport.prototype.mapToJs = function (results) {
                    var _this = this;
                    return _.map(results, function (entity) {
                        return _this.mapEntityToJs(entity);
                    });
                };

                BreezeTransport.prototype.getEntityForModel = function (model) {
                    if (model) {
                        return Kendo.findItem(model, this.options.dataSource.data, this.keyPropertyNames);
                    } else {
                        return null;
                    }
                };

                BreezeTransport.prototype.read = function (options) {
                    var _this = this;
                    if (this.localQuery) {
                        var payload = {
                            data: this.mapToJs(this.options.dataSource.data),
                            total: this.options.dataSource.inlineCount
                        };

                        options.success(payload);
                        return true;
                    }

                    var modifyQuery = function (query) {
                        var orderVal = _this.options.defaultSort, sortOps = options.data.sort, filterOps = options.data.filter;

                        // apply Sorting
                        if (sortOps && sortOps.length > 0) {
                            orderVal = ''; // reset orderBy
                            for (var i = 0; i < sortOps.length; i++) {
                                if (i > 0) {
                                    orderVal += ",";
                                }
                                orderVal += _this.propertyPaths[sortOps[i].field] + " " + sortOps[i].dir;
                            }
                        }
                        if (orderVal) {
                            query = query.orderBy(orderVal);
                        }

                        // apply filtering
                        if (filterOps && filterOps.filters.length > 0) {
                            for (var x = 0; x < filterOps.filters.length; x++) {
                                query = query.where(_this.propertyPaths[filterOps.filters[x].field], mapOperator(filterOps.filters[x].operator), filterOps.filters[x].value);
                            }
                        }

                        // apply Paging
                        if (options.data.skip) {
                            query = query.skip(options.data.skip);
                        }
                        if (options.data.take) {
                            query = query.take(options.data.take);
                        }

                        // apply Total Count
                        query = query.inlineCount(true);

                        return query;
                    };

                    this.options.dataSource.query(modifyQuery).then(function (xhr) {
                        var payload = {
                            data: _this.mapToJs(xhr.results),
                            total: xhr.inlineCount
                        };

                        options.success(payload); // notify the DataSource that the operation is complete

                        return true;
                    }).done();
                };

                BreezeTransport.prototype.create = function (options) {
                    //console.log('breeze transport CREATE', options);
                    var entity = this.options.dataSource.createEntity(options.data), payload = { data: this.mapEntityToJs(entity) };
                    options.success(payload);
                };

                BreezeTransport.prototype.update = function (options) {
                    //console.log('breeze transport UPDATE', options);
                    var originalElement = this.getEntityForModel(options.data);
                    if (originalElement) {
                        for (var property in options.data) {
                            if (originalElement[property] && ko.isObservable(originalElement[property]) && options.data[property] != null && options.data[property] != originalElement[property]()) {
                                // and set each property in the original object
                                originalElement[property](options.data[property]);
                            }
                        }
                    }
                    options.success(options);
                };

                BreezeTransport.prototype.destroy = function (options) {
                    //console.log('breeze transport DESTROY', options);
                    var originalElement = this.getEntityForModel(options.data);
                    if (originalElement) {
                        originalElement.entityAspect.setDeleted();
                    }
                    options.success(options);
                };
                return BreezeTransport;
            })();
            Kendo.BreezeTransport = BreezeTransport;

            /** serves as a gateway between Jigsaw's DataSource and KendoUI's DataSource */
            var BreezeDataSource = (function (_super) {
                __extends(BreezeDataSource, _super);
                function BreezeDataSource(options) {
                    var transportOptions = {
                        dataSource: options.dataSource,
                        defaultSort: options.defaultSort,
                        columns: options.columns
                    }, transport = new BreezeTransport(transportOptions), dataSourceOptions = _.defaults(options, {
                        transport: transport,
                        pageSize: options.dataSource.options.pageSize,
                        serverPaging: true,
                        serverSorting: true,
                        serverFiltering: true,
                        serverGrouping: false,
                        schema: {
                            model: getModel(options.dataSource.entityType)
                        }
                    });

                    dataSourceOptions.schema = _.defaults(options.schema || {}, {
                        data: "data",
                        total: "total"
                    });

                    _super.call(this, dataSourceOptions);

                    this.keyPropertyNames = Kendo.keyPropertyNames(options.dataSource.entityType);
                    this.transport = transport;

                    this.manager = options.dataSource.manager;
                }
                /** performs a read operation, but the transport will return the latest results
                that where retrieved */
                BreezeDataSource.prototype.readLocal = function () {
                    this.transport.localQuery = true;
                    this.read();
                    this.transport.localQuery = false;
                };

                BreezeDataSource.prototype.getModelForEntity = function (entity) {
                    return findItem(entity, this.data(), this.keyPropertyNames);
                };

                BreezeDataSource.prototype.getEntityForModel = function (model) {
                    return this.transport.getEntityForModel(model);
                };
                return BreezeDataSource;
            })(kendo.data.DataSource);
            Kendo.BreezeDataSource = BreezeDataSource;

            /** serves as a gateway between Jigsaw's LightDataSource and KendoUI's DataSource */
            var BreezeLightDataSource = (function (_super) {
                __extends(BreezeLightDataSource, _super);
                function BreezeLightDataSource(dataSource) {
                    _super.call(this, {
                        pageSize: 10,
                        serverPaging: true,
                        serverSorting: true,
                        serverFiltering: true,
                        serverGrouping: false,
                        schema: {
                            data: "data",
                            total: "total"
                        },
                        transport: {
                            read: function (options) {
                                var level = function (query) {
                                    query = query.orderBy(dataSource.options.defaultSort);
                                    if (options.data.skip) {
                                        query = query.skip(options.data.skip);
                                    }
                                    if (options.data.take) {
                                        query = query.take(options.data.take);
                                    }
                                    query = query.inlineCount(true);

                                    return query;
                                };

                                dataSource.query(level).then(function (xhr) {
                                    var payload = {
                                        data: xhr.results,
                                        total: xhr.inlineCount
                                    };
                                    options.success(payload); // notify the DataSource that the operation is complete
                                    return true;
                                }).done();
                            }
                        }
                    });
                    this.dataSource = dataSource;
                }
                return BreezeLightDataSource;
            })(kendo.data.DataSource);
            Kendo.BreezeLightDataSource = BreezeLightDataSource;

            function getLastPropertyName(propertyPath) {
                var index = propertyPath.lastIndexOf('.');
                if (index > 0) {
                    return propertyPath.substring(index + 1);
                } else {
                    return propertyPath;
                }
            }
            Kendo.getLastPropertyName = getLastPropertyName;

            /** returns the value of a property, tracking a property path */
            function getPropertyValue(entity, propertyPath) {
                if (!propertyPath) {
                    throw new Error('the property path must be specified to be able to retrieve its value from an entity');
                }

                var property = propertyPath.split('.', 1)[0], remainingPath = propertyPath.substring(property.length + 1), value = ko.unwrap(entity[property]);

                if (!remainingPath) {
                    return value;
                } else {
                    return getPropertyValue(value, remainingPath);
                }
            }
            Kendo.getPropertyValue = getPropertyValue;

            /** returns the type of a property, tracking a property path */
            function getPropertyInfo(entityType, propertyPath) {
            }
            Kendo.getPropertyInfo = getPropertyInfo;

            function typeString(type) {
                switch (type) {
                    case breeze.DataType.Binary:
                        return "string";
                    case breeze.DataType.Boolean:
                        return "boolean";
                    case breeze.DataType.Byte:
                        return "number";
                    case breeze.DataType.DateTime:
                        return "date";
                    case breeze.DataType.Decimal:
                        return "number";
                    case breeze.DataType.Double:
                        return "number";
                    case breeze.DataType.Guid:
                        return "string";
                    case breeze.DataType.Int16:
                        return "number";
                    case breeze.DataType.Int32:
                        return "number";
                    case breeze.DataType.Int64:
                        return "number";
                    case breeze.DataType.Single:
                        return "number";
                    case breeze.DataType.String:
                        return "string";
                }
            }
            Kendo.typeString = typeString;

            function propertyHasValidatorWithName(property, validatorName) {
                return _.any(property.validators, function (validator) {
                    return validator['name'] === validatorName;
                });
            }

            /** builds a validation object from the set of validators for the given property */
            function getKendoValidatorOptionsForProperty(property) {
                var validation = {};

                _.each(property.validators, function (validator, i) {
                    var validatorName = 'breezevalidator' + i;

                    function validate(input) {
                        var value = input.val(), error = validator.validate(value, { displayName: property.name });

                        if (error) {
                            $(input).attr('data-' + validatorName + '-msg', error.errorMessage);
                        }

                        return error === null;
                    }

                    validation[validatorName] = validate;
                });

                return validation;
            }

            /** returns a kendo Model from a breeze's IStructuralType */
            function getModel(entityType) {
                var fields = {};

                _.each(entityType.dataProperties, function (property) {
                    var type = Kendo.typeString(property.dataType);
                    if (type) {
                        fields[property.nameOnServer] = {
                            type: type,
                            validation: getKendoValidatorOptionsForProperty(property),
                            defaultValue: property.defaultValue
                        };
                    }
                });

                return {
                    id: keyPropertyNames(entityType)[0],
                    fields: fields
                };
            }
            Kendo.getModel = getModel;

            function normalizePropertyPath(propertyPath) {
                return propertyPath.replace(/\./g, '');
            }
            Kendo.normalizePropertyPath = normalizePropertyPath;

            function refreshWhenSave(dataSource, manager) {
                var key = manager.hasChangesChanged.subscribe(managerHasChangesChanged), previousValue = false;

                return {
                    dispose: function () {
                        manager.hasChangesChanged.unsubscribe(key);
                    }
                };

                function managerHasChangesChanged(e) {
                    // when has changes goes from false -> true, means that a save operation has been performed
                    // in which case the grid data must be refreshed
                    if (previousValue && !e.hasChanges) {
                        // force a new read operation
                        dataSource.read();
                        //  if a new element is added then a request to the server must be made
                        // to determine if the added element belongs to the current page (being displayed
                        // on the grid.
                    }

                    previousValue = e.hasChanges;
                }
            }
            Kendo.refreshWhenSave = refreshWhenSave;

            /** creates an array with the column specification from a breeze IStructuralType */
            function getColumns(entityType, columns) {
                return _.map(columns, function (field) {
                    // only retrieve the columns passed as strings, if a column spec is passed
                    // just return it
                    if (!_.isString(field))
                        return field;

                    // check if the field includes the column template
                    // that is passed as FieldName: template string
                    var templateOptions = {}, kendoColumn, index = field.indexOf(":");
                    if (index >= 0) {
                        templateOptions = JSON.parse(field.substring(index + 1));
                        field = field.substring(0, index);
                    }

                    var property = entityType.getProperty(field);
                    if (property) {
                        var customMetadata = property['custom'], displayName = customMetadata && customMetadata['displayName'], columnField = normalizePropertyPath(field), columnTitle = displayName || getLastPropertyName(field);

                        kendoColumn = { field: columnField, title: columnTitle };
                    } else {
                        // The specified property may not be part of the metadata, as it might be a calculated
                        // property setted on the client side on the entity constructor
                        kendoColumn = {
                            field: field, groupable: false, filterable: false, sortable: false
                        };
                    }

                    _.defaults(kendoColumn, {
                        nameOnServer: field,
                        template: templateOptions.template && _.template(templateOptions.template)
                    }, templateOptions);

                    return kendoColumn;
                });
            }
            Kendo.getColumns = getColumns;

            /** returns a filtered list with the properties that are part of a key */
            function keyProperties(entityType) {
                return _(entityType.dataProperties).filter(function (property) {
                    return property.isPartOfKey;
                });
            }
            Kendo.keyProperties = keyProperties;

            /** returns the name of each one of the properties that are part of a key */
            function keyPropertyNames(entityType) {
                return _(keyProperties(entityType)).map(function (property) {
                    return property.nameOnServer;
                });
            }
            Kendo.keyPropertyNames = keyPropertyNames;

            /** given a raw version of aone of the items in the collection, this function returns
            the proper item in the collection. */
            function findItem(item, collection, properties) {
                return _(collection).find(function (entity) {
                    return _(properties).all(function (property) {
                        return ko.unwrap(item[property]) === ko.unwrap(entity[property]);
                    });
                });
            }
            Kendo.findItem = findItem;

            function bindPage(observable, pager) {
                // only change the page if the current item can be unselected from the observable
                return pager.pageObservable.guard(function () {
                    return observable.inject(null);
                });
            }
            Kendo.bindPage = bindPage;

            var KendoPager = (function (_super) {
                __extends(KendoPager, _super);
                /** when a page is changed it will trigger requests to the server to fetch that
                page's items. These requests are made through Kendo's UI DataSource, and is requested
                that a page changed event is cancelled without making any requests.
                For those reasons is better to have direct control over the GuardedObservable instance
                that represents the page, and decide here in this control when to make the request. */
                function KendoPager(element, pageObservable, options) {
                    var _this = this;
                    _super.call(this, element, options);
                    this.pageObservable = pageObservable;

                    this._disposable = pageObservable.prepare(function (page) {
                        var dataRefreshed = _app.Utils.waitForEvent(_this.dataSource, 'change');
                        _super.prototype.page.call(_this, page);
                        return dataRefreshed;
                    });
                }
                KendoPager.prototype.page = function (index) {
                    if (index != undefined) {
                        this.pageObservable(parseInt(index));
                    } else {
                        return _super.prototype.page.call(this, index);
                    }
                };

                KendoPager.prototype.destroy = function () {
                    _super.prototype.destroy.call(this);

                    this._disposable.dispose();
                };
                return KendoPager;
            })(kendo.ui.Pager);
            Kendo.KendoPager = KendoPager;

            ko.bindingHandlers['breezeKendoPager'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = valueAccessor();

                    if (value.dataSource instanceof LightDataSource) {
                        var dataSource = new BreezeLightDataSource(value.dataSource), pagerOptions = { dataSource: dataSource, buttonCount: 5 }, pager = new kendo.ui.Pager(element, pagerOptions), disposable = value.dataSource.refresh(function () {
                            return dataSource.read();
                        });

                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                            disposable.dispose();
                            pager.destroy();
                        });
                    } else {
                        throw new Error('not supported for other datasources');
                    }

                    return { 'controlsDescendantBindings': true };
                }
            };
        })(Server.Kendo || (Server.Kendo = {}));
        var Kendo = Server.Kendo;
    })(exports.Server || (exports.Server = {}));
    var Server = exports.Server;

    (function (Knockout) {
        // configure KO validation plugin
        ko.validation.init({
            parseInputAttributes: true,
            errorsAsTitle: false,
            errorsAsTitleOnModified: false,
            decorateElement: true,
            insertMessages: false,
            writeInputAttributes: false
        });

        function displayName(propertyInfo) {
            return (propertyInfo.custom && propertyInfo.custom.displayName) || propertyInfo.name;
        }

        function description(propertyInfo) {
            return (propertyInfo.custom && propertyInfo.custom.description) || propertyInfo.description;
        }

        function getDisplayName(entityType, propertyName) {
            var propertyInfo = entityType.getProperty(propertyName);
            return propertyInfo ? displayName(propertyInfo) : propertyName;
        }

        ko.bindingHandlers['label'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), value = ko.unwrap(valueAccessor()), propertyName = _.isString(valueAccessor()) ? value : $element.text(), entityType = viewModel.entityType, propertyInfo = entityType.getProperty(propertyName), label = displayName(propertyInfo);

                $element.text(label);

                if (_.any(propertyInfo.validators, function (validator) {
                    return validator.name === 'required';
                })) {
                    // for required fields add a star before the field so it get's marked
                    $(templates.RequiredStar()).insertAfter(element);
                }
            }
        };

        ko.bindingHandlers['field'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), value = valueAccessor(), propertyName = value.property, entityType = viewModel.entityType, propertyInfo = entityType.getProperty(propertyName), isRequired = value.required || _.any(propertyInfo.validators, function (validator) {
                    return validator.name === 'required';
                }), readOnly = bindingContext[ErrorTrack.readOnlyTreeBindingInfo.contextKey] || false, readOnlyValue = (typeof readOnly === 'boolean') ? readOnly : readOnly(), template = (readOnlyValue) ? templates.FieldReadOnly : templates.Field;

                _app.Knockout.renderTemplateAsync(element, template({
                    property: propertyName,
                    label: value.label || displayName(propertyInfo),
                    description: value.description || description(propertyInfo),
                    required: isRequired,
                    validatable: ko.validation.utils.isValidatable(bindingContext.$data[propertyName])
                }), bindingContext);

                return { controlsDescendantBindings: true };
            },
            preprocess: function (value, name) {
                if (value.indexOf('{') < 0) {
                    // pass the property name as a string
                    return "{ property: '" + value + "' }";
                } else {
                    return value;
                }
            }
        };

        (function (_ColumnChooser) {
            _ColumnChooser.COLUMNCHOOSER = 'column-chooser';

            var ColumnChooser = (function () {
                function ColumnChooser(name, field, grid) {
                    this.name = name;
                    this.field = field;
                    var column = _.find(grid.columns, function (c) {
                        return c.field === field;
                    }), isHidden = (typeof column.hidden === 'undefined') ? false : column.hidden;

                    this.visible = ko.observable(!isHidden);

                    this.visible.subscribe(function (x) {
                        if (x) {
                            grid.showColumn(field);
                        } else {
                            grid.hideColumn(field);
                        }
                    });
                }
                ColumnChooser.prototype.dispose = function () {
                };
                return ColumnChooser;
            })();
            _ColumnChooser.ColumnChooser = ColumnChooser;

            var GridColumnChooserViewModel = (function () {
                function GridColumnChooserViewModel(activeColumns, grid) {
                    this.columns = ko.observableArray();
                    this._trash = new _app.Common.Trash();
                    var columns = this.columns.filter(function (c) {
                        return c.visible();
                    }).map(function (c) {
                        return c.field;
                    }), subscription = columns.subscribe(function (active) {
                        // replace the active columns in the observable
                        _app.Utils.replaceObservable(activeColumns, active);
                    });

                    this._trash.recycle(subscription, columns);

                    grid && this.load(grid);
                }
                GridColumnChooserViewModel.prototype.load = function (grid) {
                    _app.Utils.replaceObservable(this.columns, _(grid.options.columns).map(function (x) {
                        return new ColumnChooser(x.title, x.field, grid);
                    }));
                };

                GridColumnChooserViewModel.prototype.removeAll = function () {
                    var items = this.columns.removeAll();
                    _.forEach(items, function (item) {
                        return item.dispose();
                    });
                };

                GridColumnChooserViewModel.prototype.dispose = function () {
                    this.removeAll();
                    this._trash.dispose();
                };
                return GridColumnChooserViewModel;
            })();
            _ColumnChooser.GridColumnChooserViewModel = GridColumnChooserViewModel;

            /** finds the closest grid and renders a column chooser for it */
            ko.bindingHandlers['gridColumnChooser'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = valueAccessor(), columnChooser = new GridColumnChooserViewModel(options.activeColumns);
                    _app.Knockout.renderTemplateAsync(element, templates.ColumnChooser(), columnChooser);

                    var subscription = options.gridObservable.subscribe(function (grid) {
                        if (grid) {
                            columnChooser.load(grid);
                        } else {
                            columnChooser.removeAll();
                        }
                    });

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        subscription.dispose();
                        columnChooser.dispose();
                    });

                    $(element).addClass('column-chooser');
                    return { controlsDescendantBindings: true };
                }
            };
        })(Knockout.ColumnChooser || (Knockout.ColumnChooser = {}));
        var ColumnChooser = Knockout.ColumnChooser;

        (function (Kendo) {
            /** Kendo Drag&Drop framework identifies the Dragable->Dropable relation by a string that
            is passed as the group option. The breezeKendo* bindings use this key as the default group
            for dragables and dropables */
            var DRAGGROUP = 'data-grid-row';

            function makeKendoGrid(element, options) {
                var entityType = options.dataSource.entityType, manager = options.dataSource.manager, dataSourceOptions = {
                    dataSource: options.dataSource,
                    defaultSort: options.defaultSort,
                    columns: _.chain(options.columns).map(function (c) {
                        return c.nameOnServer;
                    }).filter(function (x) {
                        return !!x;
                    }).value()
                }, dataSource = new Server.Kendo.BreezeDataSource(dataSourceOptions), gridOptions = {
                    dataSource: dataSource,
                    editable: options.inlineEditable,
                    columns: options.columns
                }, grid = new BreezeGrid(element, options.dataSource.page, gridOptions), refreshWhenSaveDisposable = Server.Kendo.refreshWhenSave(dataSource, manager), refreshDisposable = options.dataSource.refresh(function () {
                    return grid.dataSource.read();
                });

                if (options.selected) {
                    var selectedDisposable = _app.Knockout.bind({
                        from: options.selected,
                        to: grid.selectedItem,
                        forward: function (item) {
                            return item ? grid.dataSource.getModelForEntity(item) : null;
                        },
                        backward: function (item) {
                            return item ? grid.dataSource.getEntityForModel(item) : null;
                        }
                    }), pageDisposable = Server.Kendo.bindPage(options.selected, grid.pager), filtersDisposable = bindFilters(options.selected, grid);
                }

                if (options.dragHint) {
                    // set up row drag, only the selected row is dragable - the reason for this is that
                    // we need an observable with the
                    var draggable = _app.DragDrop.makeDraggable(grid.element[0], {
                        data: options.selected,
                        group: DRAGGROUP,
                        filter: "tbody > tr.k-state-selected > td:not(.k-edit-cell)",
                        wrap: true,
                        hint: options.dragHint
                    });
                }

                return {
                    widget: grid,
                    dispose: function () {
                        _app.Common.bulkDispose(refreshDisposable, refreshDisposable, selectedDisposable, pageDisposable, filtersDisposable);

                        // destroy the grid
                        grid.destroy();
                        draggable && draggable.draggable() && draggable.draggable("destroy");
                    }
                };
            }
            Kendo.makeKendoGrid = makeKendoGrid;

            ko.bindingHandlers['breezeKendoGrid'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element), options = valueAccessor(), metadataPromise = Server.Metadata.ensureMetadataIsFetched(options.dataSource.manager);

                    $element.addClass('busy');

                    metadataPromise.then(function () {
                        var builder = makeKendoGrid(element, {
                            dataSource: options.dataSource,
                            defaultSort: options.defaultSort,
                            columns: Server.Kendo.getColumns(options.dataSource.entityType, options.columns),
                            selected: options.selected,
                            pageSize: options.pageSize,
                            inlineEditable: options.inlineEditable,
                            dragHint: options.dragHint
                        });

                        if (options.widget) {
                            options.widget(builder.widget);
                        }

                        // perform cleaning operations when the node is disposed
                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                            options.widget && options.widget(null);
                            builder.dispose();
                            delete builder;
                        });

                        $element.removeClass('busy');
                    }).done();

                    return { controlsDescendantBindings: true };
                }
            };

            var BreezeGrid = (function (_super) {
                __extends(BreezeGrid, _super);
                function BreezeGrid(element, pageObservable, opt) {
                    var _this = this;
                    var options = _.defaults(opt || {}, {
                        columnMenu: false,
                        selectable: "row",
                        scrollable: true,
                        sortable: true,
                        filterable: true,
                        pageable: false,
                        navigatable: true,
                        resizable: true,
                        reorderable: true,
                        groupable: false
                    });

                    if (options.editable) {
                        options.editable = { update: true, destroy: false };

                        // add columns with buttons at the end
                        options.columns = _.union(options.columns, [{
                                command: [
                                    { name: "Delete", click: (function (e) {
                                            return _this.deleteRowEvent(e);
                                        }), className: 'grid-button-delete' },
                                    { name: "Un-Delete", click: (function (e) {
                                            return _this.unDeleteRowEvent(e);
                                        }), className: 'grid-button-undelete' }
                                ], title: "&nbsp;", width: "100px"
                            }]);
                    }

                    _super.call(this, element, options);

                    this._trash = new _app.Common.Trash();

                    // create pager after the grid
                    var pagerOptions = { dataSource: options.dataSource, buttonCount: 5 }, pagerElement = $('<div>').insertAfter(element)[0];
                    this.pager = new Server.Kendo.KendoPager(pagerElement, pageObservable, pagerOptions);

                    this.deletedElements = [];

                    this._kendoReorderable = this.wrapper.data('kendoReorderable');

                    // set up selected item observable
                    this.setupSelectedItem();

                    this._trash.recycle(this.bindEvent('save', function (e) {
                        return _this.cellValueChanged(e.container, e.model);
                    }));

                    // thanks to: http://blogs.planetsoftware.com.au/paul/archive/2013/04/10/extending-kendo-grid-functionality-with-knockout.aspx
                    var columnStateKey = 'grid-columns: ' + this.dataSource.manager.dataService.serviceName;
                    this._trash.recycle(this.attachColumnStateSaving(columnStateKey));
                    this.loadColumnState(columnStateKey);
                }
                /** set ups the selectedItem observable so the grid selected item is synced with the observable value */
                BreezeGrid.prototype.setupSelectedItem = function () {
                    var _this = this;
                    this.selectedItem = ko.observable();

                    var ignoreSync = false, disposable = this.selectedItem.subscribe(function (model) {
                        if (ignoreSync)
                            return;

                        var data = _this.dataSource.data(), index = data.indexOf(model), element = _this.tbody.children().eq(index);

                        ignoreSync = true;
                        _this.select(element);
                        ignoreSync = false;
                    });

                    this.bind('change', function () {
                        if (ignoreSync)
                            return;

                        var gridSelected = _this.select(), rawItem = _this.dataItem(gridSelected);

                        ignoreSync = true;
                        _this.selectedItem(rawItem);
                        ignoreSync = false;
                    });

                    this._trash.recycle(disposable);
                };

                /** returns the corresponding model for the given row selector */
                BreezeGrid.prototype.modelForElement = function (element) {
                    var row = $(element).closest("tr");
                    return this.dataItem(row);
                };

                /** */
                BreezeGrid.prototype.entityForElement = function (element) {
                    var model = this.modelForElement(element);
                    return this.dataSource.getEntityForModel(model);
                };

                BreezeGrid.prototype.deleteRowEvent = function (e) {
                    e.preventDefault();

                    var row = $(e.currentTarget).closest("tr"), model = this.dataItem(row);

                    if (!_.contains(this.deletedElements, model)) {
                        this.deletedElements.push(model);
                        row.addClass('row-removed');
                    }
                    this.closeCell();
                };

                BreezeGrid.prototype.unDeleteRowEvent = function (e) {
                    e.preventDefault();

                    var row = $(e.currentTarget).closest("tr"), model = this.dataItem(row);

                    if (_.contains(this.deletedElements, model)) {
                        _app.Utils.remove(this.deletedElements, model);
                        row.removeClass('row-removed');

                        // mark the entity as undeleted
                        var entity = this.dataSource.getEntityForModel(model);
                        if (entity) {
                            if (row.hasClass('row-added')) {
                                entity.entityAspect.entityState = breeze.EntityState.Added;
                            } else if (row.hasClass('row-dirty')) {
                                entity.entityAspect.setModified();
                            } else {
                                entity.entityAspect.setUnchanged();
                            }
                        }
                    }
                };

                /** cancel editing on removed cells */
                BreezeGrid.prototype.editCell = function (cell) {
                    if (!cell.closest('tr').hasClass('row-removed')) {
                        _super.prototype.editCell.call(this, cell);
                    }
                };

                BreezeGrid.prototype.cellValueChanged = function (cell, model) {
                    var row = cell.closest('tr');
                    if (row && !model.isNew() && model.dirty) {
                        row.addClass('row-dirty');
                    }
                };

                BreezeGrid.prototype.destroy = function () {
                    this._trash.dispose();
                    this.unbind('change').unbind('save');

                    // for some reason when the grid binding is disposed all data associated to the element
                    // is lost, resulting in an error when the grid is destroyed.
                    this.options.reorderable = false;

                    _super.prototype.destroy.call(this);

                    // destroy the reorderable object
                    this._kendoReorderable.destroy();

                    this.pager.destroy();
                };

                BreezeGrid.prototype.sync = function () {
                    var _this = this;
                    // syncronize all elements to be deleted, the deleted elements can always be sent
                    // to the server. These elements are a special case and they can't be threated like
                    // updated or created elements, because once an element is removed from the DataSource
                    // then it get's removed from the grid, that's why the following is delayed until now
                    _.each(this.deletedElements, function (model) {
                        _this.dataSource.remove(model);
                    });
                    this.deletedElements = [];

                    var result = Q.defer();

                    function sync() {
                        result.resolve(true);
                    }
                    this.dataSource.one('sync', sync);
                    this.dataSource.sync();

                    return result.promise;
                };

                BreezeGrid.prototype.refresh = function () {
                    var _this = this;
                    _super.prototype.refresh.apply(this, arguments);

                    // this.deletedElements = [];
                    // check the status of the entities in case some entity has been deleted
                    var entities = this.dataSource.transport.dataSource.data, selectedEntity = this.dataSource.getEntityForModel(this.selectedItem()), property, col;
                    _.each(entities, function (entity, i) {
                        var model = _this.dataSource.getModelForEntity(entity), j = _this.dataSource.indexOf(model), row = $(_this.table).find('tr').eq(j);

                        if (entity.entityAspect.entityState.isDeleted() || (model && _.contains(_this.deletedElements, model))) {
                            if (model && !_.contains(_this.deletedElements, model)) {
                                _this.deletedElements.push(model);
                            }

                            row.addClass('row-removed');
                        } else if (entity.entityAspect.entityState.isModified() || (model && model.dirty)) {
                            row.addClass('row-dirty');

                            for (property in entity.entityAspect.originalValues) {
                                // find the column corresponding to the field and add the k-dirty mark
                                _this.markDirtyCell(property, i);
                            }
                        } else if (entity.entityAspect.entityState.isAdded() || (model && model.isNew())) {
                            row.addClass('row-added');

                            _.each(entity.entityType.dataProperties, function (property) {
                                if (entity[property.name] && ko.unwrap(entity[property.name]) != property.defaultValue) {
                                    _this.markDirtyCell(property.name, i);
                                }
                            });
                        }

                        // check if the current model is the one selected and mark it on the grid
                        if (selectedEntity === entity) {
                            row.addClass('k-state-selected');
                        }

                        var models = _this.dataSource.view();
                        _.each(models, function (model, i) {
                            if (model.isNew()) {
                                $(_this.table).find('tr').eq(i).addClass('row-added');
                            }
                        });
                    });
                };

                BreezeGrid.prototype.markDirtyCell = function (property, rowIndex) {
                    for (var j = 0; j < this.columns.length; j++) {
                        if (this.columns[j].field === property) {
                            $(this.table).find('tr').eq(rowIndex).find('td').eq(j).addClass('k-dirty-cell').prepend('<span class="k-dirty"/>');
                            break;
                        }
                    }
                };

                BreezeGrid.prototype.attachColumnStateSaving = function (columnStateKey) {
                    var _this = this;
                    var colFunc = function (key) {
                        var columns = _this.columns;
                        var columnState = [];

                        for (var col = 0, length = columns.length; col < length; col++) {
                            var column = _this.columns[col];
                            var commandName = (typeof column.command === 'undefined') ? null : column.command.name;
                            columnState.push({
                                field: column.field, hidden: column.hidden,
                                width: column.width, commandName: commandName
                            });
                        }

                        localStorage.setItem(key, JSON.stringify(columnState));
                    };

                    return _app.Common.mergeDisposables(this.bindEvent("columnHide", function (e) {
                        return colFunc(columnStateKey);
                    }), this.bindEvent("columnShow", function (e) {
                        return colFunc(columnStateKey);
                    }), this.bindEvent("columnReorder", function (e) {
                        return setTimeout(function () {
                            return colFunc(columnStateKey);
                        }, 100);
                    }), this.bindEvent("columnResize", function (e) {
                        return colFunc(columnStateKey);
                    }));
                };

                BreezeGrid.prototype.loadColumnState = function (columnStateKey) {
                    var colState = JSON.parse(localStorage.getItem(columnStateKey));

                    if (colState && colState.length > 0) {
                        var visibleIndex = -1;
                        for (var i = 0; i < colState.length; i++) {
                            var column = colState[i];

                            // 1. Set correct order first as visibility and width both depend on this.
                            var existingIndex = -1;

                            if (typeof column.field !== 'undefined') {
                                existingIndex = this.findFieldIndex(column.field);
                            } else if (typeof column.commandName !== 'undefined') {
                                existingIndex = this.findCommandIndex(column.commandName);
                            }

                            if (existingIndex > -1 && existingIndex != i) {
                                this.reorderColumn(i, this.columns[existingIndex]);
                            }

                            // 2. Set visibility state
                            var isHidden = (typeof column.hidden === 'undefined') ? false : column.hidden;

                            if (isHidden) {
                                this.hideColumn(i);
                            } else {
                                this.showColumn(i);
                                ++visibleIndex;
                            }

                            // 3. Set width
                            var width = (typeof column.width === 'undefined') ? null : column.width;

                            if (width != null) {
                                this.columns[i].width = width; // This sets value, whilst rest redraws
                                this.thead.prev().find('col:eq(' + visibleIndex + ')').width(width);
                                this.table.find('>colgroup col:eq(' + visibleIndex + ')').width(width);
                            }
                        }
                    }
                };

                BreezeGrid.prototype.findFieldIndex = function (field) {
                    var existingIndex = -1;
                    for (var idx = 0; idx < this.columns.length; ++idx) {
                        if (this.columns[idx].field == field) {
                            existingIndex = idx;
                            break;
                        }
                    }
                    return existingIndex;
                };

                BreezeGrid.prototype.findCommandIndex = function (commandName) {
                    var existingIndex = -1;
                    for (var idx = 0; idx < this.columns.length; ++idx) {
                        if (typeof this.columns[idx].command !== 'undefined' && this.columns[idx].command['name'] == commandName) {
                            existingIndex = idx;
                            break;
                        }
                    }
                    return existingIndex;
                };

                BreezeGrid.prototype.bindEvent = function (event, handler) {
                    var _this = this;
                    this.bind(event, handler);

                    return {
                        dispose: function () {
                            return _this.unbind(event, handler);
                        }
                    };
                };
                return BreezeGrid;
            })(kendo.ui.Grid);
            Kendo.BreezeGrid = BreezeGrid;

            function removeTemplatesFromColumns(columns) {
                return _.map(columns, function (column) {
                    var index = column.indexOf(':');
                    return index >= 0 ? column.substring(0, index) : column;
                });
            }
            Kendo.removeTemplatesFromColumns = removeTemplatesFromColumns;

            function bindFilters(observable, grid) {
                var columns = grid.options.columns, filterable = grid.options.filterable;

                if (filterable && !grid.options.columnMenu) {
                    var filters = _.map($(grid['thead']).find("th:not(.k-hierarchy-cell,.k-group-cell)"), function (element, index) {
                        if (columns[index].filterable !== false && !columns[index].command && columns[index].field) {
                            var filterMenu = $(element).data("kendoFilterMenu");
                            if (filterMenu) {
                                filterMenu.destroy();
                            }

                            return new KendoFilter(element, {
                                dataSource: grid.dataSource,
                                values: columns[index].values
                            });
                        }
                    });

                    // to be able to set a filter the selected observable must should allow being changed
                    var disposables = _.map(filters, function (filter) {
                        return filter && filter.filterObservable.guard(function () {
                            return observable.inject(null);
                        });
                    });

                    return {
                        dispose: function () {
                            _.each(disposables, function (disposable) {
                                if (disposable) {
                                    disposable.dispose();
                                }
                            });

                            _.forEach(filters, function (filter) {
                                if (filter) {
                                    filter.destroy();
                                }
                            });
                        }
                    };
                }
            }
            Kendo.bindFilters = bindFilters;

            var KendoFilter = (function (_super) {
                __extends(KendoFilter, _super);
                function KendoFilter(element, options) {
                    var _this = this;
                    _super.call(this, element, options);
                    this.CLEARMARK = {};

                    this.filterObservable = ko.guarded();
                    this.filterObservable.guarded.subscribe(function (expression) {
                        if (expression === _this.CLEARMARK) {
                            _super.prototype.clear.call(_this);
                        } else {
                            _super.prototype.filter.call(_this, expression);
                        }
                    });
                }
                KendoFilter.prototype.filter = function (expression) {
                    this.filterObservable(expression);
                };

                KendoFilter.prototype.clear = function () {
                    this.filterObservable(this.CLEARMARK);
                };
                return KendoFilter;
            })(kendo.ui.FilterMenu);
            Kendo.KendoFilter = KendoFilter;
        })(Knockout.Kendo || (Knockout.Kendo = {}));
        var Kendo = Knockout.Kendo;

        (function (Tracks) {
            var TrackCollection = (function () {
                function TrackCollection() {
                    this._tracks = ko.observableArray();
                    this.tracks = this._tracks.filter(function (track) {
                        return !!ko.unwrap(track.message);
                    });
                }
                TrackCollection.prototype.register = function (message, navigate) {
                    var _this = this;
                    var track = {
                        message: message,
                        navigate: navigate
                    };

                    this._tracks.push(track);

                    return {
                        dispose: function () {
                            _this.remove(track);
                        }
                    };
                };

                /** adds a new track to the collection */
                TrackCollection.prototype.add = function (track) {
                    this._tracks.push(track);
                };

                /** removes a track from the collection */
                TrackCollection.prototype.remove = function (track) {
                    this._tracks.remove(track);
                };
                return TrackCollection;
            })();
            Tracks.TrackCollection = TrackCollection;

            /** all tracks registered on this collection are also added to a parent collection,
            the navigated handler is wrapped to be able to insert other handlers before and after
            the navigate is executed */
            var TuneledTrackCollection = (function (_super) {
                __extends(TuneledTrackCollection, _super);
                function TuneledTrackCollection(errorCollection, beforeNavigate, afterNavigate, tunnel) {
                    if (typeof tunnel === "undefined") { tunnel = ko.observable(true); }
                    _super.call(this);
                    this.errorCollection = errorCollection;
                    this.beforeNavigate = beforeNavigate;
                    this.afterNavigate = afterNavigate;
                    this.tunnel = tunnel;
                }
                TuneledTrackCollection.prototype.register = function (message, navigate) {
                    var _this = this;
                    // wrap the navigate handler so when it's executed a before/after handlers
                    // are also executed if they where specified
                    var wrappedMessage = ko.computed(function () {
                        return _this.tunnel() ? ko.unwrap(message) : null;
                    }), wrapedNavigate = function () {
                        if (_this.beforeNavigate) {
                            _this.beforeNavigate();
                        }

                        navigate();

                        if (_this.afterNavigate) {
                            _this.afterNavigate();
                        }
                    }, disposable1 = _super.prototype.register.call(this, message, navigate), disposable2 = this.errorCollection.register(wrappedMessage, wrapedNavigate);

                    // The handler get's registered in both collections, so both IDisposables should be disposed
                    return _app.Common.mergeDisposables(disposable1, disposable2, wrappedMessage);
                };
                return TuneledTrackCollection;
            })(TrackCollection);
            Tracks.TuneledTrackCollection = TuneledTrackCollection;

            /** the title is the string used on the summary header, it interpolate the number of errors
            using '{0}'. */
            function renderTrackSummary(element, trackCollection, options) {
                var $element = $(element);

                _app.Knockout.renderTemplateAsync(element, templates.TrackSummary(options), trackCollection);

                // trigger resize event on the target element every time the collection changes
                var disposable = trackCollection.tracks.subscribe(function () {
                    // and give some time so the DOM is updated
                    _app.Utils.async(function () {
                        return _app.Common.triggerResize($element);
                    });
                });

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    disposable.dispose();
                });

                return { controlsDescendantBindings: true };
            }
            Tracks.renderTrackSummary = renderTrackSummary;
        })(Knockout.Tracks || (Knockout.Tracks = {}));
        var Tracks = Knockout.Tracks;

        /** this function is called when an item from the validation summary is clicked, usually set's
        the focus to the target element */
        function navigateToElement(element) {
            element.select();
            // $(element).focus();
        }

        /** Contains the binding handlers needed to manage the validation framework */
        (function (ErrorTrack) {
            ErrorTrack.JIGSAWERRORCOLLECTION = '$jigsawErrorCollection';

            /**  assigns an error collection to the context under
            the field '$jigsawErrorCollection', the binding is named 'markErrorCollection'.
            Note this binding control descendant bindings so it's recommended to be used alone
            without other bindings on it's target element. */
            ko.bindingHandlers['markErrorCollection'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = ko.unwrap(valueAccessor()), collection = new Tracks.TrackCollection(), options = {};

                    options[ErrorTrack.JIGSAWERRORCOLLECTION] = collection;

                    var context = bindingContext.extend(options);
                    ko.applyBindingsToDescendants(context, element);

                    if (value.hasAny) {
                        var disposable = collection.tracks.subscribe(function (tracks) {
                            value.hasAny(tracks.length > 0);
                        });

                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                            disposable.dispose();
                        });
                    }

                    return { controlsDescendantBindings: true };
                },
                preprocess: _app.Knockout.extend.emptyBindingPreprocess
            };

            /** the $jigsawReadOnlyTree context variable added by thi *s bingins will make all
            child {value, checked} bindings to be editable only if this is true */
            ErrorTrack.readOnlyTreeBindingInfo = _app.Knockout.createContextMarkBinding('ReadOnlyTree');

            /** attach an observable to the binding context that can control wether the {value} bindings
            will show validation errors, independently of any other reason like detecting if the input
            element has been clicked. */
            ErrorTrack.forceValidationErrorsBindingInfo = _app.Knockout.createContextMarkBinding('ForceValidationErrors');

            /** takes an observable and registers it's error on the ErrorCollection available on
            the bindingContext (if any),  */
            ko.bindingHandlers['errorField'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element), observable = valueAccessor();

                    if (observable.error) {
                        var elementUnfocused = ko.observable(false), forceValidationErrorVisibility = bindingContext[ErrorTrack.forceValidationErrorsBindingInfo.contextKey], displayError = ko.computed(function () {
                            return forceValidationErrorVisibility ? elementUnfocused() || forceValidationErrorVisibility() : elementUnfocused();
                        }), markValidationError = ko.computed(function () {
                            return displayError() && !observable.isValid();
                        });

                        // if an ErrorCollection is available on the context, then register the error observable
                        if (bindingContext[ErrorTrack.JIGSAWERRORCOLLECTION]) {
                            var errorCollection = bindingContext[ErrorTrack.JIGSAWERRORCOLLECTION], errorObservable = ko.computed(function () {
                                return displayError() ? observable.error() : null;
                            }), disposable = errorCollection.register(errorObservable, function () {
                                return navigateToElement($element);
                            });
                        }

                        function elementUnfocusedHandler() {
                            elementUnfocused(true);
                        }
                        $element.blur(elementUnfocused);

                        // apply a validation-error class to the element when the observable isn't valid
                        ko.applyBindingsToNode(element, {
                            css: {
                                'validation-error': markValidationError
                            }
                        }, viewModel);

                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                            _app.Common.bulkDispose(disposable, errorObservable, markValidationError, displayError);

                            $element.unbind('blur', elementUnfocusedHandler);
                        });
                    }
                }
            };

            /** modify given binding so all validation errors get registered on the closer error collection */
            function makeBindingHandlerReportError(bindingName) {
                _app.Knockout.extend.bindingInit(bindingName, function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    ko.applyBindingsToNode(element, { errorField: valueAccessor() }, bindingContext);
                });
            }
            makeBindingHandlerReportError('value');
            makeBindingHandlerReportError('checked');

            /** rewrites the given node so if the tree is marked as readOnly the element will be
            rewritten into a <span> element with the value as it's text */
            function makeBindingHandlerReadOnlyAware(handlerName) {
                _app.Knockout.extend.bindingInit(handlerName, function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var initialReadOnly = $(element).attr('readonly');

                    // don't modify the element's readonly state if the element is already readonly
                    if (!initialReadOnly && bindingContext[ErrorTrack.readOnlyTreeBindingInfo.contextKey]) {
                        var isReadOnly = bindingContext[ErrorTrack.readOnlyTreeBindingInfo.contextKey];

                        ko.applyBindingsToNode(element, {
                            attr: { readonly: isReadOnly }
                        }, viewModel);
                    }
                });
            }
            makeBindingHandlerReadOnlyAware('value');
            makeBindingHandlerReadOnlyAware('checked');

            ko.bindingHandlers['validationSummary'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var errorCollection = bindingContext[ErrorTrack.JIGSAWERRORCOLLECTION];
                    $(element).addClass('validation-summary');
                    return Tracks.renderTrackSummary(element, errorCollection, { title: "{0} validation errors" });
                },
                preprocess: _app.Knockout.extend.emptyBindingPreprocess
            };

            /** Wrap the default Kendo TabStrip binding to add a new option to add an error collection
            which tunnels all errors to an existing parent error collection.
            Creates a new error collection for each one of the tabs, and tunnels all errors to
            the parent collection, ensuring that when the parent collection wants to navigate to a
            given error  */
            ko.bindingHandlers['tabstripErrorTunnel'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var errorCollection = bindingContext[ErrorTrack.JIGSAWERRORCOLLECTION];

                    // make tabstrip binding async
                    _app.Utils.async(function () {
                        ko.applyBindings(viewModel, $(element).find('.nav-tabs')[0]);

                        $(element).find('.tab-content > div').each(function (index, tab) {
                            var collection = new Tracks.TuneledTrackCollection(errorCollection, function () {
                                return $(element).find('.nav-tabs > li:eq(' + index + ') a').tab('show');
                            }), options = {};
                            options[ErrorTrack.JIGSAWERRORCOLLECTION] = collection;
                            var tabContext = bindingContext.extend(options);

                            ko.applyBindingsToDescendants(tabContext, tab);
                        });
                    });

                    return { controlsDescendantBindings: true };
                }
            };

            /** takes any collection of items and adds each one of them as errors to the nearest error collection.
            This binding allows to have a collection of errors on the view-model (IErrorTrack) and show each one
            of them in the context ErrorCollection; and by consecuence in the validation summary. */
            ko.bindingHandlers['feedParentErrorCollection'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    // ex: feedParentErrorCollection: collection
                    var collection = valueAccessor(), errorCollection = bindingContext[ErrorTrack.JIGSAWERRORCOLLECTION], disposable = _app.Knockout.watchObservableArray(collection, function (item) {
                        return errorCollection.add(item);
                    }, function (item) {
                        return errorCollection.remove(item);
                    });

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        disposable.dispose();
                    });
                }
            };
        })(Knockout.ErrorTrack || (Knockout.ErrorTrack = {}));
        var ErrorTrack = Knockout.ErrorTrack;

        (function (Comparison) {
            Comparison.JIGSAWDIFFCOLLECTION = '$jigsawDiffCollection';
            Comparison.JIGSAWDIFFORIGINAL = '$jigsawDiffOriginal';

            /** this should be applied on the root element of the Viewbar, when the version and errors should be handled.
            This declares the following variables in the context:
            - a TrackCollection to store all validation errors
            - another TrackCollection to store all differences between the selected version and the original
            - the original field is referenced in the context */
            ko.bindingHandlers['markVersionPagerRoot'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var value = ko.unwrap(valueAccessor()), errorCollection = new Tracks.TrackCollection(), diffCollection = new Tracks.TrackCollection(), options = {};

                    options[ErrorTrack.JIGSAWERRORCOLLECTION] = errorCollection;
                    options[Comparison.JIGSAWDIFFCOLLECTION] = diffCollection;
                    options[Comparison.JIGSAWDIFFORIGINAL] = value.current;

                    var context = bindingContext.extend(options);
                    ko.applyBindingsToDescendants(context, element);

                    if (value.hasError) {
                        var disposable = errorCollection.tracks.subscribe(function (tracks) {
                            value.hasError(tracks.length > 0);
                        });

                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                            disposable.dispose();
                        });
                    }

                    return { controlsDescendantBindings: true };
                },
                preprocess: _app.Knockout.extend.emptyBindingPreprocess
            };

            function focusElement(element) {
                _app.Utils.shake(element);
            }
            Comparison.focusElement = focusElement;

            ko.bindingHandlers['comparisonField'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element), diffCollection = bindingContext[Comparison.JIGSAWDIFFCOLLECTION], originalViewModel = bindingContext[Comparison.JIGSAWDIFFORIGINAL], entityType = viewModel.entityType;

                    if (diffCollection && originalViewModel() !== bindingContext.$data) {
                        var options = ko.unwrap(valueAccessor()), value = options.value, original = ko.unwrap(options.original());

                        if (original !== value) {
                            var label = getDisplayName(entityType, options.field), message = { field: label, original: original, value: value }, disposable = diffCollection.register(message, function () {
                                return focusElement($element);
                            });

                            $(element).html(Resig.diffString(original, value()));

                            $element.addClass('difference-field');
                        }

                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                            disposable && disposable.dispose();
                        });
                    }
                },
                preprocess: function (value, name) {
                    // transforms comparisonField: foo -> comparisonField: { value: foo, original: function(){return $jigsawDiffOriginal().foo }, field: 'foo'}
                    // the same property needs to be evaluated for the current $data and for the original object
                    var func = "function(){ var original = " + Comparison.JIGSAWDIFFORIGINAL + "(); return !original?null:original." + value + ";}";

                    // marked on the bindingContext under the key $jigsawDiffOriginal
                    return "{value:" + value + ", original: " + func + ", field:'" + value + "'}";
                }
            };

            /** extended foreach binding to show differences with the original collection  */
            ko.bindingHandlers['dforeach'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var $element = $(element), diffCollection = bindingContext[Comparison.JIGSAWDIFFCOLLECTION], originalViewModel = bindingContext[Comparison.JIGSAWDIFFORIGINAL], options = valueAccessor(), value = options.value, entityType = viewModel.entityType;

                    if (diffCollection && originalViewModel() !== bindingContext.$data) {
                        var original = options.original();

                        if (original) {
                            var allItems = _.union(value(), original()), originalLength = original().length, differences = {
                                added: 0,
                                modified: 0,
                                unchanged: 0,
                                missing: 0
                            };

                            function afterRender(domElements, data) {
                                if (_.contains(original(), data)) {
                                    if (!_.contains(value(), data)) {
                                        $(domElements).addClass('diff-item diff-item-missing');
                                        differences.missing = differences.missing + 1;
                                    } else {
                                        differences.unchanged = differences.unchanged + 1;
                                    }
                                } else {
                                    $(domElements).addClass('diff-item diff-item-added');
                                    differences.added = differences.added + 1;
                                }
                            }

                            // delegate to the foreach binding, unwrap the value of the original array as we know it's readonly
                            // for the version pager. The afterRender method will be executed one time per node/data, so it can also
                            // be used to count the differences between the arrays, saving some time
                            ko.applyBindingsToNode(element, { foreach: { data: allItems, afterRender: afterRender } }, bindingContext);

                            //differences.missing = originalLength - differences.unchanged - differences.modified;
                            if (differences.added || differences.modified || differences.missing) {
                                var field = getDisplayName(entityType, options.field), message = {
                                    field: field,
                                    original: original().length + ' [' + field.toUpperCase() + ']',
                                    value: differences.added + ' added, ' + differences.modified + ' modified, ' + differences.missing + ' missing'
                                }, disposable = diffCollection.register(message, function () {
                                    return focusElement($element);
                                });
                            }

                            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                                disposable && disposable.dispose();
                            });
                        }
                    } else {
                        // fall back to original foreach binding
                        ko.applyBindingsToNode(element, { foreach: { data: value } }, bindingContext);
                    }

                    return { controlsDescendantBindings: true };
                },
                preprocess: ko.bindingHandlers['comparisonField'].preprocess
            };

            ko.bindingHandlers['dvalue'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var diffCollection = bindingContext[Comparison.JIGSAWDIFFCOLLECTION], originalViewModel = bindingContext[Comparison.JIGSAWDIFFORIGINAL], options = valueAccessor(), value = options.value, entityType = viewModel.entityType;

                    if (diffCollection && originalViewModel() !== bindingContext.$data) {
                        // display the field as a readonly element
                        var span = $('<span>').insertBefore(element)[0];
                        $(element).remove(); // remove the original element
                        ko.applyBindingsToNode(span, {
                            comparisonField: options
                        }, bindingContext);
                    } else {
                        // fall back to original value binding
                        ko.applyBindingsToNode(element, {
                            value: value
                        }, bindingContext);
                    }

                    return { controlsDescendantBindings: true };
                },
                preprocess: ko.bindingHandlers['comparisonField'].preprocess
            };

            /** intended to mark group of fields with differences, will create a new level on the DiffCollection
            and apply the class 'has-diff' to the target element if there's any error in the group of fields */
            ko.bindingHandlers['hasDiff'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var diffCollection = bindingContext[Comparison.JIGSAWDIFFCOLLECTION];

                    var tunelDiffCollection = new Tracks.TuneledTrackCollection(diffCollection, function () {
                    }), options = {};
                    options[Comparison.JIGSAWDIFFCOLLECTION] = tunelDiffCollection;
                    var context = bindingContext.extend(options);

                    ko.applyBindingsToDescendants(context, element);
                    var hasDiff = ko.computed(function () {
                        return tunelDiffCollection.tracks().length > 0;
                    });
                    ko.applyBindingsToNode(element, { css: { 'has-diff': hasDiff } }, bindingContext);

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        hasDiff.dispose();
                    });

                    return { controlsDescendantBindings: true };
                },
                preprocess: _app.Knockout.extend.emptyBindingPreprocess
            };

            ko.bindingHandlers['diffSummary'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var errorCollection = bindingContext[Comparison.JIGSAWDIFFCOLLECTION], $element = $(element).addClass('diff-summary'), context = bindingContext.createChildContext(errorCollection);

                    _app.Knockout.renderTemplateAsync(element, templates.comparison.DiffSummary(), context);

                    // trigger resize event on the target element every time the collection changes
                    var disposable = errorCollection.tracks.subscribe(function () {
                        // and give some time so the DOM is updated
                        _app.Utils.async(function () {
                            return _app.Common.triggerResize($element);
                        });
                    });

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        disposable.dispose();
                    });

                    return { controlsDescendantBindings: true };
                },
                preprocess: _app.Knockout.extend.emptyBindingPreprocess
            };

            function makeBindingCompareField(bindingName) {
                _app.Knockout.extend.bindingPreprocess(bindingName, function (value, _, addBindingCallback) {
                    addBindingCallback('comparisonField', value);
                });
            }
            makeBindingCompareField('value');

            ko.bindingHandlers['tabstrip'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var errorCollection = bindingContext[ErrorTrack.JIGSAWERRORCOLLECTION], diffCollection = bindingContext[Comparison.JIGSAWDIFFCOLLECTION];

                    // make tabstrip binding async
                    _app.Utils.async(function () {
                        ko.applyBindings(viewModel, $(element).find('.nav-tabs')[0]);

                        var $element = $(element), tabHeaders = $element.find('.nav-tabs').children('li');

                        $element.find('.tab-content > div').each(function (index, tab) {
                            var tunelErrorCollection = new Tracks.TuneledTrackCollection(errorCollection, function () {
                                return $(element).find('.nav-tabs > li:eq(' + index + ') a').tab('show');
                            }), tunelDiffCollection = new Tracks.TuneledTrackCollection(diffCollection, function () {
                                return $(element).find('.nav-tabs > li:eq(' + index + ') a').tab('show');
                            }), options = {};
                            options[ErrorTrack.JIGSAWERRORCOLLECTION] = tunelErrorCollection;
                            options[Comparison.JIGSAWDIFFCOLLECTION] = tunelDiffCollection;
                            var tabContext = bindingContext.extend(options);

                            ko.applyBindingsToDescendants(tabContext, tab);

                            // apply difference binding to tab headers
                            var tabHeader = tabHeaders.get(index);
                            var hasErrors = ko.computed(function () {
                                return tunelErrorCollection.tracks().length > 0;
                            }), hasDiff = ko.computed(function () {
                                return tunelDiffCollection.tracks().length > 0;
                            });
                            ko.applyBindingsToNode(tabHeader, { css: { 'has-errors': hasErrors, 'has-diff': hasDiff } }, bindingContext);

                            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                                hasDiff.dispose();
                                hasErrors.dispose();
                            });
                        });
                    });

                    return { controlsDescendantBindings: true };
                },
                preprocess: _app.Knockout.extend.emptyBindingPreprocess
            };

            /** taken from http://ejohn.org/projects/javascript-diff-algorithm/ */
            var Resig;
            (function (Resig) {
                function diffString(oldString, newString) {
                    oldString = oldString.replace(/\s+$/, '');
                    newString = newString.replace(/\s+$/, '');

                    var out = diff(oldString == "" ? [] : oldString.split(/\s+/), newString == "" ? [] : newString.split(/\s+/));
                    var str = "";

                    var oSpace = oldString.match(/\s+/g);
                    if (oSpace == null) {
                        oSpace = ["\n"];
                    } else {
                        oSpace.push("\n");
                    }

                    var nSpace = newString.match(/\s+/g);
                    if (nSpace == null) {
                        nSpace = ["\n"];
                    } else {
                        nSpace.push("\n");
                    }

                    if (out.n.length == 0) {
                        for (var i = 0; i < out.o.length; i++) {
                            str += '<del>' + _.escape(out.o[i]) + oSpace[i] + "</del>";
                        }
                    } else {
                        if (out.n[0].text == null) {
                            for (newString = 0; newString < out.o.length && out.o[newString].text == null; newString++) {
                                str += '<del>' + _.escape(out.o[newString]) + oSpace[newString] + "</del>";
                            }
                        }

                        for (var i = 0; i < out.n.length; i++) {
                            if (out.n[i].text == null) {
                                str += '<ins>' + _.escape(out.n[i]) + nSpace[i] + "</ins>";
                            } else {
                                var pre = "";

                                for (newString = out.n[i].row + 1; newString < out.o.length && out.o[newString].text == null; newString++) {
                                    pre += '<del>' + _.escape(out.o[newString]) + oSpace[newString] + "</del>";
                                }
                                str += " " + out.n[i].text + nSpace[i] + pre;
                            }
                        }
                    }

                    return str;
                }
                Resig.diffString = diffString;

                function diff(o, n) {
                    var ns = new Object();
                    var os = new Object();

                    for (var i = 0; i < n.length; i++) {
                        if (ns[n[i]] == null)
                            ns[n[i]] = { rows: new Array(), o: null };
                        ns[n[i]].rows.push(i);
                    }

                    for (var i = 0; i < o.length; i++) {
                        if (os[o[i]] == null)
                            os[o[i]] = { rows: new Array(), n: null };
                        os[o[i]].rows.push(i);
                    }

                    for (var i in ns) {
                        if (ns[i].rows.length == 1 && typeof (os[i]) != "undefined" && os[i].rows.length == 1) {
                            n[ns[i].rows[0]] = { text: n[ns[i].rows[0]], row: os[i].rows[0] };
                            o[os[i].rows[0]] = { text: o[os[i].rows[0]], row: ns[i].rows[0] };
                        }
                    }

                    for (var i = 0; i < n.length - 1; i++) {
                        if (n[i].text != null && n[i + 1].text == null && n[i].row + 1 < o.length && o[n[i].row + 1].text == null && n[i + 1] == o[n[i].row + 1]) {
                            n[i + 1] = { text: n[i + 1], row: n[i].row + 1 };
                            o[n[i].row + 1] = { text: o[n[i].row + 1], row: i + 1 };
                        }
                    }

                    for (var i = n.length - 1; i > 0; i--) {
                        if (n[i].text != null && n[i - 1].text == null && n[i].row > 0 && o[n[i].row - 1].text == null && n[i - 1] == o[n[i].row - 1]) {
                            n[i - 1] = { text: n[i - 1], row: n[i].row - 1 };
                            o[n[i].row - 1] = { text: o[n[i].row - 1], row: i - 1 };
                        }
                    }

                    return { o: o, n: n };
                }
            })(Resig || (Resig = {}));
        })(Knockout.Comparison || (Knockout.Comparison = {}));
        var Comparison = Knockout.Comparison;

        /** grant focus to the target element when the binding is initialized */
        ko.bindingHandlers['focus'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var isReadonly = bindingContext[ErrorTrack.readOnlyTreeBindingInfo.contextKey], time = valueAccessor();

                // only trigger the focus on the element if the tree isn't marked as read-only
                setTimeout(function () {
                    if (!ko.unwrap(isReadonly)) {
                        $(element).focus();
                    }
                }, time);
            }
        };
    })(exports.Knockout || (exports.Knockout = {}));
    var Knockout = exports.Knockout;

    (function (Searches) {
        

        var JumpToSearch = (function () {
            function JumpToSearch(service, targetProperty, viewModel) {
                this.service = service;
                this.targetProperty = targetProperty;
                this.viewModel = viewModel;
                this.searchTerm = ko.observable('');
            }
            JumpToSearch.prototype.jump = function (value, selectedIndex, forward, showMultipleResultsMessage) {
                var _this = this;
                if (typeof forward === "undefined") { forward = true; }
                if (typeof showMultipleResultsMessage === "undefined") { showMultipleResultsMessage = true; }
                var dataSource = this.viewModel.dataSource, query = dataSource.currentQuery.skip(null).take(null), searchTerm = value || this.searchTerm(), options = {
                    '[0].Key': this.targetProperty,
                    '[0].Value': searchTerm,
                    selectedIndex: selectedIndex || dataSource.currentQuery.skipCount + _.indexOf(dataSource.data, this.viewModel.selectedItem()),
                    forward: forward
                }, result = null;

                // OData query parameters
                _.extend(options, Server.getQueryOptions(query, dataSource.entityType));

                return _app.ajax.connection.online().then(function (online) {
                    if (online) {
                        return _app.ajax.get(_this.service, options).fail(function () {
                            return _this.jumpOffline(searchTerm);
                        });
                    } else {
                        return _this.jumpOffline(searchTerm);
                    }
                }).then(function (args) {
                    result = args;
                    var nextIndex = args.Index;

                    if (nextIndex >= 0) {
                        var pageSize = dataSource.currentQuery.takeCount, page = Math.floor(nextIndex / pageSize) + 1, itemIndexInPage = nextIndex - ((page - 1) * pageSize);

                        // check if it's a new page
                        if (_this.viewModel.dataSource.page() != page) {
                            return _this.viewModel.dataSource.page.inject(page).then(function () {
                                return itemIndexInPage;
                            });
                        } else {
                            // it's the same page
                            return itemIndexInPage;
                        }
                    } else {
                        // when no results are found for the given search term the server returns -1
                        // in this case the jump promise fails and a message is shown
                        _this.viewModel.messageQueue.clear().add({
                            title: "Search",
                            body: "No results found for " + _this.targetProperty + "'" + searchTerm + "'. Plase check and try again.",
                            level: 3 /* Info */
                        });
                        return Q.reject();
                    }
                }).then(function (index) {
                    // index is the index that should be selected in the page
                    var itemToSelect = _this.viewModel.dataSource.data[index];

                    return _this.viewModel.selectedItem.inject(itemToSelect).then(function () {
                        // add the multiple results found message
                        // instead of adding a new message everytime, check if a similar JumpTo message exist
                        if (showMultipleResultsMessage && (result.HasNext || result.HasPrevious)) {
                            // TODO check that there're actually multiple results
                            //var message = <JumpToMultipleResultsMessage>_.find(this.viewModel.messageQueue.messages(), m => m instanceof JumpToMultipleResultsMessage);
                            // if the message doesn't exist or targets a different search term, then replace that message
                            //if (!message || message.searchTerm != searchTerm) {
                            var message = new JumpToMultipleResultsMessage(_this, searchTerm);
                            message.canFindPrevious(result.HasPrevious);
                            message.canFindNext(result.HasNext);

                            _this.viewModel.messageQueue.clear().add(message);
                            //}
                        }
                    });
                }).then(function () {
                    return result;
                }).fail(function () {
                    return null;
                });
            };

            JumpToSearch.prototype.jumpOffline = function (value) {
                var dataSource = this.viewModel.dataSource, query = dataSource.currentQuery.skip(null).take(null), searchTerm = decodeURI(value), queryResult = dataSource.queryLocal(query), data = queryResult.results, inlineCount = queryResult.inlineCount, nextIndex = -1, value;

                for (var i = 0; i < data.length; i++) {
                    value = data[i][this.targetProperty]();
                    if (_.isString(value) && value.indexOf(searchTerm) === 0) {
                        nextIndex = i;
                        break;
                    }
                }

                return Q({
                    Index: nextIndex,
                    HasNext: false,
                    HasPrevious: false
                });
            };

            /** this method can be safetly called from Knockout event handlers in the views,
            if the method jump is used directly then the event handlers inject undesired parameters
            such as the event args */
            JumpToSearch.prototype.quickJump = function () {
                return this.jump();
            };

            Object.defineProperty(JumpToSearch.prototype, "isActive", {
                get: function () {
                    return !!this.service && !!this.targetProperty;
                },
                enumerable: true,
                configurable: true
            });
            return JumpToSearch;
        })();
        Searches.JumpToSearch = JumpToSearch;

        /** this is the viewmodel behind the JumpTo message, when multiple items are found */
        var JumpToMultipleResultsMessage = (function () {
            function JumpToMultipleResultsMessage(jumpToSearch, searchTerm) {
                this.jumpToSearch = jumpToSearch;
                this.searchTerm = searchTerm;
                this.canFindNext = ko.observable(true);
                this.canFindPrevious = ko.observable(true);
                this.title = 'Search';
                this.body = templates.JumpToMultipleResultsMessage({ targetProperty: jumpToSearch.targetProperty, searchTerm: searchTerm });
            }
            JumpToMultipleResultsMessage.prototype.findNext = function () {
                var _this = this;
                if (this.canFindNext()) {
                    return this.jumpToSearch.jump(this.searchTerm, null, true).then(function (args) {
                        _this.canFindNext(args.HasNext);
                        _this.canFindPrevious(args.HasPrevious);
                    });
                }
                return Q(true);
            };

            JumpToMultipleResultsMessage.prototype.findPrev = function () {
                var _this = this;
                if (this.canFindPrevious()) {
                    return this.jumpToSearch.jump(this.searchTerm, null, false).then(function (args) {
                        _this.canFindNext(args.HasNext);
                        _this.canFindPrevious(args.HasPrevious);
                    });
                }
                return Q(true);
            };
            return JumpToMultipleResultsMessage;
        })();

        // register the JumpToMultipleResultsMessage template
        //_app.Jigsaw.Messages.messageTemplateSelector.candidate(templates.JumpToMultipleResultsMessage(), x => x instanceof JumpToMultipleResultsMessage);
        (function (SearchType) {
            SearchType[SearchType["None"] = 0] = "None";
            SearchType[SearchType["Simple"] = 1] = "Simple";
            SearchType[SearchType["Advanced"] = 2] = "Advanced";
        })(Searches.SearchType || (Searches.SearchType = {}));
        var SearchType = Searches.SearchType;

        var SearchManager = (function () {
            function SearchManager(viewModel) {
                var _this = this;
                this.viewModel = viewModel;
                /** returns the value of the simple search query */
                this.simpleSearchQuery = ko.observable('');
                this.searchType = ko.observable(0 /* None */);
                /** returns wheter the advanced search panel is active or not */
                this.advancedPanelActive = ko.observable(false);
                /** get's a reference to the currently active search panel, this is setted by the webRule custom binding,
                specifically for this viewModel */
                this.searchWidget = ko.observable();
                this.showInputBox = function (text) {
                    return _app.Views.smartInput({ title: '', content: text });
                };
                this.savedSearches = new SavedSearchesCollection();
                viewModel.dataSource.addQueryLevel(function (query) {
                    return _this.queryLevel(query);
                }, function (entities) {
                    return _this.filterEntities(entities);
                });

                this.simpleSearchQuery.subscribe(function () {
                    if (_this.advancedPanelActive()) {
                        _this.advancedPanelActive(false);
                    }
                });
            }
            /** used to modify the query in the datasource, it adds the search parameters */
            SearchManager.prototype.queryLevel = function (query) {
                if (this.searchType() === 1 /* Simple */) {
                    return query.withParameters({
                        simpleSearch: this.simpleSearchQuery()
                    });
                } else if (this.searchType() === 2 /* Advanced */) {
                    return query.withParameters({
                        webRule: this.searchWidget().extract()
                    });
                } else {
                    return query;
                }
            };

            SearchManager.prototype.filterEntities = function (entities) {
                var _this = this;
                var simpleSearchProperty = this.viewModel.options && this.viewModel.options.simpleSearchProperty, searchTerm = this.simpleSearchQuery();

                if (!simpleSearchProperty || this.searchType() != 1 /* Simple */)
                    return entities;

                return _(entities).filter(function (entity) {
                    var value = entity[_this.viewModel.options.simpleSearchProperty]();
                    return _.isString(value) && value.indexOf(searchTerm) === 0;
                });
            };

            /** executed to perform the search */
            SearchManager.prototype.search = function () {
                this.viewModel.messageQueue.clear();

                if (this.advancedPanelActive()) {
                    // should make an advanced search
                    this.searchType(2 /* Advanced */);
                    this.simpleSearchQuery('');
                    this.advancedPanelActive(false);
                } else if (this.simpleSearchQuery() != '') {
                    // make a simple search
                    this.searchType(1 /* Simple */);
                }

                // refresh the data source so that the query is performed again
                return this.viewModel.dataSource.update();
            };

            SearchManager.prototype.saveAndSearch = function () {
                var _this = this;
                // request a name
                return this.showInputBox('Enter a name for the search').then(function (name) {
                    // TODO post the saved search to the server to notify that it got saved
                    var serializedRule = WebRuleUtils.serializeRule(_this.searchWidget()), search = new SavedSearch(name, serializedRule, _this.viewModel.options.savedSearchesGroup);
                    _this.savedSearches.add(search);

                    return _this.search();
                });
            };

            SearchManager.prototype.reset = function () {
                this.searchType(0 /* None */);
                this.simpleSearchQuery('');
                this.advancedPanelActive(false);

                if (this.searchWidget()) {
                    this.searchWidget().clear();
                }
            };

            SearchManager.prototype.clear = function () {
                this.reset();
                this.viewModel.dataSource.refresh();
            };
            return SearchManager;
        })();
        Searches.SearchManager = SearchManager;

        var SavedSearch = (function () {
            function SavedSearch(name, ruleData, group) {
                if (typeof group === "undefined") { group = ''; }
                this.name = name;
                this.ruleData = ruleData;
                this.group = group;
            }
            return SavedSearch;
        })();
        Searches.SavedSearch = SavedSearch;

        var SavedSearchesCollection = (function (_super) {
            __extends(SavedSearchesCollection, _super);
            function SavedSearchesCollection() {
                _super.apply(this, arguments);
                /** notifies interested partys  */
                this.loadSearchInteraction = new _app.Common.InteractionRequest();
            }
            SavedSearchesCollection.prototype.find = function (name) {
                return _(this.items()).find(function (search) {
                    return search.name === name;
                });
            };

            SavedSearchesCollection.prototype.load = function (search) {
                return this.loadSearchInteraction.request({ search: search, execute: false });
            };

            SavedSearchesCollection.prototype.loadAndExecute = function (search) {
                return this.loadSearchInteraction.request({ search: search, execute: true });
            };
            return SavedSearchesCollection;
        })(_app.Collection.SetCollection);
        Searches.SavedSearchesCollection = SavedSearchesCollection;

        var WebRuleUtils;
        (function (WebRuleUtils) {
            var ElementType;
            (function (ElementType) {
                ElementType[ElementType["Flow"] = 0] = "Flow";
                ElementType[ElementType["Field"] = 1] = "Field";
                ElementType[ElementType["Function"] = 2] = "Function";
                ElementType[ElementType["Operator"] = 3] = "Operator";
                ElementType[ElementType["Value"] = 4] = "Value";
                ElementType[ElementType["Clause"] = 6] = "Clause";
                ElementType[ElementType["Action"] = 7] = "Action";
                ElementType[ElementType["LeftParenthesis"] = 8] = "LeftParenthesis";
                ElementType[ElementType["RightParenthesis"] = 9] = "RightParenthesis";
                ElementType[ElementType["LeftBracket"] = 10] = "LeftBracket";
                ElementType[ElementType["RightBracket"] = 11] = "RightBracket";
                ElementType[ElementType["Calculation"] = 12] = "Calculation";
                ElementType[ElementType["Tab"] = 13] = "Tab";
                ElementType[ElementType["NewLine"] = 15] = "NewLine";
                ElementType[ElementType["HtmlTag"] = 16] = "HtmlTag";
            })(ElementType || (ElementType = {}));

            var CalculationType;
            (function (CalculationType) {
                CalculationType[CalculationType["Field"] = 0] = "Field";
                CalculationType[CalculationType["LeftParenthesis"] = 1] = "LeftParenthesis";
                CalculationType[CalculationType["RightParenthesis"] = 2] = "RightParenthesis";
                CalculationType[CalculationType["Multiplication"] = 3] = "Multiplication";
                CalculationType[CalculationType["Division"] = 4] = "Division";
                CalculationType[CalculationType["Addition"] = 6] = "Addition";
                CalculationType[CalculationType["Subtraction"] = 7] = "Subtraction";
                CalculationType[CalculationType["Number"] = 8] = "Number";
                CalculationType[CalculationType["None"] = 9] = "None";
            })(CalculationType || (CalculationType = {}));

            var FunctionType;
            (function (FunctionType) {
                FunctionType[FunctionType["Name"] = 0] = "Name";
                FunctionType[FunctionType["Param"] = 1] = "Param";
                FunctionType[FunctionType["Comma"] = 2] = "Comma";
                FunctionType[FunctionType["End"] = 3] = "End";
                FunctionType[FunctionType["None"] = 4] = "None";
            })(FunctionType || (FunctionType = {}));

            var InputType;
            (function (InputType) {
                InputType[InputType["Field"] = 0] = "Field";
                InputType[InputType["Input"] = 1] = "Input";
                InputType[InputType["None"] = 2] = "None";
            })(InputType || (InputType = {}));

            var OperatorType;
            (function (OperatorType) {
                OperatorType[OperatorType["String"] = 0] = "String";
                OperatorType[OperatorType["Numeric"] = 1] = "Numeric";
                OperatorType[OperatorType["Date"] = 2] = "Date";
                OperatorType[OperatorType["Time"] = 3] = "Time";
                OperatorType[OperatorType["Bool"] = 4] = "Bool";
                OperatorType[OperatorType["Enum"] = 6] = "Enum";
                OperatorType[OperatorType["None"] = 8] = "None";
            })(OperatorType || (OperatorType = {}));

            /** returns a string that can be used later to re-load the rule in the control,
            calling extract returns a string that must be sent to the server for processing
            to return this string.
            Maybe a similar function will be included in WebRule's code in future versions.
            For now this function is basically a rewrite of the (decompiled) C# code on the
            server.
            IMPORTANT: This function is EXTREMELY dependant on the current version of WebRule
            it might not be correct for future versions, always review when updating to newer
            versions */
            function serializeRule(widget) {
                var result = '', ruleDataString = widget.extract(), ruleData = JSON.parse(ruleDataString);

                result += "[";

                result += "{'g':" + (ruleData.Id ? "'" + ruleData.Id + "'" : "null") + ",";
                result += "'v':" + ruleData.IsLoadedRuleOfEvalType + ",";
                result += "'n':" + (ruleData.Name ? "'" + ruleData.Name + "'" : "null") + ",";
                result += "}";

                _.each(ruleData.Elements, function (element) {
                    result += ",";
                    result += "{";

                    switch (element.Type) {
                        case 0 /* Flow */:
                        case 6 /* Clause */:
                            nullField('n');
                            stringField('v', element.Value);
                            break;
                        case 1 /* Field */:
                            nullField('n');
                            stringField('v', element.Value);
                            numericField('l', element.IsRule ? 1 : 0);
                            numericField('d', element.NotFound ? 1 : 0);
                            numericField('o', element.Oper);
                            if (element.Oper === 6 /* Enum */) {
                                stringField('e', element.En);
                            }
                            break;
                        case 2 /* Function */:
                        case 7 /* Action */:
                            nullField('n');
                            numericField('f', element.FuncType);
                            numericField('d', element.NotFound ? 1 : 0);
                            switch (element.FuncType) {
                                case 0 /* Name */:
                                case 3 /* End */:
                                    stringField('v', element.Value);
                                    numericField('o', element.Oper);
                                    break;
                                case 1 /* Param */:
                                    stringField('v', element.Value);
                                    switch (element.InpType) {
                                        case 0 /* Field */:
                                            numericField('o', element.Oper);
                                            break;
                                        case 1 /* Input */:
                                            switch (element.Oper) {
                                                case 2 /* Date */:
                                                case 3 /* Time */:
                                                    stringField('r', element.Format);
                                                    break;
                                                case 6 /* Enum */:
                                                    stringField('e', element.En);
                                                    break;
                                            }
                                            break;
                                    }
                                    break;
                            }
                            break;
                        case 3 /* Operator */:
                            nullField('n');
                            stringField('v', element.Value);
                            numericField('o', element.Oper);
                            break;
                        case 4 /* Value */:
                            nullField('n');
                            stringField('v', element.Value);
                            numericField('i', element.InpType);
                            numericField('o', element.Oper);
                            break;
                        case 8 /* LeftParenthesis */:
                        case 9 /* RightParenthesis */:
                        case 10 /* LeftBracket */:
                        case 11 /* RightBracket */:
                            nullField('n');
                            break;
                        case 12 /* Calculation */:
                            nullField('n');
                            numericField('c', element.CalType);
                            switch (element.CalType) {
                                case 0 /* Field */:
                                case 8 /* Number */:
                                    stringField('v', element.Value);
                            }
                            break;
                    }
                    numericField('t', element.Type);
                    result += "}";
                });

                result += "]";

                return result;

                function nullField(field) {
                    result += "'" + field + "': null,";
                }

                function stringField(field, value) {
                    result += "'" + field + "':'" + value + "',";
                }

                function numericField(field, value) {
                    result += "'" + field + "':" + value + ",";
                }
            }
            WebRuleUtils.serializeRule = serializeRule;

            /** I made this because CodeEffects' Rules controls lacks of a dispose mechanism,
            this may not be needed for future versions. And this is my own version of the cleaning. */
            function destroyWebRule(widget) {
                // call this just in case,
                widget.dispose();

                removeHandlersFromNode(document);
                removeHandlersFromNode(window);

                // remove filter dialog that is leaved behind
                $('#ceR_filter-container').remove();

                function removeHandlersFromNode(node) {
                    var ceEvents = node['ceEvents'];
                    for (var event in ceEvents) {
                        _(ceEvents[event]).each(function (x) {
                            return node.removeEventListener(event, x.browserHandler);
                        });
                    }
                    node['ceEvents'] = null;
                }
            }
            WebRuleUtils.destroyWebRule = destroyWebRule;
        })(WebRuleUtils || (WebRuleUtils = {}));

        (function (Knockout) {
            ko.bindingHandlers['searchInput'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    var options = valueAccessor(), cancelSearchElement = $("<span>").addClass("k-icon k-i-close search-input-close")[0], placeHolder = ko.computed(function () {
                        return options.type() === 2 /* Advanced */ ? '[Advanced Search]' : '';
                    }), searchActive = ko.computed(function () {
                        return options.type() != 0 /* None */;
                    }), cancelSearchElementVisible = ko.computed(function () {
                        return options.type() != 0 /* None */;
                    });

                    $(element).wrap("<span>").parent().append(cancelSearchElement);

                    ko.applyBindingsToNode(element, {
                        'value': options.query,
                        'pressEnter': options.search,
                        'attr': { 'placeholder': placeHolder },
                        'css': { 'search-active': searchActive }
                    }, viewModel);

                    ko.applyBindingsToNode(cancelSearchElement, { 'click': options.clear, 'visible': cancelSearchElementVisible }, viewModel);

                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        _app.Common.bulkDispose(placeHolder, searchActive, cancelSearchElementVisible);
                    });

                    return { 'controlsDescendantBindings': true };
                }
            };

            /** used to store the settings for each webrule control, so when the application
            is running there's a single request for the webRule settings */
            var webRuleSettingsCache = {};

            function makeWebRule(element, options) {
                var id = id = element.attr('id');

                var widget = new $rule.Control([id, false, false, null]);

                function loadSettings(data) {
                    widget.loadSettings(data);
                }

                if (options.settings) {
                    loadSettings(options.settings);
                } else if (options.settingsUrl) {
                    var cacheKey = 'webRuleSettings: ' + options.settingsUrl;

                    // check if the settings have been cached on a previos request
                    if (webRuleSettingsCache[options.settingsUrl]) {
                        loadSettings(webRuleSettingsCache[options.settingsUrl]);
                    } else {
                        _app.ajax.connection.online().then(function (online) {
                            if (online) {
                                return _app.ajax.get(options.settingsUrl).then(function (data) {
                                    loadSettings(data);
                                    webRuleSettingsCache[options.settingsUrl] = data;
                                    localStorage.setItem(cacheKey, data);
                                });
                            } else {
                                var data = localStorage.getItem(cacheKey);
                                if (data) {
                                    loadSettings(data);
                                }
                            }
                        }).done();
                    }
                } else {
                    throw new Error('either the settings or the settings URL must be specified for the webRule control');
                }

                return {
                    widget: widget,
                    dispose: function () {
                        try  {
                            WebRuleUtils.destroyWebRule(widget);
                        } catch (e) {
                            console.log('codeeffects dispose error captured:', e);
                        }
                    }
                };
            }
            Knockout.makeWebRule = makeWebRule;

            ko.bindingHandlers['webRule'] = {
                init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    // sometimes there's a bug here caused when the CodeEffect rule control is initialized
                    // before the target element is on the DOM, note that the Rule control receives the
                    // element's ID and searches for the target element using standard DOM api
                    var $element = $(element), value = ko.unwrap(valueAccessor()), id = $element.attr('id');

                    _app.Utils.async(function () {
                        var webRuleBuilder = makeWebRule($element, value);

                        value.widget(webRuleBuilder.widget);

                        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                            value.widget(null);
                            webRuleBuilder.dispose();
                        });
                    });

                    return { 'controlsDescendantBindings': true };
                }
            };
        })(Searches.Knockout || (Searches.Knockout = {}));
        var Knockout = Searches.Knockout;
    })(exports.Searches || (exports.Searches = {}));
    var Searches = exports.Searches;

    (function (Filters) {
        var QueryFilterManager = (function () {
            function QueryFilterManager(filter, dataSource) {
                var _this = this;
                this.filter = filter;
                this.dataSource = dataSource;
                this.parameters = ko.observableArray();
                dataSource.addQueryLevel(function (query) {
                    _.each(_this.parameters(), function (parameter) {
                        query = _this.filter(query, parameter);
                    });
                    return query;
                });
            }
            QueryFilterManager.prototype.updateFilter = function () {
                var params = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    params[_i] = arguments[_i + 0];
                }
                this.clear();
                this.parameters.push.apply(this.parameters, params);

                return this.dataSource.update();
            };

            QueryFilterManager.prototype.add = function (parameter) {
                this.parameters.push(parameter);
                return this.dataSource.update();
            };

            QueryFilterManager.prototype.remove = function (parameter) {
                this.parameters.remove(parameter);
                return this.dataSource.update();
            };

            QueryFilterManager.prototype.clear = function () {
                this.parameters.removeAll();
                return this.dataSource.update();
            };
            return QueryFilterManager;
        })();
        Filters.QueryFilterManager = QueryFilterManager;
    })(exports.Filters || (exports.Filters = {}));
    var Filters = exports.Filters;

    /** contains classes related to saving and retrieving metadata from the server */
    (function (Metadata) {
        var Manager = (function () {
            function Manager(item, builderUrl, metaUrl) {
            }
            return Manager;
        })();
        Metadata.Manager = Manager;
    })(exports.Metadata || (exports.Metadata = {}));
    var Metadata = exports.Metadata;

    (function (Wizzard) {
        var WizzardViewModel = (function (_super) {
            __extends(WizzardViewModel, _super);
            function WizzardViewModel(options) {
                var _this = this;
                _super.call(this);
                this.options = options;
                this.hasErrors = ko.observable(false);
                this.step = ko.observable(0);
                this.forceValidation = ko.observable(false);
                this.closeEvent = new _app.Common.Event();
                this.totalSteps = options.totalSteps;
                this.item = options.item || this.createDetachedEntity();

                this.canGoNext = ko.computed(function () {
                    return !_this.hasErrors() && _this.step() < _this.totalSteps;
                });
                this.canGoPrev = ko.computed(function () {
                    return !_this.hasErrors() && _this.step() > 0;
                });
                this.canFinish = ko.computed(function () {
                    return !_this.hasErrors() && _this.step() === _this.totalSteps;
                });
            }
            WizzardViewModel.prototype.dispose = function () {
                _app.Common.bulkDispose(this.canFinish, this.canGoNext, this.canGoPrev);
            };

            WizzardViewModel.prototype.createDetachedEntity = function () {
                var item = this.options.dataSource.createEntity();
                this.options.dataSource.manager.detachEntity(item);
                return item;
            };

            WizzardViewModel.prototype.moveTo = function (step) {
                this.forceValidation(true);
                if (!this.hasErrors() && step >= 0 && step <= this.totalSteps) {
                    this.forceValidation(false);
                    this.step(step);
                }
            };

            WizzardViewModel.prototype.navigate = function (step) {
                if (step < this.step()) {
                    this.moveTo(step);
                }
            };

            WizzardViewModel.prototype.nextStep = function () {
                this.moveTo(this.step() + 1);
            };

            WizzardViewModel.prototype.prevStep = function () {
                this.moveTo(this.step() - 1);
            };

            WizzardViewModel.prototype.save = function () {
                var _this = this;
                // ensure the item is attached to the manager before saving changes
                this.options.dataSource.manager.addEntity(this.item);
                return this.options.dataSource.saveChanges([this.item]).fail(function (e) {
                    _this.options.dataSource.manager.detachEntity(_this.item);
                    return Q.reject(e);
                });
            };

            WizzardViewModel.prototype.saveAndClose = function () {
                var _this = this;
                if (this.step() === this.totalSteps) {
                    return this.save().then(function () {
                        return _this.options.close();
                    });
                } else {
                    return Q.reject(new Error('wizzard is not on the last step'));
                }
            };

            WizzardViewModel.prototype.close = function () {
                var _this = this;
                return _app.Views.smartMessage({
                    title: '',
                    content: "Current item has changed, do you want to save changes?",
                    type: 0 /* Question */
                }).then(function (result) {
                    if (result === 0 /* Yes */) {
                        return _this.saveAndClose();
                    } else if (result === 1 /* No */) {
                        // just close the window, the entity is detached anyway
                        _this.options.close();
                    } else {
                        return Q.reject();
                    }
                });
            };

            WizzardViewModel.prototype.saveDraft = function () {
                if (!this.options.saveDraft)
                    throw new Error('save draft option must be specified');

                this.options.saveDraft(this.item);
                this.options.close();
            };
            return WizzardViewModel;
        })(_app.Common.ViewModelBase);
        Wizzard.WizzardViewModel = WizzardViewModel;

        /**  */
        var WizzardView = (function (_super) {
            __extends(WizzardView, _super);
            function WizzardView(options) {
                _super.call(this, options);
            }
            return WizzardView;
        })(_app.Marionette.View);
        Wizzard.WizzardView = WizzardView;

        ko.bindingHandlers['wizzardTabContent'] = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var $element = $(element), value = valueAccessor(), errorCollection = bindingContext[Knockout.ErrorTrack.JIGSAWERRORCOLLECTION], visible = ko.computed(function () {
                    return value.step() === value.index;
                }), collection = new Knockout.Tracks.TuneledTrackCollection(errorCollection, null, null, visible), tabContext = bindingContext.createChildContext(value.item), extendOptions = {};
                extendOptions[Knockout.ErrorTrack.JIGSAWERRORCOLLECTION] = collection;
                tabContext.extend(extendOptions);

                ko.applyBindingsToNode(element, {
                    visible: visible
                }, tabContext);

                $element.addClass('busy');
                var bindingsApplied = false, disposable = value.step.subscribe(function (step) {
                    // apply bindings when the step is first visited
                    if (step === value.index && !bindingsApplied) {
                        applyBindings(500);
                    }
                });

                // check if this tab is the current step, and apply bindings
                // this binding will be applied when the window is being opened, so the timeout is higher
                if (value.step() === value.index) {
                    applyBindings(1000);
                }

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    disposable.dispose();
                });

                return { 'controlsDescendantBindings': true };

                function applyBindings(timeout) {
                    if (typeof timeout === "undefined") { timeout = 500; }
                    bindingsApplied = true;
                    setTimeout(function () {
                        ko.applyBindingsToDescendants(tabContext, element);
                        $element.removeClass('busy');
                    }, timeout);
                }
            }
        };

        var WizzardDialogManager = (function () {
            function WizzardDialogManager(dataSource, wizzardViewBuilder, saveDraft) {
                this.dataSource = dataSource;
                this.wizzardViewBuilder = wizzardViewBuilder;
                this.saveDraft = saveDraft;
            }
            WizzardDialogManager.prototype.showDialog = function (item) {
                var view = this.wizzardViewBuilder(), viewModel = new WizzardViewModel({
                    item: item,
                    dataSource: this.dataSource,
                    close: closeWindow,
                    saveDraft: this.saveDraft,
                    totalSteps: view.options.totalSteps
                }), window = new _app.Views.WindowView(view.withViewModel(viewModel), { close: close, size: 2 /* LARGE */ });

                return window.showDialog();

                function closeWindow() {
                    window.close();
                    viewModel.dispose();

                    delete window;
                    delete viewModel;
                    delete view;
                }

                function close() {
                    viewModel.close();
                }
            };
            return WizzardDialogManager;
        })();
        Wizzard.WizzardDialogManager = WizzardDialogManager;
    })(exports.Wizzard || (exports.Wizzard = {}));
    var Wizzard = exports.Wizzard;

    (function (Chooser) {
        var ChooserDialogItem = (function () {
            function ChooserDialogItem(column) {
                this.column = column;
                this.active = ko.observable(true);
            }
            return ChooserDialogItem;
        })();

        var ChooserDialogViewModel = (function (_super) {
            __extends(ChooserDialogViewModel, _super);
            function ChooserDialogViewModel(options) {
                _super.call(this);
                this.options = options;
                this.cancelled = false;
                /** returns true if the title headers should be included */
                this.includeHeaders = ko.observable(true);
                this.allPages = ko.observable(true);
                this.pageFrom = ko.observable(1);
                this.pageTo = ko.observable(1);

                this.columns = _.map(options.columns, function (col) {
                    return new ChooserDialogItem(col);
                });
            }
            ChooserDialogViewModel.prototype.getActiveColumns = function () {
                return {
                    includeHeaders: this.includeHeaders(),
                    allPages: this.allPages(),
                    pageFrom: this.pageFrom(),
                    pageTo: this.pageTo(),
                    columns: _.chain(this.columns).filter(function (col) {
                        return col.active();
                    }).map(function (col) {
                        return col.column;
                    }).value()
                };
            };

            ChooserDialogViewModel.prototype.close = function () {
                this.options.close();
            };

            ChooserDialogViewModel.prototype.accept = function () {
                this.cancelled = false;
                this.close();
            };

            ChooserDialogViewModel.prototype.cancel = function () {
                this.cancelled = true;
                this.close();
            };
            return ChooserDialogViewModel;
        })(_app.Common.ViewModelBase);
        Chooser.ChooserDialogViewModel = ChooserDialogViewModel;

        var ChooserDialogManager = (function () {
            function ChooserDialogManager(columns) {
                this.columns = columns;
                this._viewTemplate = templates.chooser.ChooserDialog({
                    columns: _.map(columns, function (col) {
                        return col.title;
                    })
                });
            }
            ChooserDialogManager.prototype.showDialog = function () {
                var _this = this;
                var viewModel = new ChooserDialogViewModel({ columns: this.columns, close: closeWindow }), view = new _app.Marionette.View({ template: function () {
                        return _this._viewTemplate;
                    }, viewModel: viewModel }), window = new _app.Views.WindowView(view, { close: close, resizable: false });

                return window.showDialog().then(function () {
                    return viewModel.cancelled ? null : viewModel.getActiveColumns();
                });

                function closeWindow() {
                    window.close();

                    delete window;
                    delete viewModel;
                    delete view;
                }

                function close() {
                    viewModel.cancelled = true;
                    viewModel.close();
                }
            };
            return ChooserDialogManager;
        })();
        Chooser.ChooserDialogManager = ChooserDialogManager;

        function showColumnsChooserDialog(columns) {
            var manager = new ChooserDialogManager(columns);
            return manager.showDialog();
        }
        Chooser.showColumnsChooserDialog = showColumnsChooserDialog;
    })(exports.Chooser || (exports.Chooser = {}));
    var Chooser = exports.Chooser;

    (function (Notifications) {
        var NotificationsDataSource = (function (_super) {
            __extends(NotificationsDataSource, _super);
            function NotificationsDataSource() {
                _super.apply(this, arguments);
            }
            /** overwrite the method to set the date on each notification, because the value received from
            the server is a string */
            NotificationsDataSource.prototype.replaceData = function (notifications) {
                _(notifications).each(function (notification) {
                    return notification.TimeStamp = new Date(notification.TimeStamp);
                });
                _super.prototype.replaceData.call(this, notifications);
            };
            return NotificationsDataSource;
        })(Server.LightDataSource);
        Notifications.NotificationsDataSource = NotificationsDataSource;

        var NotificationViewModel = (function (_super) {
            __extends(NotificationViewModel, _super);
            function NotificationViewModel(dataSource) {
                var _this = this;
                _super.call(this);
                this.dataSource = dataSource;
                /** returns true if the notifications are local */
                this.localScope = ko.observable(false);
                this.levelScope = ko.observable(0 /* Success */);

                dataSource.addQueryLevel(function (query) {
                    return _this.queryParameters(query);
                });

                this.items = dataSource.data;
            }
            /** adds parameters to the query to retrieve the correct notifications */
            NotificationViewModel.prototype.queryParameters = function (query) {
                return query.from(this.localScope() ? 'localNotifications' : 'globalNotifications').withParameters({
                    level: this.levelScope()
                });
            };
            return NotificationViewModel;
        })(_app.Common.ViewModelBase);
        Notifications.NotificationViewModel = NotificationViewModel;

        /** this module will handle all local/global notifications */
        var NotificationModule = (function (_super) {
            __extends(NotificationModule, _super);
            function NotificationModule(coreModule, ribbonPanelNotificationModule) {
                _super.call(this);
                this.coreModule = coreModule;
                this.ribbonPanelNotificationModule = ribbonPanelNotificationModule;
                this.stylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(templates.notification.styles);
                this.dataStylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(templates.styles);

                var dataSource = new NotificationsDataSource({
                    serviceName: "api/notification",
                    defaultSort: "TimeStamp"
                });
                this.viewModel = new NotificationViewModel(dataSource);
                this.view = new _app.Marionette.View({
                    template: templates.notification.NotificationContent,
                    viewModel: this.viewModel
                });

                this.registerUris();
                this.registerUriHandlers();
            }
            NotificationModule.prototype.requiredModules = function () {
                return [this.stylesModule, this.dataStylesModule, this.coreModule, this.ribbonPanelNotificationModule];
            };

            NotificationModule.prototype.load = function () {
                return this.coreModule.content.show(this.view);
            };

            NotificationModule.prototype.registerUris = function () {
                var _this = this;
                var uris = [
                    {
                        url: 'local-notifications',
                        level: 0 /* Success */,
                        local: true
                    },
                    {
                        url: 'local-notifications/success',
                        level: 0 /* Success */,
                        local: true
                    },
                    {
                        url: 'local-notifications/warning',
                        level: 1 /* Warning */,
                        local: true
                    },
                    {
                        url: 'local-notifications/error',
                        level: 2 /* Error */,
                        local: true
                    },
                    {
                        url: 'global-notifications',
                        level: 0 /* Success */,
                        local: false
                    },
                    {
                        url: 'global-notifications/success',
                        level: 0 /* Success */,
                        local: false
                    },
                    {
                        url: 'global-notifications/warning',
                        level: 1 /* Warning */,
                        local: false
                    },
                    {
                        url: 'global-notifications/error',
                        level: 2 /* Error */,
                        local: false
                    }
                ];

                _.each(uris, function (item) {
                    _app.history.register(item.url, function () {
                        _this.viewModel.levelScope(item.level);
                        _this.viewModel.localScope(item.local);

                        return _app.moduleManager.load(_this).then(function () {
                            return _this.viewModel.dataSource.update();
                        });
                    });
                });
            };

            NotificationModule.prototype.registerUriHandlers = function () {
                this.ribbonPanelNotificationModule.localNotificationsViewModel.showNotificationsEvent.add(function (level) {
                    switch (level) {
                        case 2 /* Error */:
                            _app.history.navigate('local-notifications/error');
                            break;
                        case 1 /* Warning */:
                            _app.history.navigate('local-notifications/warning');
                            break;
                        case 0 /* Success */:
                            _app.history.navigate('local-notifications/success');
                            break;
                        default:
                            throw new Error('out of range error');
                    }
                });

                this.ribbonPanelNotificationModule.globalNotificationsViewModel.showNotificationsEvent.add(function (level) {
                    switch (level) {
                        case 2 /* Error */:
                            _app.history.navigate('global-notifications/error');
                            break;
                        case 1 /* Warning */:
                            _app.history.navigate('global-notifications/warning');
                            break;
                        case 0 /* Success */:
                            _app.history.navigate('global-notifications/success');
                            break;
                        default:
                            throw new Error('out of range error');
                    }
                });
            };
            return NotificationModule;
        })(_app.Modules.ModuleBase);
        Notifications.NotificationModule = NotificationModule;
    })(exports.Notifications || (exports.Notifications = {}));
    var Notifications = exports.Notifications;

    (function (Sidebar) {
        (function (MyItems) {
            function entitiesPersistedArray(key, dataSource) {
                return _app.Knockout.persistedArray({
                    key: key,
                    parse: function (item) {
                        // return a new detached entity
                        var entity = dataSource.createEntity(item);
                        dataSource.manager.detachEntity(entity);
                        return entity;
                    },
                    stringify: function (item) {
                        // include all data properties
                        var includedColumns = _.map(dataSource.entityType.dataProperties, function (prop) {
                            return prop.name;
                        }), plainObject = {};

                        // copy all data properties
                        _.each(includedColumns, function (column) {
                            var propertyValue = ko.unwrap(item[column]);
                            if (propertyValue != null) {
                                plainObject[column] = propertyValue;
                            }
                        });
                        return plainObject;
                    }
                });
            }
            MyItems.entitiesPersistedArray = entitiesPersistedArray;

            var MyItemsCollection = (function (_super) {
                __extends(MyItemsCollection, _super);
                function MyItemsCollection(options) {
                    var _this = this;
                    _super.call(this);
                    this.options = options;
                    this.expanded = ko.observable(true);
                    this._drafts = ko.observable();

                    this.superItems = this.items;

                    // replace the super items computed observable to include the drafts array
                    this.items = ko.computed(function () {
                        return _this.drafts ? _.union(_this.superItems(), _this.drafts()) : _this.superItems();
                    });
                }
                Object.defineProperty(MyItemsCollection.prototype, "drafts", {
                    /** returns an observableArray that stores the drafts. The drafts are persisted on the user's localStorage
                    Note: the drafts can't be de-serialized until the metadata is fetched. */
                    get: function () {
                        return this._drafts();
                    },
                    enumerable: true,
                    configurable: true
                });

                /** this method must be called after the metadata for the target entity has been fetched from the server,
                so new drafts entities can be created. */
                MyItemsCollection.prototype.loadStoredDrafts = function () {
                    if (this.drafts || !this.options.dataSource) {
                        return;
                    }

                    this._drafts(entitiesPersistedArray('MyItemDraft.' + this.options.entityType, this.options.dataSource));
                };

                MyItemsCollection.prototype.add = function (item) {
                    if (!_.contains(this.items(), item)) {
                        this.superItems.push(item);
                    }
                    this.expanded(true);
                };

                MyItemsCollection.prototype.addDraft = function (item) {
                    if (!this.drafts)
                        throw new Error('this MyItems collection can not store drafts.');
                    if (!item.entityAspect.entityState.isDetached())
                        throw new Error('only detached entities can be saved as drafts');

                    if (!_.contains(this.drafts(), item)) {
                        this.drafts.push(item);
                    }
                    this.expanded(true);
                };

                MyItemsCollection.prototype.remove = function () {
                    var items = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        items[_i] = arguments[_i + 0];
                    }
                    this.superItems.removeAll(items);
                    this.drafts.removeAll(items);
                };

                MyItemsCollection.prototype.belongsTo = function (item) {
                    return this.options.entityType === item.entityType.shortName;
                };

                MyItemsCollection.prototype.navigate = function (item) {
                    var _this = this;
                    return function () {
                        // if the item is a draft remove it from the list before executing it's navigate method
                        if (item.entityAspect.entityState.isDetached()) {
                            _this.drafts.remove(item);
                        }

                        _this.options.navigate(item);
                    };
                };

                MyItemsCollection.prototype.render = function (item) {
                    return this.options.render(item);
                };
                return MyItemsCollection;
            })(_app.Collection.SetCollection);
            MyItems.MyItemsCollection = MyItemsCollection;

            var MyItemsViewModel = (function (_super) {
                __extends(MyItemsViewModel, _super);
                function MyItemsViewModel() {
                    _super.apply(this, arguments);
                    this.sets = ko.observableArray();
                    this.messageQueue = new _app.Jigsaw.Messages.ExtraSmallBoxMessageQueue();
                }
                MyItemsViewModel.prototype.add = function (name, collection) {
                    // only add the collection if it isn't already present
                    if (!_(this.sets()).any(function (x) {
                        return x.collection == collection;
                    })) {
                        this.sets.push({ name: name, collection: collection });
                    }
                };

                /** adds a new element to the corresponding set, if a proper set exists */
                MyItemsViewModel.prototype.drop = function (data) {
                    var item = _(this.sets()).find(function (x) {
                        return x.collection.belongsTo(data);
                    });

                    if (item) {
                        // add item and show message after
                        item.collection.add(data);

                        // show message of item added succesfully
                        this.messageQueue.clear().add({
                            title: 'Success',
                            body: 'item added to my Items',
                            level: 2 /* Success */
                        });
                    } else {
                        this.messageQueue.clear().add({
                            title: 'Error',
                            body: "The dropped entity doesn't belong to any set",
                            level: 2 /* Success */
                        });
                    }
                };

                MyItemsViewModel.prototype.remove = function (data) {
                    var item = _(this.sets()).find(function (x) {
                        return _(x.collection.items()).contains(data);
                    });

                    if (item) {
                        item.collection.remove(data);
                        this.messageQueue.clear().add({
                            title: 'Success',
                            body: "Row removed from My Items successfully.",
                            level: 2 /* Success */
                        });
                    }
                };
                return MyItemsViewModel;
            })(_app.Common.ViewModelBase);
            MyItems.MyItemsViewModel = MyItemsViewModel;

            var MyItemsModule = (function (_super) {
                __extends(MyItemsModule, _super);
                function MyItemsModule(sidebarModule) {
                    _super.call(this);
                    this.sidebarModule = sidebarModule;
                    this.stylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(templates.myitems.myItemsStyles);

                    this._myItemsViewModel = new MyItemsViewModel();
                    var view = new _app.Marionette.View({
                        template: templates.myitems.SidebarMyItems,
                        viewModel: this._myItemsViewModel
                    }), collapsedView = new _app.Marionette.View({
                        template: templates.myitems.SidebarMyItemsCollapsed,
                        viewModel: this._myItemsViewModel
                    });

                    sidebarModule.registerView(view, collapsedView);
                    sidebarModule.addSlave(this);
                }
                MyItemsModule.prototype.registerSet = function (title, collection) {
                    this._myItemsViewModel.add(title, collection);
                };

                MyItemsModule.prototype.requiredModules = function () {
                    return [this.sidebarModule, this.stylesModule];
                };
                return MyItemsModule;
            })(_app.Modules.ModuleWithSlavesBase);
            MyItems.MyItemsModule = MyItemsModule;

            /** This module should be used by other modules who want to register a MyItemsCollection,
            with the Sidebar, it will be added as an Slave of the MyItemsModule */
            var MyItemsCollectionModule = (function (_super) {
                __extends(MyItemsCollectionModule, _super);
                function MyItemsCollectionModule(options) {
                    var _this = this;
                    _super.call(this);
                    this.options = options;

                    this.ensureMetadataFetchedModule = options.ensureMetadataFetchedModule;
                    if (options.styles) {
                        this.stylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(options.styles);
                    }

                    this.collection = new MyItemsCollection({
                        entityType: this.options.dataSource.typeName,
                        render: function () {
                            return new _app.Marionette.View({ template: _this.options.itemTemplate });
                        },
                        navigate: this.options.navigate,
                        dataSource: this.options.dataSource
                    });

                    this.options.myItemsModule.registerSet(new _app.Marionette.View({ template: this.options.itemTitleTemplate }), this.collection);
                    options.myItemsModule.addSlave(this);
                }
                MyItemsCollectionModule.prototype.requiredModules = function () {
                    if (this.stylesModule) {
                        return [this.ensureMetadataFetchedModule, this.stylesModule];
                    } else {
                        return [this.ensureMetadataFetchedModule];
                    }
                };

                MyItemsCollectionModule.prototype.load = function () {
                    // load stored drafts now that the metadata has been fetched
                    this.collection.loadStoredDrafts();

                    return _super.prototype.load.call(this);
                };
                return MyItemsCollectionModule;
            })(_app.Modules.ModuleWithSlavesBase);
            MyItems.MyItemsCollectionModule = MyItemsCollectionModule;
        })(Sidebar.MyItems || (Sidebar.MyItems = {}));
        var MyItems = Sidebar.MyItems;

        (function (MySearches) {
            var SavedSearchesMultiSet = (function (_super) {
                __extends(SavedSearchesMultiSet, _super);
                function SavedSearchesMultiSet() {
                    _super.apply(this, arguments);
                }
                SavedSearchesMultiSet.prototype.load = function (search) {
                    var part = this.findPartContaining(search);
                    if (part) {
                        return part.load(search);
                    }
                };

                SavedSearchesMultiSet.prototype.loadAndExecute = function (search) {
                    var part = this.findPartContaining(search);
                    if (part) {
                        return part.loadAndExecute(search);
                    }
                };
                return SavedSearchesMultiSet;
            })(_app.Collection.MultiSetCollection);
            MySearches.SavedSearchesMultiSet = SavedSearchesMultiSet;

            var SavedSearchesViewModel = (function (_super) {
                __extends(SavedSearchesViewModel, _super);
                function SavedSearchesViewModel() {
                    _super.apply(this, arguments);
                    this.storage = new SavedSearchesMultiSet();
                    this.messageQueue = new _app.Jigsaw.Messages.InlineMessageQueue();
                }
                return SavedSearchesViewModel;
            })(_app.Common.ViewModelBase);
            MySearches.SavedSearchesViewModel = SavedSearchesViewModel;

            var SavedSearchModule = (function (_super) {
                __extends(SavedSearchModule, _super);
                function SavedSearchModule(sidebarModule) {
                    _super.call(this);
                    this.sidebarModule = sidebarModule;
                    this._stylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(templates.mysearches.mySearchesStyles);

                    this.viewModel = new SavedSearchesViewModel();
                    var view = new _app.Marionette.View({
                        template: templates.mysearches.SidebarMySearches,
                        viewModel: this.viewModel
                    }), collapsedView = new _app.Marionette.View({
                        template: templates.mysearches.SidebarMySearchesCollapsed,
                        viewModel: this.viewModel
                    });

                    sidebarModule.registerView(view, collapsedView);
                    sidebarModule.addSlave(this);
                }
                SavedSearchModule.prototype.registerCollection = function (collection) {
                    this.viewModel.storage.blendWith(collection);
                };

                SavedSearchModule.prototype.requiredModules = function () {
                    return [this.sidebarModule, this._stylesModule];
                };
                return SavedSearchModule;
            })(_app.Modules.ModuleBase);
            MySearches.SavedSearchModule = SavedSearchModule;
        })(Sidebar.MySearches || (Sidebar.MySearches = {}));
        var MySearches = Sidebar.MySearches;
    })(exports.Sidebar || (exports.Sidebar = {}));
    var Sidebar = exports.Sidebar;

    /** Contains precompiled templates */
    (function (Templates) {
        function ViewBar(templateFunction) {
            return new _app.Marionette.View({ template: composedTemplate });

            function composedTemplate(helpersParam) {
                var helpers = _.defaults(helpersParam || {}, { throttle: true });

                return Q(templateFunction(helpers)).then(function (template) {
                    return templates.ViewBar({ renderBody: template });
                });
            }
        }
        Templates.ViewBar = ViewBar;

        function ViewbarWithSummary(templateFunction) {
            return new _app.Marionette.View({ template: composedTemplate });

            function composedTemplate(helpersParam) {
                var helpers = _.defaults(helpersParam || {}, { throttle: true });

                return Q(templateFunction(helpers)).then(function (template) {
                    var summaryTabTemplate = SummaryTab(template), templateElement = $(template);

                    //templateElement.find('ul').append('<li data-bind="keyTipsKendoTab : { key : \'VM\' }" >Summary</li>');
                    templateElement.find('ul').append('<li><a data-toggle="tab" href="#tab-summary" data-bind="keyTipsGroup: { key : \'VM\', group : \'vb-summary\'}" >Summary</a ></li>');

                    //templateElement.find('ul').parent().append(summaryTabTemplate);
                    templateElement.find('ul').parent().children(".tab-content").append('<div id="tab-summary" class="tab-pane">' + summaryTabTemplate + '</div>');

                    var resultingTemplate = templateElement[0].outerHTML;

                    return templates.ViewBar({ renderBody: resultingTemplate });
                });
            }
        }
        Templates.ViewbarWithSummary = ViewbarWithSummary;

        /** extracts the tabs from a viewbar template and concatenates the content of each tab */
        function SummaryTab(template) {
            var tabs = WizzardView.extractTabs(template), summaryTabTemplate = templates.ViewBarSummaryTabContent({ tabs: tabs });
            return summaryTabTemplate;
        }
        Templates.SummaryTab = SummaryTab;

        function VersionPager(template) {
            return new _app.Marionette.View({ template: composeTemplate });

            function composeTemplate(helpers) {
                return templates.VersionPagerViewBar({
                    renderBody: template(helpers)
                });
            }
        }
        Templates.VersionPager = VersionPager;

        function PopupLayout(templateFunction) {
            return new _app.Marionette.View({ template: composeTemplate });

            function composeTemplate() {
                return Q(templateFunction({ throttle: false })).then(function (template) {
                    return templates.PopupLayout({ renderBody: template });
                });
            }
        }
        Templates.PopupLayout = PopupLayout;

        function WizzardView(viewbarTemplate, helpersParam) {
            var template = viewbarTemplate({ throttle: false }), tabs = WizzardView.extractTabs(template), helpers = _.defaults(helpersParam || {}, { tabs: tabs, title: '', classIdentifier: '' });

            return new Wizzard.WizzardView({
                template: function () {
                    return templates.Wizzard(helpers);
                },
                totalSteps: tabs.length
            });
        }
        Templates.WizzardView = WizzardView;

        (function (WizzardView) {
            function extractTabs(viewbarTemplate) {
                var html = $(viewbarTemplate), headers = html.find('ul > li'), content = html.find('.tab-pane'), length = Math.min(headers.length, content.length), result = new Array(length);

                for (var i = 0; i < length; i++) {
                    result[i] = {
                        header: headers.eq(i).html(),
                        content: content.eq(i).html()
                    };
                }

                return result;
            }
            WizzardView.extractTabs = extractTabs;
        })(Templates.WizzardView || (Templates.WizzardView = {}));
        var WizzardView = Templates.WizzardView;

        var DataItemsView = (function (_super) {
            __extends(DataItemsView, _super);
            function DataItemsView(options) {
                _super.call(this, options);
                this._domReadyTrash = new _app.Common.Trash();
            }
            Object.defineProperty(DataItemsView.prototype, "dataSource", {
                get: function () {
                    return this.options.viewModel.dataSource;
                },
                enumerable: true,
                configurable: true
            });

            DataItemsView.prototype.domReady = function () {
                _super.prototype.domReady.call(this);

                var gridElement = this.find('.k-grid')[0], grid = Knockout.Kendo.makeKendoGrid(gridElement, {
                    columns: Server.Kendo.getColumns(this.dataSource.entityType, this.options.columns || this.options.viewModel.options.columns),
                    dataSource: this.dataSource,
                    defaultSort: this.options.defaultSort || this.options.viewModel.options.columns[0],
                    dragHint: this.options.dragHint,
                    pageSize: 10,
                    selected: this.options.viewModel.selectedItem
                });

                if (this.options.columnChooser) {
                    var columnChooserElement = this.find('.' + Knockout.ColumnChooser.COLUMNCHOOSER), columnChooser = new Knockout.ColumnChooser.GridColumnChooserViewModel(this.options.viewModel.activeColumns, grid.widget), columnChooserView = new _app.Marionette.View({ viewModel: columnChooser, template: templates.ColumnChooser }), columnChooserRegion = _app.Marionette.renderViewIntoElement(columnChooserElement, columnChooserView);
                }

                if (this.options.advancedSearchSettings || this.options.advancedSearchSettingsUrl) {
                    var webRuleBuilder = Searches.Knockout.makeWebRule(this.find('#filter-container'), {
                        settings: this.options.advancedSearchSettings,
                        settingsUrl: this.options.advancedSearchSettingsUrl
                    });

                    this.options.viewModel.searchManager.searchWidget(webRuleBuilder.widget);
                }

                this.grid = grid.widget;
                this._domReadyTrash.recycle(grid, columnChooser, columnChooserRegion, webRuleBuilder);
            };

            DataItemsView.prototype.close = function () {
                _super.prototype.close.call(this);

                this.options.viewModel.searchManager.searchWidget(null);
                this._domReadyTrash.dispose();
                this.grid = null;
            };
            return DataItemsView;
        })(_app.Marionette.View);
        Templates.DataItemsView = DataItemsView;

        function DataItems(options) {
            _.defaults(options, {
                addNew: false,
                excelExport: false,
                jumpTo: true,
                advancedSearchSettingsUrl: '',
                advancedSearchSettings: '',
                dragHint: '',
                columnChooser: true
            });

            return new DataItemsView({
                template: function () {
                    return templates.DataItems(options);
                },
                viewModel: options.viewModel,
                columns: options.columns,
                dragHint: options.dragHint,
                defaultSort: options.defaultSort,
                advancedSearchSettings: options.advancedSearchSettings,
                advancedSearchSettingsUrl: options.advancedSearchSettingsUrl,
                columnChooser: options.columnChooser
            });
        }
        Templates.DataItems = DataItems;
    })(exports.Templates || (exports.Templates = {}));
    var Templates = exports.Templates;

    /** can be used as a dependency for a module that needs it's manager metadata before it's loaded */
    var EnsureMetadataFetchedModule = (function (_super) {
        __extends(EnsureMetadataFetchedModule, _super);
        function EnsureMetadataFetchedModule(dataSource) {
            _super.call(this);
            this.dataSource = dataSource;
        }
        EnsureMetadataFetchedModule.prototype.load = function () {
            return this.dataSource.fetchMetadata();
        };
        return EnsureMetadataFetchedModule;
    })(_app.Modules.ModuleBase);
    exports.EnsureMetadataFetchedModule = EnsureMetadataFetchedModule;

    var DataItemsViewModel = (function (_super) {
        __extends(DataItemsViewModel, _super);
        function DataItemsViewModel(dataSource, options) {
            var _this = this;
            _super.call(this);
            this.dataSource = dataSource;
            this.options = options;
            /** returns an array with the columns (fields) currently active in the view, this is used
            for the exports */
            this.activeColumns = ko.observableArray();
            /** contains the currently selected item */
            this.selectedItem = ko.guarded();
            /** event fired with an entity, when the selected item changes and a change in the
            URL is requested to point to the new state of the view model */
            this.requestNavigate = new _app.Common.InteractionRequest();
            /* function used to show a message box, can be replaced for testing purposes */
            this.showMessageBox = function (text, type) {
                return _app.Views.smartMessage({ title: '', content: text, type: type });
            };

            this.searchManager = new Searches.SearchManager(this);
            if (options && options.jumpToSearchUri && options.jumpToSearchProperty) {
                this.jumpToSearch = new Searches.JumpToSearch(options.jumpToSearchUri, options.jumpToSearchProperty, this);
            }

            this.dataSource.onError(function (e) {
                return _this.onDataSourceError(e);
            });
            this.dataSource.refreshed(function () {
                return _this.dataSourceRefreshed();
            });

            if (this.jumpToSearch) {
                this.selectedItem.guarded.subscribe(function (entity) {
                    if (entity) {
                        _this.requestNavigate.request(entity);
                    }
                });
            }

            if (options && options.wizzardViewBuilder) {
                this.wizzardDialogManager = new Wizzard.WizzardDialogManager(dataSource, options.wizzardViewBuilder, options.wizzardSaveDraft);
            }

            if (options && options.queryFilter) {
                this.queryFilter = new Filters.QueryFilterManager(options.queryFilter, this.dataSource);
            }

            //this.messageQueue = _app.Jigsaw.Messages.createMessageQueue(
            //     (options && options.messageQueueType) || _app.Jigsaw.Messages.MessageQueueType.Small);
            this.messageQueue = new _app.Jigsaw.Messages.SmallBoxPrevNextMessageQueue();
        }
        DataItemsViewModel.prototype.dataSourceRefreshed = function () {
            if (this.dataSource.data.length === 0) {
                if (this.searchManager.searchType() === 1 /* Simple */) {
                    this.messageQueue.clear().add({
                        title: "Info",
                        body: "No results found for search term '" + this.searchManager.simpleSearchQuery() + "' please enter a new search term or cancel the search.",
                        level: 3 /* Info */
                    });
                } else if (this.searchManager.searchType() === 2 /* Advanced */) {
                    this.messageQueue.clear().add({
                        title: "Info",
                        body: "No results found for your advanced search. Please check your values or cancel the search.",
                        level: 3 /* Info */
                    });
                }
            }
        };

        /** this will be called when there's a server error on the datasource.
        this should notify the used through a message on the messageQueue */
        DataItemsViewModel.prototype.onDataSourceError = function (e) {
            try  {
                var details = JSON.parse(e.detail.ExceptionMessage);
                if (details.ClientInvalidData) {
                    this.searchManager.searchWidget().loadInvalids(details.ClientInvalidData);
                    this.messageQueue.add({
                        title: "Error",
                        body: "There's an error with the rules selected, check them.",
                        level: 0 /* Error */
                    });
                    return;
                }
            } catch (__) {
            }

            this.messageQueue.add({
                title: "Error",
                body: e.message,
                level: 0 /* Error */
            });
        };

        DataItemsViewModel.prototype.createEntity = function () {
            return this.dataSource.createEntity();
        };

        DataItemsViewModel.prototype.addNew = function () {
            var entity = this.createEntity();

            // mark the entity as selected, some other viewmodel should listen for this change
            // and only allow this item to be unselected when it has been added or removed.
            return this.selectedItem.inject(entity);
        };

        DataItemsViewModel.prototype.addNewWizzard = function () {
            return this.showWizzardDialog();
        };

        DataItemsViewModel.prototype.showWizzardDialog = function (entity) {
            // check that the wizzard dialog manager has been initialized
            if (!this.wizzardDialogManager) {
                return Q.reject(new Error('no viewbar template specified to build a wizzard'));
            }

            return this.wizzardDialogManager.showDialog(entity);
        };

        DataItemsViewModel.prototype.openWizzard = function (entityDraft) {
            var _this = this;
            // check that the wizzard dialog manager has been initialized
            if (!this.wizzardDialogManager) {
                return Q.reject(new Error('no viewbar template specified to build a wizzard'));
            }

            // unselect current item to avoid unsaved changes problems later
            return this.selectedItem.inject(null).then(function () {
                return _this.wizzardDialogManager.showDialog(entityDraft);
            });
        };

        DataItemsViewModel.prototype.filter = function (parameter) {
            return this.queryFilter.updateFilter(parameter);
        };

        /** this should be called when the containing module is re-loaded, to ensure
        all properties are set to it's original state */
        DataItemsViewModel.prototype.reset = function () {
            //this.selectedItem(null);
            this.searchManager.reset();
            if (this.queryFilter) {
                this.queryFilter.parameters.removeAll();
            }
        };

        /** triggers the excel export of the current view on the server if the excel export
        path was specified. */
        DataItemsViewModel.prototype.excelExport = function () {
            if (this.options && this.options.excelExportPath) {
                var query = this.dataSource.currentQuery.skip(null).take(null), searchOptions = Server.getQueryOptions(query, this.dataSource.entityType);

                searchOptions['columns'] = this.activeColumns();

                return _app.ajax.fileDownload(this.options.excelExportPath, searchOptions);
            }
        };

        DataItemsViewModel.prototype.excelPageExport = function () {
            if (this.options && this.options.excelExportPath) {
                var query = this.dataSource.currentQuery, searchOptions = Server.getQueryOptions(query, this.dataSource.entityType);

                searchOptions['columns'] = this.activeColumns();

                return _app.ajax.fileDownload(this.options.excelExportPath, searchOptions);
            }
        };

        DataItemsViewModel.prototype.excelChooseColumnsExport = function () {
            var _this = this;
            if (this.options && this.options.excelExportPath) {
                var columns = Server.Kendo.getColumns(this.dataSource.entityType, this.options.columns);

                return Chooser.showColumnsChooserDialog(columns).then(function (model) {
                    if (model) {
                        var query = _this.dataSource.currentQuery;

                        if (model.allPages) {
                            query = query.skip(null).take(null);
                        } else {
                            query = query.skip(_this.dataSource.options.pageSize * (model.pageFrom - 1)).take(_this.dataSource.options.pageSize * (model.pageTo - model.pageFrom + 1));
                        }

                        var searchOptions = Server.getQueryOptions(query, _this.dataSource.entityType);

                        searchOptions['columns'] = _.map(model.columns, function (col) {
                            return col.field;
                        });
                        searchOptions['includeHeaders'] = model.includeHeaders;

                        return _app.ajax.fileDownload(_this.options.excelExportPath, searchOptions);
                    }
                });
            }
        };
        return DataItemsViewModel;
    })(_app.Common.ViewModelBase);
    exports.DataItemsViewModel = DataItemsViewModel;

    /** represent the base viewmodel of the view responsable of displaying an observable stream */
    var DataEditViewModelBase = (function (_super) {
        __extends(DataEditViewModelBase, _super);
        function DataEditViewModelBase(selectedItem, dataSource, options) {
            var _this = this;
            _super.call(this);
            this.dataSource = dataSource;
            this.options = options;
            this.isReadOnly = ko.observable(false);
            this._itemHasChangedWhileSelected = false;
            /** when true validation errors sould be displayed on the screen */
            this.forceValidationErrors = ko.observable(false);
            /* function used to show a message box, can be replaced for testing purposes */
            this.showMessageBox = function (text) {
                return _app.Views.smartMessage({ title: '', content: text });
            };

            this.item = selectedItem.guarded;
            selectedItem.guard(function (_, silent) {
                if (typeof silent === "undefined") { silent = false; }
                return _this.promiseItemChange(silent);
            });

            // track only the changes made to an entity while it was selected, this will be usefull for offline
            var item = selectedItem.guarded(), subscription;
            selectedItem.guarded.subscribe(function (newItem) {
                // clean old item
                if (item) {
                    item.entityAspect.propertyChanged.unsubscribe(subscription);
                    _this._itemHasChangedWhileSelected = false;
                }

                if (newItem) {
                    // attach to new item
                    subscription = newItem.entityAspect.propertyChanged.subscribe(function () {
                        return _this.currentItemPropertyChanged();
                    });
                }

                item = newItem;
                _this.forceValidationErrors(false);
            });

            // Inline by default
            this.messageQueue = _app.Jigsaw.Messages.createMessageQueue(options && options.messageQueueType);
        }
        /** called when a property of the currently selected item is changed */
        DataEditViewModelBase.prototype.currentItemPropertyChanged = function () {
            this._itemHasChangedWhileSelected = true;
        };

        DataEditViewModelBase.prototype.save = function () {
            var _this = this;
            if (this.item().entityAspect.validateEntity()) {
                return this.dataSource.saveChanges().then(function () {
                    _this.messageQueue.add({
                        title: "Success",
                        body: "item saved successfully",
                        level: 2 /* Success */
                    });
                    _this._itemHasChangedWhileSelected = false;
                    return true;
                }).fail(function (e) {
                    _this.messageQueue.add({
                        title: "Error",
                        body: "process server error...",
                        level: 0 /* Error */
                    });
                    return Q.reject();
                });
            } else {
                // force the display of all validation errors
                this.forceValidationErrors(true);
                return Q.reject();
            }
        };

        DataEditViewModelBase.prototype.saveAndClose = function () {
            var _this = this;
            return this.save().then(function () {
                return _this.close();
            });
        };

        /** closes whathever is editing the current entity */
        DataEditViewModelBase.prototype.close = function () {
            return this.promiseItemChange();
            // overwrite in derived class to actually close the region
        };

        /** returns true if the currently selected item has been modified while it was selected,
        and the user should consider before changing the currently selected item */
        DataEditViewModelBase.prototype.itemHasBeenModifiedWhileSelected = function () {
            return this.item() && this.item().entityAspect.entityState.isAddedModifiedOrDeleted() && this._itemHasChangedWhileSelected;
        };

        /** returns a promise that is resolved if the current item can be changed,
        otherwise it should fail. Q(true) = YES, Q(false) = NO, Q.reject() = CANCEL */
        DataEditViewModelBase.prototype.promiseItemChange = function (silent) {
            var _this = this;
            if (typeof silent === "undefined") { silent = false; }
            if (this.itemHasBeenModifiedWhileSelected()) {
                if (!silent) {
                    return this.showMessageBox("Current item has changed, do you want to save changes?").then(function (result) {
                        if (result === 0 /* Yes */) {
                            return _this.save();
                        } else if (result === 1 /* No */) {
                            // reject changes and procceed with the change
                            _this.item().entityAspect.rejectChanges();
                            return Q(true);
                        } else {
                            // cancel the selection, make the observable fail by throwing an error
                            return Q.reject();
                        }
                    });
                } else {
                    return Q.reject();
                }
            }

            return Q(true);
        };

        /** returns an object containing the key properties of the selected item, can be
        used to send as parameters to the server */
        DataEditViewModelBase.prototype.getKeyPropertyOptions = function () {
            var entity = this.item(), options = {};

            if (!entity) {
                throw new Error('Some item must be selected');
            }

            // pass key data properties as options to the server, to select the entity
            _.each(this.item().entityType.dataProperties, function (property) {
                if (property.isPartOfKey) {
                    options[property.name] = entity[property.name]();
                }
            });

            return options;
        };

        DataEditViewModelBase.prototype.wordExport = function () {
            if (!this.options.wordExportUrl) {
                throw new Error('Not supported, the word export server address has not been specified.');
            }

            return _app.ajax.fileDownload(this.options.wordExportUrl, this.getKeyPropertyOptions());
        };

        DataEditViewModelBase.prototype.pdfExport = function () {
            if (!this.options.pdfExportUrl) {
                throw new Error('Not supported, the pdf export server address has not been specified.');
            }

            return _app.ajax.fileDownload(this.options.pdfExportUrl, this.getKeyPropertyOptions());
        };
        return DataEditViewModelBase;
    })(_app.Common.ViewModelBase);
    exports.DataEditViewModelBase = DataEditViewModelBase;

    /** Base view model for the panel bar */
    var DataEditViewModel = (function (_super) {
        __extends(DataEditViewModel, _super);
        function DataEditViewModel(itemsViewModel, options) {
            var _this = this;
            _super.call(this, itemsViewModel.selectedItem, itemsViewModel.dataSource, options);

            this.item.subscribe(function (item) {
                if (item != null) {
                    // clear all messages when the selected item is changed
                    _this.messageQueue.clear();
                    _this.show().done();
                } else {
                    _this.close().done();
                }
            });

            if (options && options.readOnly) {
                this.isReadOnly(options.readOnly);
            }
        }
        DataEditViewModel.prototype.show = function () {
            // overwrite in derived class to show the region
            //throw new Error("not implemented");
            return Q(true);
        };

        DataEditViewModel.prototype.showInPopup = function () {
            return this.options.dataPopup.show(this.item(), this.dataSource);
        };

        DataEditViewModel.prototype.showInPopupReadOnly = function () {
            return this.options.dataPopup.show(this.item(), this.dataSource, { readOnly: true });
        };
        return DataEditViewModel;
    })(DataEditViewModelBase);
    exports.DataEditViewModel = DataEditViewModel;

    /** represents a viewmodel to edit an entity in a windows */
    var DataPopupViewModel = (function (_super) {
        __extends(DataPopupViewModel, _super);
        function DataPopupViewModel(entity, dataSource, window, options) {
            this.entity = entity;
            this.window = window;

            var selectedItem = ko.guarded();
            _super.call(this, selectedItem, dataSource, options);

            selectedItem(entity);
            this.customCommands = new _app.Jigsaw.Ribbon.MenuSet();
        }
        DataPopupViewModel.prototype.close = function () {
            var _this = this;
            return _super.prototype.close.call(this).then(function () {
                return _this.window.close();
            });
        };
        return DataPopupViewModel;
    })(DataEditViewModelBase);
    exports.DataPopupViewModel = DataPopupViewModel;

    /** given an entity and some options, this class shows a window */
    var DataPopupManager = (function () {
        function DataPopupManager(windowBuilder) {
            this.windowBuilder = windowBuilder;
        }
        DataPopupManager.prototype.show = function (entity, dataSource, options) {
            var window = this.windowBuilder(), viewModel = new DataPopupViewModel(entity, dataSource, window);

            if (options) {
                viewModel.isReadOnly(options.readOnly);
            }

            return window.showDialog();
        };
        return DataPopupManager;
    })();
    exports.DataPopupManager = DataPopupManager;

    /** represents an EditViewModel that is shown on a collapsable/expandable layout form */
    var PanelBarEditViewModel = (function (_super) {
        __extends(PanelBarEditViewModel, _super);
        function PanelBarEditViewModel(itemsViewModel, options) {
            _super.call(this, itemsViewModel, options);
        }
        PanelBarEditViewModel.prototype.close = function () {
            var _this = this;
            return _super.prototype.close.call(this).then(function () {
                return _this.options.panelBarViewModel.collapseViewbar();
            });
        };

        PanelBarEditViewModel.prototype.show = function () {
            return this.options.panelBarViewModel.expandViewbar();
        };
        return PanelBarEditViewModel;
    })(DataEditViewModel);
    exports.PanelBarEditViewModel = PanelBarEditViewModel;

    (function (VersionPager) {
        var DataSource = (function (_super) {
            __extends(DataSource, _super);
            function DataSource(options) {
                _super.call(this, options);
            }
            DataSource.prototype.configureEntity = function () {
                var _this = this;
                _super.prototype.configureEntity.call(this);

                // register initializer for the entity version type
                this.manager.metadataStore.registerEntityTypeCtor(this.options.versionedTypeName, null, function (x) {
                    return _this.initializeVersionedEntity(x);
                });

                this.manager.metadataStore.registerEntityTypeCtor(this.options.entityVersionTypeName, null, function (x) {
                    return _this.initializeEntityVersion(x);
                });
            };

            DataSource.prototype.entityBuilder = function () {
                return function versionTracker() {
                    //this.HasPending = false;
                };
            };

            DataSource.prototype.initializeEntity = function (entity) {
                _super.prototype.initializeEntity.call(this, entity);

                entity.HasPending = ko.computed(function () {
                    return entity.Pending().length > 0;
                });

                entity.CreatedBy = ko.computed(function () {
                    var hystorical = entity.Historical();
                    return (hystorical.length && _.last(hystorical).ModifiedBy()) || (entity.Current() && entity.Current().ModifiedBy());
                });
                entity.CreatedDate = ko.computed(function () {
                    var hystorical = entity.Historical();
                    return (hystorical.length && _.last(hystorical).ModifiedDate()) || (entity.Current() && entity.Current().ModifiedDate());
                });
            };

            DataSource.prototype.initializeEntityVersion = function (entity) {
                entity.ApprovedBy = ko.computed(function () {
                    return entity.Approval().length && _.last(entity.Approval()).ApprovedBy();
                });
                entity.ApprovedDate = ko.computed(function () {
                    return entity.Approval().length && _.last(entity.Approval()).ApprovedDate();
                });

                // returns PENDING if there's an approval workflow and the lasst approval hasn't been made
                entity.ApprovalWorkflow = ko.computed(function () {
                    return entity.Approval().length && !_.last(entity.Approval()).ApprovedDate() ? "Pending" : "Fully Approved";
                });
            };

            DataSource.prototype.initializeVersionedEntity = function (entity) {
                Server.EntitySetup.init(entity);
            };
            return DataSource;
        })(Server.DataSource);
        VersionPager.DataSource = DataSource;

        (function (VersionType) {
            VersionType[VersionType["Current"] = 0] = "Current";
            VersionType[VersionType["Pending"] = 1] = "Pending";
            VersionType[VersionType["Historical"] = 2] = "Historical";
        })(VersionPager.VersionType || (VersionPager.VersionType = {}));
        var VersionType = VersionPager.VersionType;

        var VersionTrackerManager = (function () {
            function VersionTrackerManager(options) {
                var _this = this;
                this.options = options;
                this._versionChangedWhileSelected = false;
                this.selectedVersion = ko.guarded();
                var tracker = options.tracker;
                this.tracker = tracker;

                // prevent the selected item from being selected if the current version can't be selected
                tracker.guard(function (tracker) {
                    return _this.selectedVersion.inject(tracker && tracker.Current());
                });

                this.selectedVersion.guard(function () {
                    return _this.canUnselectVersion();
                });

                this.versionType = ko.computed(function () {
                    var version = _this.selectedVersion.guarded();
                    if (!tracker() || (tracker().Current() === version)) {
                        return 0 /* Current */;
                    } else if (_.contains(tracker().Pending(), version)) {
                        return 1 /* Pending */;
                    } else {
                        return 2 /* Historical */;
                    }
                });

                var oldVersionEntity = null, subscription;
                this.selectedVersion.guarded.subscribe(function (newVersion) {
                    if (oldVersionEntity) {
                        oldVersionEntity.entityAspect.propertyChanged.unsubscribe(subscription);
                        _this._versionChangedWhileSelected = false;
                    }

                    oldVersionEntity = newVersion && newVersion.Entity();

                    if (oldVersionEntity) {
                        oldVersionEntity.entityAspect.propertyChanged.subscribe(function () {
                            return _this.selectedVersionPropertyChanged();
                        });
                    }
                });
            }
            VersionTrackerManager.prototype.selectPending = function (version) {
                this.selectedVersion(version);
            };

            VersionTrackerManager.prototype.selectHystorical = function (version) {
                this.selectedVersion(version);
            };

            VersionTrackerManager.prototype.selectCurrent = function () {
                this.selectedVersion(this.tracker().Current());
            };

            Object.defineProperty(VersionTrackerManager.prototype, "currentVersionSelected", {
                get: function () {
                    return this.tracker() && this.tracker().Current() === this.selectedVersion();
                },
                enumerable: true,
                configurable: true
            });

            VersionTrackerManager.prototype.selectedVersionPropertyChanged = function () {
                this._versionChangedWhileSelected = true;
            };

            VersionTrackerManager.prototype.selectedVersionHasBeenModifiedWhileSelected = function () {
                var version = this.selectedVersion.guarded();
                return version && version.Entity().entityAspect.entityState.isAddedModifiedOrDeleted() && this._versionChangedWhileSelected;
            };

            VersionTrackerManager.prototype.canUnselectVersion = function () {
                var _this = this;
                if (this.selectedVersionHasBeenModifiedWhileSelected()) {
                    return _app.Views.smartMessage({ title: '', content: "Current version has changed, do you want to save changes?" }).then(function (result) {
                        if (result === 0 /* Yes */) {
                            //return this.save();
                        } else if (result === 1 /* No */) {
                            // reject changes for current version
                            _this.selectedVersion.guarded().Entity().entityAspect.rejectChanges();
                            return Q(true);
                        } else {
                            // cancel the selection, make the observable fail by throwing an error
                            return Q.reject();
                        }
                    });
                }

                return Q(true);
            };

            VersionTrackerManager.prototype.versionAction = function (uri) {
                var _this = this;
                return _app.ajax.post(uri, {
                    trackerGuid: this.tracker().Guid(),
                    versionGuid: this.selectedVersion().Guid()
                }).then(function (raw) {
                    // updating the dataSource current view will update in turn the current entity
                    return _this.options.dataSource.update().then(function () {
                        // select the current version after the current VersionTracker has been updated
                        _this.selectCurrent();
                    });
                });
            };

            VersionTrackerManager.prototype.approve = function () {
                return this.versionAction(this.options.approveUri);
            };

            VersionTrackerManager.prototype.reject = function () {
                var versionToReject = this.selectedVersion();
                return this.versionAction(this.options.rejectUri).then(function () {
                    return versionToReject.entityAspect.setDetached();
                });
            };

            VersionTrackerManager.prototype.revert = function () {
                return this.versionAction(this.options.revertUri);
            };
            return VersionTrackerManager;
        })();
        VersionPager.VersionTrackerManager = VersionTrackerManager;

        /** extends DataEditViewModelBase with VersionPager related features */
        var VersionPagerEditViewModel = (function (_super) {
            __extends(VersionPagerEditViewModel, _super);
            function VersionPagerEditViewModel(itemsViewModel, options) {
                var _this = this;
                _super.call(this, itemsViewModel, options);

                this.trackerManager = new VersionTrackerManager({
                    tracker: itemsViewModel.selectedItem,
                    approveUri: options.approveUri,
                    rejectUri: options.rejectUri,
                    revertUri: options.revertUri,
                    dataSource: itemsViewModel.dataSource
                });
                this.selectedVersion = this.trackerManager.selectedVersion.guarded;

                this.currentEntity = ko.computed(function () {
                    return _this.trackerManager.tracker() && _this.trackerManager.tracker().Current().Entity();
                }).extend({ rateLimit: 1000 });

                this.selectedVersion.subscribe(function () {
                    _this.isReadOnly(!_this.trackerManager.currentVersionSelected);
                });
            }
            return VersionPagerEditViewModel;
        })(DataEditViewModel);
        VersionPager.VersionPagerEditViewModel = VersionPagerEditViewModel;

        /** helper variable to be used as the column spec for modules that want to
        show the hasPending column on their grid */
        VersionPager.hasPendingColumn = {
            title: " ",
            field: 'HasPending',
            nameOnServer: 'HasPending',
            width: "40px",
            template: templates.VersionPagerHasPendingColumn,
            groupable: false, filterable: false, sortable: false
        };

        /** represents an EditViewModel that is shown on a collapsable/expandable layout form */
        var VersionPagerPanelBarEditViewModel = (function (_super) {
            __extends(VersionPagerPanelBarEditViewModel, _super);
            function VersionPagerPanelBarEditViewModel(itemsViewModel, options) {
                _super.call(this, itemsViewModel, options);
            }
            VersionPagerPanelBarEditViewModel.prototype.close = function () {
                var _this = this;
                return _super.prototype.close.call(this).then(function () {
                    return _this.options.panelBarViewModel.collapseViewbar();
                });
            };

            VersionPagerPanelBarEditViewModel.prototype.show = function () {
                return this.options.panelBarViewModel.expandViewbar();
            };
            return VersionPagerPanelBarEditViewModel;
        })(VersionPagerEditViewModel);
        VersionPager.VersionPagerPanelBarEditViewModel = VersionPagerPanelBarEditViewModel;
    })(exports.VersionPager || (exports.VersionPager = {}));
    var VersionPager = exports.VersionPager;

    var DataModule = (function (_super) {
        __extends(DataModule, _super);
        function DataModule(options) {
            var _this = this;
            _super.call(this);
            this.options = options;
            this.styleModule = new _app.Jigsaw.Theming.ContentStyleSheet(templates.styles);
            this.codeeffectsStylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(templates.codeeffects);
            this.url = options.url;
            this.itemsViewModel = options.itemsViewModel;
            this.barViewModel = options.barViewModel;

            this.itemsViewModel.requestNavigate.handle(function (entity) {
                if (!_app.moduleManager.isLoading) {
                    _this.navigate(entity, false).done();
                }
            });

            var searchManager = this.itemsViewModel.searchManager;
            if (searchManager) {
                // register loading handlers for the saved searches
                searchManager.savedSearches.loadSearchInteraction.handle(function (options) {
                    // 1. ensure the module is loaded
                    return _app.history.navigateSilent(_this.url).then(function () {
                        searchManager.advancedPanelActive(true);

                        // 2. load the ruleData in the panel
                        searchManager.searchWidget().loadRule(options.search.ruleData);

                        if (options.execute) {
                            // 3. if required execute the search
                            return searchManager.search();
                        }
                    });
                });
            }

            if (options.breadcrumbTitle) {
                var selectedItemTitle = ko.computed(function () {
                    var item = _this.itemsViewModel.selectedItem();
                    return item ? item[_this.itemsViewModel.jumpToSearch.targetProperty]() : '';
                }), selectedItemLink = ko.computed(function () {
                    return '#' + _this.itemLink(_this.itemsViewModel.selectedItem());
                });

                this.breadcrumb = new _app.Common.Breadcrumb({ text: options.breadcrumbTitle, href: '#' + this.url }, new _app.Common.Breadcrumb({ text: selectedItemTitle, href: selectedItemLink }));
            }
        }
        DataModule.prototype.canUnload = function () {
            if (this.options.barViewModel) {
                return this.options.barViewModel.promiseItemChange();
            } else {
                return Q(true);
            }
        };

        DataModule.prototype.requiredModules = function () {
            return _super.prototype.requiredModules.call(this).concat(this.styleModule, this.codeeffectsStylesModule);
        };

        DataModule.prototype.initialize = function () {
            var _this = this;
            // register module routes
            _app.history.register(this.url, function () {
                return _app.moduleManager.load(_this).then(function () {
                    return _this.itemsViewModel.selectedItem.inject(null);
                });
            });

            if (this.itemsViewModel.jumpToSearch && this.itemsViewModel.jumpToSearch.isActive) {
                _app.history.register(this.url + '/' + this.itemsViewModel.jumpToSearch.targetProperty + '/:value', function (value) {
                    return _app.moduleManager.load(_this).then(function () {
                        return _this.itemsViewModel.jumpToSearch.jump(value, -1, true, false);
                    });
                });
            }
        };

        DataModule.prototype.itemLink = function (entity) {
            return this.url + DataModule.itemLink(entity, this.itemsViewModel.jumpToSearch.targetProperty);
        };

        DataModule.itemLink = function (entity, targetProperty) {
            if (entity) {
                var propertyValue = ko.unwrap(entity[targetProperty]);
                return '/' + targetProperty + '/' + propertyValue;
            } else {
                return '';
            }
        };

        /** this can be used to make a quick jump to the entity selected, will be used on the sidebar */
        DataModule.prototype.navigate = function (entity, executeCallback) {
            if (typeof executeCallback === "undefined") { executeCallback = true; }
            return _app.history.navigateSilent(this.itemLink(entity), executeCallback);
        };
        return DataModule;
    })(_app.Modules.ModuleBase);
    exports.DataModule = DataModule;

    var BarDataModule = (function (_super) {
        __extends(BarDataModule, _super);
        function BarDataModule(options) {
            _super.call(this, options);
            this.wizzardStylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(templates.wizzardStyles);

            this.barViewModel = options.barViewModel;

            // add styles for the wizzard window
            options.coreModule.addSlave(this.wizzardStylesModule);
        }
        /** executed when an element of the sidebar is clicked, this should be protected */
        BarDataModule.prototype.sidebarItemNavigate = function (item) {
            if (!item.entityAspect.entityState.isDetached()) {
                this.navigate(item).done();
            } else {
                this.options.itemsViewModel.showWizzardDialog(item).done();
                ;
            }
        };

        /** creates a new MyItemsCollection and register it on the MyItems module, the created set is returned. */
        BarDataModule.prototype.registerMyItemsSet = function (optionsParameter) {
            var _this = this;
            // Create a MyItemsCollection instance
            var myItems = new Sidebar.MyItems.MyItemsCollection({
                entityType: this.options.itemsViewModel.dataSource.typeName,
                render: function () {
                    return new _app.Marionette.View({ template: optionsParameter.itemTemplate });
                },
                navigate: function (item) {
                    if (!item.entityAspect.entityState.isDetached()) {
                        _this.navigate(item).done();
                    } else {
                        _this.options.itemsViewModel.showWizzardDialog(item).done();
                        ;
                    }
                },
                dataSource: this.options.itemsViewModel.dataSource
            }), itemTitleView = new _app.Marionette.View({ template: optionsParameter.itemTitleTemplate });

            this.options.myItemsModule.registerSet(itemTitleView, myItems);

            if (optionsParameter.styles) {
                /** these styles are applied to the customer items that are visible on the MyCustomers
                section in the sidebar. This stylesheet is loaded as a slave of the MyItems module. */
                var stylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(optionsParameter.styles);

                // this styles enhaces my customers items and must be loaded if the sidebar is loaded
                this.options.myItemsModule.addSlave(stylesModule);
            }

            return myItems;
        };
        return BarDataModule;
    })(DataModule);
    exports.BarDataModule = BarDataModule;

    
});

/// <reference path="../definitions/_definitions.d.ts" />
/// <reference path="../definitions/webrule.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/data-desktop',["require", "exports", '../app', '../app-desktop', './data'], function(require, exports, _app, app, _data) {
    /** For the inline editing mode there's some code that calls specific logic in the grid,
    this logic doesn't belong to the viewModel and thus is here. */
    var InlineDataItemsView = (function (_super) {
        __extends(InlineDataItemsView, _super);
        function InlineDataItemsView() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(InlineDataItemsView.prototype, "grid", {
            get: function () {
                return this.find('.k-grid').data('kendoGrid');
            },
            enumerable: true,
            configurable: true
        });

        /** returns true if there's some change that needs to be synced to the model. */
        InlineDataItemsView.prototype.hasPendingChanges = function () {
            return $(this.grid.tbody).has('.row-added, .row-removed, .row-dirty').length > 0;
        };

        /** syncronizes all pending datagrid changes throught the grid's datasource to the transport
        and to the viewmodel */
        InlineDataItemsView.prototype.syncChanges = function () {
            return this.grid.sync();
        };

        InlineDataItemsView.prototype.addRow = function () {
            this.grid.addRow();
        };

        /** called to reject all the changes on the grid, it should refresh the current data from the server */
        InlineDataItemsView.prototype.refresh = function (local) {
            if (typeof local === "undefined") { local = false; }
            if (!local) {
                this.grid.dataSource.read();
            } else {
                this.grid.dataSource.readLocal();
            }
        };
        return InlineDataItemsView;
    })(_app.Marionette.View);
    exports.InlineDataItemsView = InlineDataItemsView;

    var InlineDataItemsViewModel = (function (_super) {
        __extends(InlineDataItemsViewModel, _super);
        function InlineDataItemsViewModel(dataSource, options) {
            var _this = this;
            _super.call(this, dataSource, options);
            this.errorCollection = ko.observableArray();

            var guard = function (value) {
                if (value === null) {
                    return _this.promisePageChanged();
                } else {
                    return Q(true);
                }
            };
            this.selectedItem.guard(guard);
        }
        InlineDataItemsViewModel.prototype.save = function () {
            var _this = this;
            // clear the error collection
            this.errorCollection.removeAll();
            this.messageQueue.clear();

            return this.view.syncChanges().then(function () {
                // validate the entities before saving them to the server, in case there's some error
                var dataSourceSummary = _this.dataSource.status(), failedEntities = _(_this.dataSource.data).filter(function (entity) {
                    var aspect = entity.entityAspect, isValid = aspect.entityState.isDeleted() || aspect.validateEntity();
                    return !isValid;
                }), anyValidationError = failedEntities.length > 0, entitiesToSave = _.chain(_this.dataSource.data).difference(failedEntities).filter(function (entity) {
                    return entity.entityAspect.entityState.isAddedModifiedOrDeleted();
                }).value();

                if (entitiesToSave) {
                    // if there's some entity to save
                    return _this.dataSource.saveChanges(entitiesToSave).then(function () {
                        if (!anyValidationError) {
                            //this.messageQueue.add(new _app.Common.Message("Success", "items saved successfully"));
                        } else {
                            //this.messageQueue.add(new _app.Common.Message("Warning", "some items saved successfully, however there're others with errors."));
                            _this.addValidationErrorsForEntities(failedEntities);
                        }

                        return true;
                    }).fail(function (error) {
                        // process errors from the server and add them to the validation summary
                        if (error.entityErrors) {
                            var entitiesWithErrors = _(error.entityErrors).map(function (serverError) {
                                return serverError.entity;
                            });
                            _this.addValidationErrorsForEntities(entitiesWithErrors);
                        } else {
                            // this should be a server error
                            _this.messageQueue.clear().add({
                                title: error.status + ' ' + error.statusText,
                                body: error.message, level: 0 /* Error */
                            });
                        }
                        _this.view.refresh(true);
                        return Q.reject();
                    }).finally(function () {
                        // show save summary message
                        var afterSaveSummary = _this.dataSource.status(), added = dataSourceSummary.added - afterSaveSummary.added, modified = dataSourceSummary.modified - afterSaveSummary.modified, deleted = dataSourceSummary.deleted - afterSaveSummary.deleted;

                        if (added || modified || deleted) {
                            _this.messageQueue.clear().add({
                                title: "Entities saved successfully",
                                body: added + " added, " + modified + " modified, " + deleted + " deleted",
                                level: 0 /* Error */
                            });
                        }
                    });
                } else if (anyValidationError) {
                    _this.addValidationErrorsForEntities(failedEntities);
                    return Q.reject(new Error('Validation Error'));
                } else {
                    // there's nothing to do
                    return true;
                }
            });
        };

        /** Validates each passed entity and adds the corresponding validation error to the errorCollection,
        this should be displayed on a validation summary. */
        InlineDataItemsViewModel.prototype.addValidationErrorsForEntities = function (entities) {
            var _this = this;
            _.each(entities, function (entity) {
                _.each(entity.entityAspect.getValidationErrors(), function (error) {
                    _this.errorCollection.push({
                        message: error.errorMessage,
                        navigate: function () {
                            return _this.selectedItem(entity);
                        }
                    });
                });
            });
        };

        /** returns a promise that is resolved if there isn't any entity modified or
        if the user decides to save all changes */
        InlineDataItemsViewModel.prototype.promisePageChanged = function () {
            var _this = this;
            // chech if some item has been modified
            if (this.view.hasPendingChanges()) {
                return this.showMessageBox("Some of the items have changes, do you want to save them?").then(function (result) {
                    if (result === 0 /* Yes */) {
                        return _this.save();
                    } else if (result === 1 /* No */) {
                        // reject changes and procceed with the change
                        _this.dataSource.rejectChanges();
                        return Q(true);
                    } else {
                        // cancel the selection, make the observable fail by throwing an error
                        return Q.reject();
                    }
                });
            } else {
                return Q(true);
            }
        };

        InlineDataItemsViewModel.prototype.rejectAllChanges = function () {
            var _this = this;
            if (this.view.hasPendingChanges()) {
                return this.showMessageBox('Are you sure?', 1 /* QuestionYesNo */).then(function (result) {
                    if (result === 0 /* Yes */) {
                        // reject all the changes of the current entities
                        _.each(_this.dataSource.data, function (entity) {
                            return entity.entityAspect.rejectChanges();
                        });
                        _this.messageQueue.clear();
                        _this.errorCollection.removeAll();
                        _this.view.refresh();
                        return true;
                    } else {
                        return false;
                    }
                });
            } else {
                return Q(false);
            }
        };

        InlineDataItemsViewModel.prototype.addNew = function () {
            this.view.addRow();
            return Q(true);
        };
        return InlineDataItemsViewModel;
    })(_data.DataItemsViewModel);
    exports.InlineDataItemsViewModel = InlineDataItemsViewModel;

    exports.myItemsModule = new _data.Sidebar.MyItems.MyItemsModule(app.sidebarModule);

    exports.mySearchesModule = new _data.Sidebar.MySearches.SavedSearchModule(app.sidebarModule);

    exports.notificationsModule = new _data.Notifications.NotificationModule(app.coreModule, app.notificationsModule);
});

define('metadata/northwind',["require", "exports"], function(require, exports) { 
    
    exports.metadata = "{\r\n  \"schema\": {\r\n    \"namespace\": \"Jigsaw.Data.Northwind\",\r\n    \"alias\": \"Self\",\r\n    \"annotation:UseStrongSpatialTypes\": \"false\",\r\n    \"xmlns:annotation\": \"http://schemas.microsoft.com/ado/2009/02/edm/annotation\",\r\n    \"xmlns\": \"http://schemas.microsoft.com/ado/2009/11/edm\",\r\n    \"cSpaceOSpaceMapping\": \"[[\\\"Jigsaw.Data.Northwind.Category\\\",\\\"Jigsaw.Data.Northwind.Category\\\"],[\\\"Jigsaw.Data.Northwind.Product\\\",\\\"Jigsaw.Data.Northwind.Product\\\"],[\\\"Jigsaw.Data.Northwind.Supplier\\\",\\\"Jigsaw.Data.Northwind.Supplier\\\"],[\\\"Jigsaw.Data.Northwind.Customer\\\",\\\"Jigsaw.Data.Northwind.Customer\\\"],[\\\"Jigsaw.Data.Northwind.Order\\\",\\\"Jigsaw.Data.Northwind.Order\\\"],[\\\"Jigsaw.Data.Northwind.Employee\\\",\\\"Jigsaw.Data.Northwind.Employee\\\"],[\\\"Jigsaw.Data.Northwind.EmployeeTerritory\\\",\\\"Jigsaw.Data.Northwind.EmployeeTerritory\\\"],[\\\"Jigsaw.Data.Northwind.Territory\\\",\\\"Jigsaw.Data.Northwind.Territory\\\"],[\\\"Jigsaw.Data.Northwind.Region\\\",\\\"Jigsaw.Data.Northwind.Region\\\"],[\\\"Jigsaw.Data.Northwind.InternationalOrder\\\",\\\"Jigsaw.Data.Northwind.InternationalOrder\\\"],[\\\"Jigsaw.Data.Northwind.OrderDetail\\\",\\\"Jigsaw.Data.Northwind.OrderDetail\\\"],[\\\"Jigsaw.Data.Northwind.PreviousEmployee\\\",\\\"Jigsaw.Data.Northwind.PreviousEmployee\\\"],[\\\"Jigsaw.Data.Northwind.Role\\\",\\\"Jigsaw.Data.Northwind.Role\\\"],[\\\"Jigsaw.Data.Northwind.UserRole\\\",\\\"Jigsaw.Data.Northwind.UserRole\\\"],[\\\"Jigsaw.Data.Northwind.User\\\",\\\"Jigsaw.Data.Northwind.User\\\"]]\",\r\n    \"entityType\": [\r\n      {\r\n        \"name\": \"Category\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"CategoryID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"CategoryID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"CategoryName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"4000\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Description\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"4000\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Picture\",\r\n            \"type\": \"Edm.Binary\",\r\n            \"maxLength\": \"4000\",\r\n            \"fixedLength\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": {\r\n          \"name\": \"Products\",\r\n          \"relationship\": \"Self.Product_Category\",\r\n          \"fromRole\": \"Product_Category_Target\",\r\n          \"toRole\": \"Product_Category_Source\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Product\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"ProductID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"ProductID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"ProductName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"40\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"SupplierID\",\r\n            \"type\": \"Edm.Int32\"\r\n          },\r\n          {\r\n            \"name\": \"CategoryID\",\r\n            \"type\": \"Edm.Int32\"\r\n          },\r\n          {\r\n            \"name\": \"QuantityPerUnit\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"4000\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"UnitPrice\",\r\n            \"type\": \"Edm.Decimal\",\r\n            \"precision\": \"18\",\r\n            \"scale\": \"2\"\r\n          },\r\n          {\r\n            \"name\": \"UnitsInStock\",\r\n            \"type\": \"Edm.Int16\"\r\n          },\r\n          {\r\n            \"name\": \"UnitsOnOrder\",\r\n            \"type\": \"Edm.Int16\"\r\n          },\r\n          {\r\n            \"name\": \"ReorderLevel\",\r\n            \"type\": \"Edm.Int16\"\r\n          },\r\n          {\r\n            \"name\": \"Discontinued\",\r\n            \"type\": \"Edm.Boolean\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"DiscontinuedDate\",\r\n            \"type\": \"Edm.DateTime\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": [\r\n          {\r\n            \"name\": \"Category\",\r\n            \"relationship\": \"Self.Product_Category\",\r\n            \"fromRole\": \"Product_Category_Source\",\r\n            \"toRole\": \"Product_Category_Target\"\r\n          },\r\n          {\r\n            \"name\": \"Supplier\",\r\n            \"relationship\": \"Self.Product_Supplier\",\r\n            \"fromRole\": \"Product_Supplier_Source\",\r\n            \"toRole\": \"Product_Supplier_Target\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"Supplier\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"SupplierID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"SupplierID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"CompanyName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"40\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"ContactName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"30\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ContactTitle\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"30\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Address\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"60\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"City\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Region\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"PostalCode\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"10\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Country\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Phone\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"24\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Fax\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"24\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"HomePage\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"4000\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"UserSessionId\",\r\n            \"type\": \"Edm.Guid\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": {\r\n          \"name\": \"Products\",\r\n          \"relationship\": \"Self.Product_Supplier\",\r\n          \"fromRole\": \"Product_Supplier_Target\",\r\n          \"toRole\": \"Product_Supplier_Source\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Customer\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"CustomerID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"CustomerID\",\r\n            \"type\": \"Edm.Guid\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"None\",\r\n            \"custom\": {\r\n              \"displayName\": \"Customer ID\",\r\n              \"description\": null\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"CustomerID_OLD\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"5\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"CompanyName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"40\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"nullable\": \"false\",\r\n            \"custom\": {\r\n              \"displayName\": \"Company Name\",\r\n              \"description\": \"The Company Name\"\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"ContactName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"30\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"custom\": {\r\n              \"displayName\": \"Contact Name\",\r\n              \"description\": \"Full Name of the customer\"\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"ContactTitle\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"30\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"custom\": {\r\n              \"displayName\": \"Contact Title\",\r\n              \"description\": \"Contact Title\"\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"Address\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"60\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"custom\": {\r\n              \"displayName\": null,\r\n              \"description\": \"Address not including the city and country.\"\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"City\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Region\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"PostalCode\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"10\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"custom\": {\r\n              \"displayName\": \"Postal Code\",\r\n              \"description\": null\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"Country\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Phone\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"24\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"custom\": {\r\n              \"displayName\": null,\r\n              \"description\": \"Last known phone.\"\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"Fax\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"24\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"concurrencyMode\": \"Fixed\"\r\n          },\r\n          {\r\n            \"name\": \"UserSessionId\",\r\n            \"type\": \"Edm.Guid\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": {\r\n          \"name\": \"Orders\",\r\n          \"relationship\": \"Self.Order_Customer\",\r\n          \"fromRole\": \"Order_Customer_Target\",\r\n          \"toRole\": \"Order_Customer_Source\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Order\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"OrderID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"OrderID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"CustomerID\",\r\n            \"type\": \"Edm.Guid\"\r\n          },\r\n          {\r\n            \"name\": \"EmployeeID\",\r\n            \"type\": \"Edm.Int32\"\r\n          },\r\n          {\r\n            \"name\": \"OrderDate\",\r\n            \"type\": \"Edm.DateTime\"\r\n          },\r\n          {\r\n            \"name\": \"RequiredDate\",\r\n            \"type\": \"Edm.DateTime\"\r\n          },\r\n          {\r\n            \"name\": \"ShippedDate\",\r\n            \"type\": \"Edm.DateTime\"\r\n          },\r\n          {\r\n            \"name\": \"Freight\",\r\n            \"type\": \"Edm.Decimal\",\r\n            \"precision\": \"18\",\r\n            \"scale\": \"2\"\r\n          },\r\n          {\r\n            \"name\": \"ShipName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"40\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ShipAddress\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"60\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ShipCity\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ShipRegion\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ShipPostalCode\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"10\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ShipCountry\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"UserSessionId\",\r\n            \"type\": \"Edm.Guid\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": [\r\n          {\r\n            \"name\": \"Customer\",\r\n            \"relationship\": \"Self.Order_Customer\",\r\n            \"fromRole\": \"Order_Customer_Source\",\r\n            \"toRole\": \"Order_Customer_Target\"\r\n          },\r\n          {\r\n            \"name\": \"Employee\",\r\n            \"relationship\": \"Self.Employee_Orders\",\r\n            \"fromRole\": \"Employee_Orders_Target\",\r\n            \"toRole\": \"Employee_Orders_Source\"\r\n          },\r\n          {\r\n            \"name\": \"InternationalOrder\",\r\n            \"relationship\": \"Self.Order_InternationalOrder\",\r\n            \"fromRole\": \"Order_InternationalOrder_Source\",\r\n            \"toRole\": \"Order_InternationalOrder_Target\"\r\n          },\r\n          {\r\n            \"name\": \"OrderDetails\",\r\n            \"relationship\": \"Self.OrderDetail_Order\",\r\n            \"fromRole\": \"OrderDetail_Order_Target\",\r\n            \"toRole\": \"OrderDetail_Order_Source\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"Employee\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"EmployeeID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"EmployeeID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"LastName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"30\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"nullable\": \"false\",\r\n            \"custom\": {\r\n              \"displayName\": \"Last Name\",\r\n              \"description\": null\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"FirstName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"30\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"nullable\": \"false\",\r\n            \"custom\": {\r\n              \"displayName\": \"First Name\",\r\n              \"description\": null\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"Title\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"30\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"TitleOfCourtesy\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"25\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"custom\": {\r\n              \"displayName\": \"Title of Courtesy\",\r\n              \"description\": null\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"BirthDate\",\r\n            \"type\": \"Edm.DateTime\"\r\n          },\r\n          {\r\n            \"name\": \"HireDate\",\r\n            \"type\": \"Edm.DateTime\"\r\n          },\r\n          {\r\n            \"name\": \"Address\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"60\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"City\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Region\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"PostalCode\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"10\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Country\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"HomePhone\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"24\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Extension\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"4\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Photo\",\r\n            \"type\": \"Edm.Binary\",\r\n            \"maxLength\": \"4000\",\r\n            \"fixedLength\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"Notes\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"4000\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"PhotoPath\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"255\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ReportsToEmployeeID\",\r\n            \"type\": \"Edm.Int32\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"UserSessionId\",\r\n            \"type\": \"Edm.Guid\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": [\r\n          {\r\n            \"name\": \"DirectReports\",\r\n            \"relationship\": \"Self.Employee_DirectReports\",\r\n            \"fromRole\": \"Employee_DirectReports_Source\",\r\n            \"toRole\": \"Employee_DirectReports_Target\"\r\n          },\r\n          {\r\n            \"name\": \"EmployeeTerritories\",\r\n            \"relationship\": \"Self.Employee_EmployeeTerritories\",\r\n            \"fromRole\": \"Employee_EmployeeTerritories_Source\",\r\n            \"toRole\": \"Employee_EmployeeTerritories_Target\"\r\n          },\r\n          {\r\n            \"name\": \"Manager\",\r\n            \"relationship\": \"Self.Employee_DirectReports\",\r\n            \"fromRole\": \"Employee_DirectReports_Target\",\r\n            \"toRole\": \"Employee_DirectReports_Source\"\r\n          },\r\n          {\r\n            \"name\": \"Orders\",\r\n            \"relationship\": \"Self.Employee_Orders\",\r\n            \"fromRole\": \"Employee_Orders_Source\",\r\n            \"toRole\": \"Employee_Orders_Target\"\r\n          },\r\n          {\r\n            \"name\": \"Territories\",\r\n            \"relationship\": \"Self.Employee_Territories\",\r\n            \"fromRole\": \"Employee_Territories_Source\",\r\n            \"toRole\": \"Employee_Territories_Target\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"EmployeeTerritory\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"ID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"ID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"EmployeeID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"TerritoryID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": [\r\n          {\r\n            \"name\": \"Employee\",\r\n            \"relationship\": \"Self.Employee_EmployeeTerritories\",\r\n            \"fromRole\": \"Employee_EmployeeTerritories_Target\",\r\n            \"toRole\": \"Employee_EmployeeTerritories_Source\"\r\n          },\r\n          {\r\n            \"name\": \"Territory\",\r\n            \"relationship\": \"Self.EmployeeTerritory_Territory\",\r\n            \"fromRole\": \"EmployeeTerritory_Territory_Source\",\r\n            \"toRole\": \"EmployeeTerritory_Territory_Target\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"Territory\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"TerritoryID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"TerritoryID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"TerritoryDescription\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"50\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"RegionID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": [\r\n          {\r\n            \"name\": \"Employees\",\r\n            \"relationship\": \"Self.Employee_Territories\",\r\n            \"fromRole\": \"Employee_Territories_Target\",\r\n            \"toRole\": \"Employee_Territories_Source\"\r\n          },\r\n          {\r\n            \"name\": \"EmployeeTerritories\",\r\n            \"relationship\": \"Self.EmployeeTerritory_Territory\",\r\n            \"fromRole\": \"EmployeeTerritory_Territory_Target\",\r\n            \"toRole\": \"EmployeeTerritory_Territory_Source\"\r\n          },\r\n          {\r\n            \"name\": \"Region\",\r\n            \"relationship\": \"Self.Region_Territories\",\r\n            \"fromRole\": \"Region_Territories_Target\",\r\n            \"toRole\": \"Region_Territories_Source\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"Region\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"RegionID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"RegionID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"None\"\r\n          },\r\n          {\r\n            \"name\": \"RegionDescription\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"50\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": {\r\n          \"name\": \"Territories\",\r\n          \"relationship\": \"Self.Region_Territories\",\r\n          \"fromRole\": \"Region_Territories_Source\",\r\n          \"toRole\": \"Region_Territories_Target\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"InternationalOrder\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"OrderID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"OrderID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"None\"\r\n          },\r\n          {\r\n            \"name\": \"CustomsDescription\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"100\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ExciseTax\",\r\n            \"type\": \"Edm.Decimal\",\r\n            \"precision\": \"18\",\r\n            \"scale\": \"2\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"UserSessionId\",\r\n            \"type\": \"Edm.Guid\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": {\r\n          \"name\": \"Order\",\r\n          \"relationship\": \"Self.Order_InternationalOrder\",\r\n          \"fromRole\": \"Order_InternationalOrder_Target\",\r\n          \"toRole\": \"Order_InternationalOrder_Source\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"OrderDetail\",\r\n        \"key\": {\r\n          \"propertyRef\": [\r\n            {\r\n              \"name\": \"OrderID\"\r\n            },\r\n            {\r\n              \"name\": \"ProductID\"\r\n            }\r\n          ]\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"OrderID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"None\"\r\n          },\r\n          {\r\n            \"name\": \"ProductID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"None\"\r\n          },\r\n          {\r\n            \"name\": \"UnitPrice\",\r\n            \"type\": \"Edm.Decimal\",\r\n            \"precision\": \"18\",\r\n            \"scale\": \"2\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"Quantity\",\r\n            \"type\": \"Edm.Int16\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"Discount\",\r\n            \"type\": \"Edm.Single\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"UserSessionId\",\r\n            \"type\": \"Edm.Guid\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": [\r\n          {\r\n            \"name\": \"Order\",\r\n            \"relationship\": \"Self.OrderDetail_Order\",\r\n            \"fromRole\": \"OrderDetail_Order_Source\",\r\n            \"toRole\": \"OrderDetail_Order_Target\"\r\n          },\r\n          {\r\n            \"name\": \"Product\",\r\n            \"relationship\": \"Self.OrderDetail_Product\",\r\n            \"fromRole\": \"OrderDetail_Product_Source\",\r\n            \"toRole\": \"OrderDetail_Product_Target\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"PreviousEmployee\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"EmployeeID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"EmployeeID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"None\"\r\n          },\r\n          {\r\n            \"name\": \"LastName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"30\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"FirstName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"30\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"Title\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"30\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"TitleOfCourtesy\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"25\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"BirthDate\",\r\n            \"type\": \"Edm.DateTime\"\r\n          },\r\n          {\r\n            \"name\": \"HireDate\",\r\n            \"type\": \"Edm.DateTime\"\r\n          },\r\n          {\r\n            \"name\": \"Address\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"60\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"City\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Region\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"PostalCode\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"10\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Country\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"15\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"HomePhone\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"24\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Extension\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"4\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Photo\",\r\n            \"type\": \"Edm.Binary\",\r\n            \"maxLength\": \"4000\",\r\n            \"fixedLength\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"Notes\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"4000\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"PhotoPath\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"255\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ReportsToEmployeeID\",\r\n            \"type\": \"Edm.Int32\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"Role\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"Id\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"Id\",\r\n            \"type\": \"Edm.Int64\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"Name\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"50\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"Description\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"2000\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": {\r\n          \"name\": \"UserRoles\",\r\n          \"relationship\": \"Self.Role_UserRoles\",\r\n          \"fromRole\": \"Role_UserRoles_Source\",\r\n          \"toRole\": \"Role_UserRoles_Target\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"UserRole\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"ID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"ID\",\r\n            \"type\": \"Edm.Int64\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"UserId\",\r\n            \"type\": \"Edm.Int64\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"RoleId\",\r\n            \"type\": \"Edm.Int64\",\r\n            \"nullable\": \"false\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": [\r\n          {\r\n            \"name\": \"Role\",\r\n            \"relationship\": \"Self.Role_UserRoles\",\r\n            \"fromRole\": \"Role_UserRoles_Target\",\r\n            \"toRole\": \"Role_UserRoles_Source\"\r\n          },\r\n          {\r\n            \"name\": \"User\",\r\n            \"relationship\": \"Self.UserRole_User\",\r\n            \"fromRole\": \"UserRole_User_Source\",\r\n            \"toRole\": \"UserRole_User_Target\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"User\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"Id\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"Id\",\r\n            \"type\": \"Edm.Int64\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"UserName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"100\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"UserPassword\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"200\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"FirstName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"100\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"LastName\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"100\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Email\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"100\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"RowVersion\",\r\n            \"type\": \"Edm.Decimal\",\r\n            \"precision\": \"18\",\r\n            \"scale\": \"2\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"CreatedBy\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"100\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"CreatedByUserId\",\r\n            \"type\": \"Edm.Int64\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"CreatedDate\",\r\n            \"type\": \"Edm.DateTime\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"ModifiedBy\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"100\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ModifiedByUserId\",\r\n            \"type\": \"Edm.Int64\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"ModifiedDate\",\r\n            \"type\": \"Edm.DateTime\",\r\n            \"concurrencyMode\": \"Fixed\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"UserSessionId\",\r\n            \"type\": \"Edm.Guid\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": {\r\n          \"name\": \"UserRoles\",\r\n          \"relationship\": \"Self.UserRole_User\",\r\n          \"fromRole\": \"UserRole_User_Target\",\r\n          \"toRole\": \"UserRole_User_Source\"\r\n        }\r\n      }\r\n    ],\r\n    \"association\": [\r\n      {\r\n        \"name\": \"Product_Category\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Product_Category_Source\",\r\n            \"type\": \"Edm.Self.Product\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"Product_Category_Target\",\r\n            \"type\": \"Edm.Self.Category\",\r\n            \"multiplicity\": \"0..1\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"Product_Category_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"CategoryID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"Product_Category_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"CategoryID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Product_Supplier\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Product_Supplier_Source\",\r\n            \"type\": \"Edm.Self.Product\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"Product_Supplier_Target\",\r\n            \"type\": \"Edm.Self.Supplier\",\r\n            \"multiplicity\": \"0..1\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"Product_Supplier_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"SupplierID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"Product_Supplier_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"SupplierID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Order_Customer\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Order_Customer_Source\",\r\n            \"type\": \"Edm.Self.Order\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"Order_Customer_Target\",\r\n            \"type\": \"Edm.Self.Customer\",\r\n            \"multiplicity\": \"0..1\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"Order_Customer_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"CustomerID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"Order_Customer_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"CustomerID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Employee_DirectReports\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Employee_DirectReports_Source\",\r\n            \"type\": \"Edm.Self.Employee\",\r\n            \"multiplicity\": \"0..1\"\r\n          },\r\n          {\r\n            \"role\": \"Employee_DirectReports_Target\",\r\n            \"type\": \"Edm.Self.Employee\",\r\n            \"multiplicity\": \"*\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"Employee_DirectReports_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"EmployeeID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"Employee_DirectReports_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"ReportsToEmployeeID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Region_Territories\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Region_Territories_Source\",\r\n            \"type\": \"Edm.Self.Region\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          },\r\n          {\r\n            \"role\": \"Region_Territories_Target\",\r\n            \"type\": \"Edm.Self.Territory\",\r\n            \"multiplicity\": \"*\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"Region_Territories_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"RegionID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"Region_Territories_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"RegionID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"EmployeeTerritory_Territory\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"EmployeeTerritory_Territory_Source\",\r\n            \"type\": \"Edm.Self.EmployeeTerritory\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"EmployeeTerritory_Territory_Target\",\r\n            \"type\": \"Edm.Self.Territory\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"EmployeeTerritory_Territory_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"TerritoryID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"EmployeeTerritory_Territory_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"TerritoryID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Employee_EmployeeTerritories\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Employee_EmployeeTerritories_Source\",\r\n            \"type\": \"Edm.Self.Employee\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          },\r\n          {\r\n            \"role\": \"Employee_EmployeeTerritories_Target\",\r\n            \"type\": \"Edm.Self.EmployeeTerritory\",\r\n            \"multiplicity\": \"*\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"Employee_EmployeeTerritories_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"EmployeeID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"Employee_EmployeeTerritories_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"EmployeeID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Employee_Orders\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Employee_Orders_Source\",\r\n            \"type\": \"Edm.Self.Employee\",\r\n            \"multiplicity\": \"0..1\"\r\n          },\r\n          {\r\n            \"role\": \"Employee_Orders_Target\",\r\n            \"type\": \"Edm.Self.Order\",\r\n            \"multiplicity\": \"*\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"Employee_Orders_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"EmployeeID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"Employee_Orders_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"EmployeeID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Employee_Territories\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Employee_Territories_Source\",\r\n            \"type\": \"Edm.Self.Employee\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"Employee_Territories_Target\",\r\n            \"type\": \"Edm.Self.Territory\",\r\n            \"multiplicity\": \"*\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"Order_InternationalOrder\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Order_InternationalOrder_Source\",\r\n            \"type\": \"Edm.Self.Order\",\r\n            \"multiplicity\": \"1\"\r\n          },\r\n          {\r\n            \"role\": \"Order_InternationalOrder_Target\",\r\n            \"type\": \"Edm.Self.InternationalOrder\",\r\n            \"multiplicity\": \"0..1\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"Order_InternationalOrder_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"OrderID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"Order_InternationalOrder_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"OrderID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"OrderDetail_Order\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"OrderDetail_Order_Source\",\r\n            \"type\": \"Edm.Self.OrderDetail\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"OrderDetail_Order_Target\",\r\n            \"type\": \"Edm.Self.Order\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"OrderDetail_Order_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"OrderID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"OrderDetail_Order_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"OrderID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"OrderDetail_Product\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"OrderDetail_Product_Source\",\r\n            \"type\": \"Edm.Self.OrderDetail\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"OrderDetail_Product_Target\",\r\n            \"type\": \"Edm.Self.Product\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"OrderDetail_Product_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"ProductID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"OrderDetail_Product_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"ProductID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"UserRole_User\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"UserRole_User_Source\",\r\n            \"type\": \"Edm.Self.UserRole\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"UserRole_User_Target\",\r\n            \"type\": \"Edm.Self.User\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"UserRole_User_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"Id\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"UserRole_User_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"UserId\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Role_UserRoles\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Role_UserRoles_Source\",\r\n            \"type\": \"Edm.Self.Role\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          },\r\n          {\r\n            \"role\": \"Role_UserRoles_Target\",\r\n            \"type\": \"Edm.Self.UserRole\",\r\n            \"multiplicity\": \"*\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"Role_UserRoles_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"Id\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"Role_UserRoles_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"RoleId\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    ],\r\n    \"entityContainer\": {\r\n      \"name\": \"NorthwindContext\",\r\n      \"entitySet\": [\r\n        {\r\n          \"name\": \"Categories\",\r\n          \"entityType\": \"Self.Category\"\r\n        },\r\n        {\r\n          \"name\": \"Products\",\r\n          \"entityType\": \"Self.Product\"\r\n        },\r\n        {\r\n          \"name\": \"Suppliers\",\r\n          \"entityType\": \"Self.Supplier\"\r\n        },\r\n        {\r\n          \"name\": \"Customers\",\r\n          \"entityType\": \"Self.Customer\"\r\n        },\r\n        {\r\n          \"name\": \"Orders\",\r\n          \"entityType\": \"Self.Order\"\r\n        },\r\n        {\r\n          \"name\": \"Employees\",\r\n          \"entityType\": \"Self.Employee\"\r\n        },\r\n        {\r\n          \"name\": \"EmployeeTerritories\",\r\n          \"entityType\": \"Self.EmployeeTerritory\"\r\n        },\r\n        {\r\n          \"name\": \"Territories\",\r\n          \"entityType\": \"Self.Territory\"\r\n        },\r\n        {\r\n          \"name\": \"Regions\",\r\n          \"entityType\": \"Self.Region\"\r\n        },\r\n        {\r\n          \"name\": \"InternationalOrders\",\r\n          \"entityType\": \"Self.InternationalOrder\"\r\n        },\r\n        {\r\n          \"name\": \"OrderDetails\",\r\n          \"entityType\": \"Self.OrderDetail\"\r\n        },\r\n        {\r\n          \"name\": \"PreviousEmployees\",\r\n          \"entityType\": \"Self.PreviousEmployee\"\r\n        },\r\n        {\r\n          \"name\": \"Roles\",\r\n          \"entityType\": \"Self.Role\"\r\n        },\r\n        {\r\n          \"name\": \"UserRoles\",\r\n          \"entityType\": \"Self.UserRole\"\r\n        },\r\n        {\r\n          \"name\": \"Users\",\r\n          \"entityType\": \"Self.User\"\r\n        }\r\n      ],\r\n      \"associationSet\": [\r\n        {\r\n          \"name\": \"Product_Category\",\r\n          \"association\": \"Self.Product_Category\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Product_Category_Source\",\r\n              \"entitySet\": \"Products\"\r\n            },\r\n            {\r\n              \"role\": \"Product_Category_Target\",\r\n              \"entitySet\": \"Categories\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"Product_Supplier\",\r\n          \"association\": \"Self.Product_Supplier\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Product_Supplier_Source\",\r\n              \"entitySet\": \"Products\"\r\n            },\r\n            {\r\n              \"role\": \"Product_Supplier_Target\",\r\n              \"entitySet\": \"Suppliers\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"Order_Customer\",\r\n          \"association\": \"Self.Order_Customer\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Order_Customer_Source\",\r\n              \"entitySet\": \"Orders\"\r\n            },\r\n            {\r\n              \"role\": \"Order_Customer_Target\",\r\n              \"entitySet\": \"Customers\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"Employee_DirectReports\",\r\n          \"association\": \"Self.Employee_DirectReports\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Employee_DirectReports_Source\",\r\n              \"entitySet\": \"Employees\"\r\n            },\r\n            {\r\n              \"role\": \"Employee_DirectReports_Target\",\r\n              \"entitySet\": \"Employees\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"Region_Territories\",\r\n          \"association\": \"Self.Region_Territories\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Region_Territories_Source\",\r\n              \"entitySet\": \"Regions\"\r\n            },\r\n            {\r\n              \"role\": \"Region_Territories_Target\",\r\n              \"entitySet\": \"Territories\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"EmployeeTerritory_Territory\",\r\n          \"association\": \"Self.EmployeeTerritory_Territory\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"EmployeeTerritory_Territory_Source\",\r\n              \"entitySet\": \"EmployeeTerritories\"\r\n            },\r\n            {\r\n              \"role\": \"EmployeeTerritory_Territory_Target\",\r\n              \"entitySet\": \"Territories\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"Employee_EmployeeTerritories\",\r\n          \"association\": \"Self.Employee_EmployeeTerritories\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Employee_EmployeeTerritories_Source\",\r\n              \"entitySet\": \"Employees\"\r\n            },\r\n            {\r\n              \"role\": \"Employee_EmployeeTerritories_Target\",\r\n              \"entitySet\": \"EmployeeTerritories\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"Employee_Orders\",\r\n          \"association\": \"Self.Employee_Orders\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Employee_Orders_Source\",\r\n              \"entitySet\": \"Employees\"\r\n            },\r\n            {\r\n              \"role\": \"Employee_Orders_Target\",\r\n              \"entitySet\": \"Orders\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"Employee_Territories\",\r\n          \"association\": \"Self.Employee_Territories\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Employee_Territories_Source\",\r\n              \"entitySet\": \"Employees\"\r\n            },\r\n            {\r\n              \"role\": \"Employee_Territories_Target\",\r\n              \"entitySet\": \"Territories\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"Order_InternationalOrder\",\r\n          \"association\": \"Self.Order_InternationalOrder\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Order_InternationalOrder_Source\",\r\n              \"entitySet\": \"Orders\"\r\n            },\r\n            {\r\n              \"role\": \"Order_InternationalOrder_Target\",\r\n              \"entitySet\": \"InternationalOrders\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"OrderDetail_Order\",\r\n          \"association\": \"Self.OrderDetail_Order\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"OrderDetail_Order_Source\",\r\n              \"entitySet\": \"OrderDetails\"\r\n            },\r\n            {\r\n              \"role\": \"OrderDetail_Order_Target\",\r\n              \"entitySet\": \"Orders\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"OrderDetail_Product\",\r\n          \"association\": \"Self.OrderDetail_Product\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"OrderDetail_Product_Source\",\r\n              \"entitySet\": \"OrderDetails\"\r\n            },\r\n            {\r\n              \"role\": \"OrderDetail_Product_Target\",\r\n              \"entitySet\": \"Products\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"UserRole_User\",\r\n          \"association\": \"Self.UserRole_User\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"UserRole_User_Source\",\r\n              \"entitySet\": \"UserRoles\"\r\n            },\r\n            {\r\n              \"role\": \"UserRole_User_Target\",\r\n              \"entitySet\": \"Users\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"Role_UserRoles\",\r\n          \"association\": \"Self.Role_UserRoles\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Role_UserRoles_Source\",\r\n              \"entitySet\": \"Roles\"\r\n            },\r\n            {\r\n              \"role\": \"Role_UserRoles_Target\",\r\n              \"entitySet\": \"UserRoles\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}";
    exports.loadCodeRuleCustomerSearchSettings = "{\"ui\":[false,true,\"Get records where\",\"\",false,null,false,true,true,true,null,null],\"s\":{\"lbl\":{\"c\":\"Add a calculation...\",\"s\":\"Enter a string...\",\"b\":\"Select a value...\",\"e\":\"Select a value...\",\"m\":\"Enter a number...\",\"v\":\"Pick a date...\",\"j\":\"Pick a time...\",\"g\":\"- click here to begin a new filter -\",\"t\":\"True\",\"f\":\"False\"},\"fls\":[{\"n\":\"\",\"v\":\"if\",\"t\":0}],\"cls\":[{\"n\":\"and\",\"v\":\"and\",\"t\":6},{\"n\":\"or\",\"v\":\"or\",\"t\":6}],\"ops\":[{\"n\":\"is\",\"v\":\"equal\",\"o\":4,\"t\":3,\"ai\":4},{\"n\":\"has no value\",\"v\":\"isNull\",\"o\":4,\"t\":3,\"ai\":4},{\"n\":\"has any value\",\"v\":\"isNotNull\",\"o\":4,\"t\":3,\"ai\":4},{\"n\":\"is equal to\",\"v\":\"equal\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is not equal to\",\"v\":\"notEqual\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is greater than\",\"v\":\"greater\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is greater than or equal to\",\"v\":\"greaterOrEqual\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is less than\",\"v\":\"less\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is less than or equal to\",\"v\":\"lessOrEqual\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"has no value\",\"v\":\"isNull\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"has any value\",\"v\":\"isNotNull\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is\",\"v\":\"equal\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"is not\",\"v\":\"notEqual\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"contains\",\"v\":\"contains\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"does not contain\",\"v\":\"doesNotContain\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"starts with\",\"v\":\"startsWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"does not start with\",\"v\":\"doesNotStartWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"ends with\",\"v\":\"endsWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"does not end with\",\"v\":\"doesNotEndWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"has no value\",\"v\":\"isNull\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"has any value\",\"v\":\"isNotNull\",\"o\":0,\"t\":3,\"ai\":4}],\"fds\":[{\"n\":\"Address\",\"v\":\"Address\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"CanAdd\",\"v\":\"19E3B5767437053092FC13F6E8A37C50\",\"t\":2,\"ps\":[],\"rt\":{\"o\":0,\"ai\":4,\"l\":true,\"max\":256}},{\"n\":\"City\",\"v\":\"City\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"CompanyName\",\"v\":\"CompanyName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"ContactName\",\"v\":\"ContactName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"ContactTitle\",\"v\":\"ContactTitle\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Country\",\"v\":\"Country\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"CustomerID_OLD\",\"v\":\"CustomerID_OLD\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Fax\",\"v\":\"Fax\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Phone\",\"v\":\"Phone\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"PostalCode\",\"v\":\"PostalCode\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Region\",\"v\":\"Region\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"RowVersion\",\"v\":\"RowVersion\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":true}]}}";
    exports.loadCodeRuleEmployeeSearchSettings = "{\"ui\":[false,true,\"Get records where\",\"\",false,null,false,true,true,true,null,null],\"s\":{\"lbl\":{\"c\":\"Add a calculation...\",\"s\":\"Enter a string...\",\"b\":\"Select a value...\",\"e\":\"Select a value...\",\"m\":\"Enter a number...\",\"v\":\"Pick a date...\",\"j\":\"Pick a time...\",\"g\":\"- click here to begin a new filter -\",\"t\":\"True\",\"f\":\"False\"},\"fls\":[{\"n\":\"\",\"v\":\"if\",\"t\":0}],\"cls\":[{\"n\":\"and\",\"v\":\"and\",\"t\":6},{\"n\":\"or\",\"v\":\"or\",\"t\":6}],\"ops\":[{\"n\":\"is\",\"v\":\"equal\",\"o\":4,\"t\":3,\"ai\":4},{\"n\":\"is equal to\",\"v\":\"equal\",\"o\":2,\"t\":3,\"ai\":4},{\"n\":\"is not equal to\",\"v\":\"notEqual\",\"o\":2,\"t\":3,\"ai\":4},{\"n\":\"is in the future of\",\"v\":\"greater\",\"o\":2,\"t\":3,\"ai\":4},{\"n\":\"is in the future of or equal to\",\"v\":\"greaterOrEqual\",\"o\":2,\"t\":3,\"ai\":4},{\"n\":\"is in the past of\",\"v\":\"less\",\"o\":2,\"t\":3,\"ai\":4},{\"n\":\"is in the past of or equal to\",\"v\":\"lessOrEqual\",\"o\":2,\"t\":3,\"ai\":4},{\"n\":\"has no value\",\"v\":\"isNull\",\"o\":2,\"t\":3,\"ai\":4},{\"n\":\"has any value\",\"v\":\"isNotNull\",\"o\":2,\"t\":3,\"ai\":4},{\"n\":\"is equal to\",\"v\":\"equal\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is not equal to\",\"v\":\"notEqual\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is greater than\",\"v\":\"greater\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is greater than or equal to\",\"v\":\"greaterOrEqual\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is less than\",\"v\":\"less\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is less than or equal to\",\"v\":\"lessOrEqual\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is\",\"v\":\"equal\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"is not\",\"v\":\"notEqual\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"contains\",\"v\":\"contains\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"does not contain\",\"v\":\"doesNotContain\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"starts with\",\"v\":\"startsWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"does not start with\",\"v\":\"doesNotStartWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"ends with\",\"v\":\"endsWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"does not end with\",\"v\":\"doesNotEndWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"has no value\",\"v\":\"isNull\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"has any value\",\"v\":\"isNotNull\",\"o\":0,\"t\":3,\"ai\":4}],\"fds\":[{\"n\":\"Address\",\"v\":\"Address\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"BirthDate\",\"v\":\"BirthDate\",\"o\":2,\"ai\":4,\"t\":1,\"f\":\"MMM dd, yyyy\",\"l\":true},{\"n\":\"CanAdd\",\"v\":\"289CD63445D4B6E1E52B21ADA77EC0C6\",\"t\":2,\"ps\":[],\"rt\":{\"o\":0,\"ai\":4,\"l\":true,\"max\":256}},{\"n\":\"City\",\"v\":\"City\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Country\",\"v\":\"Country\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"EmployeeID\",\"v\":\"EmployeeID\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Extension\",\"v\":\"Extension\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"FirstName\",\"v\":\"FirstName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"FullName\",\"v\":\"FullName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"HireDate\",\"v\":\"HireDate\",\"o\":2,\"ai\":4,\"t\":1,\"f\":\"MMM dd, yyyy\",\"l\":true},{\"n\":\"HomePhone\",\"v\":\"HomePhone\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"LastName\",\"v\":\"LastName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Address\",\"v\":\"Manager.Address\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.BirthDate\",\"v\":\"Manager.BirthDate\",\"o\":2,\"ai\":4,\"t\":1,\"f\":\"MMM dd, yyyy\",\"l\":true},{\"n\":\"Manager.City\",\"v\":\"Manager.City\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Country\",\"v\":\"Manager.Country\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.EmployeeID\",\"v\":\"Manager.EmployeeID\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Extension\",\"v\":\"Manager.Extension\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.FirstName\",\"v\":\"Manager.FirstName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.FullName\",\"v\":\"Manager.FullName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.HireDate\",\"v\":\"Manager.HireDate\",\"o\":2,\"ai\":4,\"t\":1,\"f\":\"MMM dd, yyyy\",\"l\":true},{\"n\":\"Manager.HomePhone\",\"v\":\"Manager.HomePhone\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.LastName\",\"v\":\"Manager.LastName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Address\",\"v\":\"Manager.Manager.Address\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.BirthDate\",\"v\":\"Manager.Manager.BirthDate\",\"o\":2,\"ai\":4,\"t\":1,\"f\":\"MMM dd, yyyy\",\"l\":true},{\"n\":\"Manager.Manager.City\",\"v\":\"Manager.Manager.City\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Country\",\"v\":\"Manager.Manager.Country\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.EmployeeID\",\"v\":\"Manager.Manager.EmployeeID\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Manager.Extension\",\"v\":\"Manager.Manager.Extension\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.FirstName\",\"v\":\"Manager.Manager.FirstName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.FullName\",\"v\":\"Manager.Manager.FullName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.HireDate\",\"v\":\"Manager.Manager.HireDate\",\"o\":2,\"ai\":4,\"t\":1,\"f\":\"MMM dd, yyyy\",\"l\":true},{\"n\":\"Manager.Manager.HomePhone\",\"v\":\"Manager.Manager.HomePhone\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.LastName\",\"v\":\"Manager.Manager.LastName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.Address\",\"v\":\"Manager.Manager.Manager.Address\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.BirthDate\",\"v\":\"Manager.Manager.Manager.BirthDate\",\"o\":2,\"ai\":4,\"t\":1,\"f\":\"MMM dd, yyyy\",\"l\":true},{\"n\":\"Manager.Manager.Manager.City\",\"v\":\"Manager.Manager.Manager.City\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.Country\",\"v\":\"Manager.Manager.Manager.Country\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.EmployeeID\",\"v\":\"Manager.Manager.Manager.EmployeeID\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Manager.Manager.Extension\",\"v\":\"Manager.Manager.Manager.Extension\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.FirstName\",\"v\":\"Manager.Manager.Manager.FirstName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.FullName\",\"v\":\"Manager.Manager.Manager.FullName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.HireDate\",\"v\":\"Manager.Manager.Manager.HireDate\",\"o\":2,\"ai\":4,\"t\":1,\"f\":\"MMM dd, yyyy\",\"l\":true},{\"n\":\"Manager.Manager.Manager.HomePhone\",\"v\":\"Manager.Manager.Manager.HomePhone\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.LastName\",\"v\":\"Manager.Manager.Manager.LastName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.Notes\",\"v\":\"Manager.Manager.Manager.Notes\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.PhotoPath\",\"v\":\"Manager.Manager.Manager.PhotoPath\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.PostalCode\",\"v\":\"Manager.Manager.Manager.PostalCode\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.Region\",\"v\":\"Manager.Manager.Manager.Region\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.ReportsToEmployeeID\",\"v\":\"Manager.Manager.Manager.ReportsToEmployeeID\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":true},{\"n\":\"Manager.Manager.Manager.RowVersion\",\"v\":\"Manager.Manager.Manager.RowVersion\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Manager.Manager.Title\",\"v\":\"Manager.Manager.Manager.Title\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Manager.TitleOfCourtesy\",\"v\":\"Manager.Manager.Manager.TitleOfCourtesy\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Notes\",\"v\":\"Manager.Manager.Notes\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Photo.IsFixedSize\",\"v\":\"Manager.Manager.Photo.IsFixedSize\",\"o\":4,\"t\":1,\"ai\":4,\"l\":false},{\"n\":\"Manager.Manager.Photo.IsReadOnly\",\"v\":\"Manager.Manager.Photo.IsReadOnly\",\"o\":4,\"t\":1,\"ai\":4,\"l\":false},{\"n\":\"Manager.Manager.Photo.IsSynchronized\",\"v\":\"Manager.Manager.Photo.IsSynchronized\",\"o\":4,\"t\":1,\"ai\":4,\"l\":false},{\"n\":\"Manager.Manager.Photo.Length\",\"v\":\"Manager.Manager.Photo.Length\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Manager.Photo.LongLength\",\"v\":\"Manager.Manager.Photo.LongLength\",\"o\":1,\"ai\":4,\"t\":1,\"max\":9007199254740992,\"min\":-9007199254740992,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Manager.Photo.Rank\",\"v\":\"Manager.Manager.Photo.Rank\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Manager.PhotoPath\",\"v\":\"Manager.Manager.PhotoPath\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.PostalCode\",\"v\":\"Manager.Manager.PostalCode\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.Region\",\"v\":\"Manager.Manager.Region\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.ReportsToEmployeeID\",\"v\":\"Manager.Manager.ReportsToEmployeeID\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":true},{\"n\":\"Manager.Manager.RowVersion\",\"v\":\"Manager.Manager.RowVersion\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Manager.Title\",\"v\":\"Manager.Manager.Title\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Manager.TitleOfCourtesy\",\"v\":\"Manager.Manager.TitleOfCourtesy\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Notes\",\"v\":\"Manager.Notes\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Photo.IsFixedSize\",\"v\":\"Manager.Photo.IsFixedSize\",\"o\":4,\"t\":1,\"ai\":4,\"l\":false},{\"n\":\"Manager.Photo.IsReadOnly\",\"v\":\"Manager.Photo.IsReadOnly\",\"o\":4,\"t\":1,\"ai\":4,\"l\":false},{\"n\":\"Manager.Photo.IsSynchronized\",\"v\":\"Manager.Photo.IsSynchronized\",\"o\":4,\"t\":1,\"ai\":4,\"l\":false},{\"n\":\"Manager.Photo.Length\",\"v\":\"Manager.Photo.Length\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Photo.LongLength\",\"v\":\"Manager.Photo.LongLength\",\"o\":1,\"ai\":4,\"t\":1,\"max\":9007199254740992,\"min\":-9007199254740992,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Photo.Rank\",\"v\":\"Manager.Photo.Rank\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.PhotoPath\",\"v\":\"Manager.PhotoPath\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.PostalCode\",\"v\":\"Manager.PostalCode\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.Region\",\"v\":\"Manager.Region\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.ReportsToEmployeeID\",\"v\":\"Manager.ReportsToEmployeeID\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":true},{\"n\":\"Manager.RowVersion\",\"v\":\"Manager.RowVersion\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Manager.Title\",\"v\":\"Manager.Title\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Manager.TitleOfCourtesy\",\"v\":\"Manager.TitleOfCourtesy\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Notes\",\"v\":\"Notes\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Photo.IsFixedSize\",\"v\":\"Photo.IsFixedSize\",\"o\":4,\"t\":1,\"ai\":4,\"l\":false},{\"n\":\"Photo.IsReadOnly\",\"v\":\"Photo.IsReadOnly\",\"o\":4,\"t\":1,\"ai\":4,\"l\":false},{\"n\":\"Photo.IsSynchronized\",\"v\":\"Photo.IsSynchronized\",\"o\":4,\"t\":1,\"ai\":4,\"l\":false},{\"n\":\"Photo.Length\",\"v\":\"Photo.Length\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Photo.LongLength\",\"v\":\"Photo.LongLength\",\"o\":1,\"ai\":4,\"t\":1,\"max\":9007199254740992,\"min\":-9007199254740992,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Photo.Rank\",\"v\":\"Photo.Rank\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"PhotoPath\",\"v\":\"PhotoPath\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"PostalCode\",\"v\":\"PostalCode\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Region\",\"v\":\"Region\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"ReportsToEmployeeID\",\"v\":\"ReportsToEmployeeID\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":true},{\"n\":\"RowVersion\",\"v\":\"RowVersion\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"Title\",\"v\":\"Title\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"TitleOfCourtesy\",\"v\":\"TitleOfCourtesy\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true}]}}";
    exports.loadCodeRuleSupplierSearchSettings = "{\"ui\":[false,true,\"Get records where\",\"\",false,null,false,true,true,true,null,null],\"s\":{\"lbl\":{\"c\":\"Add a calculation...\",\"s\":\"Enter a string...\",\"b\":\"Select a value...\",\"e\":\"Select a value...\",\"m\":\"Enter a number...\",\"v\":\"Pick a date...\",\"j\":\"Pick a time...\",\"g\":\"- click here to begin a new filter -\",\"t\":\"True\",\"f\":\"False\"},\"fls\":[{\"n\":\"\",\"v\":\"if\",\"t\":0}],\"cls\":[{\"n\":\"and\",\"v\":\"and\",\"t\":6},{\"n\":\"or\",\"v\":\"or\",\"t\":6}],\"ops\":[{\"n\":\"is\",\"v\":\"equal\",\"o\":4,\"t\":3,\"ai\":4},{\"n\":\"is equal to\",\"v\":\"equal\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is not equal to\",\"v\":\"notEqual\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is greater than\",\"v\":\"greater\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is greater than or equal to\",\"v\":\"greaterOrEqual\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is less than\",\"v\":\"less\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is less than or equal to\",\"v\":\"lessOrEqual\",\"o\":1,\"t\":3,\"ai\":4},{\"n\":\"is\",\"v\":\"equal\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"is not\",\"v\":\"notEqual\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"contains\",\"v\":\"contains\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"does not contain\",\"v\":\"doesNotContain\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"starts with\",\"v\":\"startsWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"does not start with\",\"v\":\"doesNotStartWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"ends with\",\"v\":\"endsWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"does not end with\",\"v\":\"doesNotEndWith\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"has no value\",\"v\":\"isNull\",\"o\":0,\"t\":3,\"ai\":4},{\"n\":\"has any value\",\"v\":\"isNotNull\",\"o\":0,\"t\":3,\"ai\":4}],\"fds\":[{\"n\":\"Address\",\"v\":\"Address\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"CanAdd\",\"v\":\"6A0E0EF575901D607FCA85C5F79BD0EE\",\"t\":2,\"ps\":[],\"rt\":{\"o\":0,\"ai\":4,\"l\":true,\"max\":256}},{\"n\":\"City\",\"v\":\"City\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"CompanyName\",\"v\":\"CompanyName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"ContactName\",\"v\":\"ContactName\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"ContactTitle\",\"v\":\"ContactTitle\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Country\",\"v\":\"Country\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Fax\",\"v\":\"Fax\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"HomePage\",\"v\":\"HomePage\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Phone\",\"v\":\"Phone\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"PostalCode\",\"v\":\"PostalCode\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"Region\",\"v\":\"Region\",\"o\":0,\"ai\":4,\"t\":1,\"max\":256,\"l\":true},{\"n\":\"RowVersion\",\"v\":\"RowVersion\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false},{\"n\":\"SupplierID\",\"v\":\"SupplierID\",\"o\":1,\"ai\":4,\"t\":1,\"max\":2147483647,\"min\":-2147483648,\"dec\":false,\"cal\":true,\"i\":true,\"l\":false}]}}";
    
});

/**
 * @license RequireJS text 2.0.0 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint */
/*global require: false, XMLHttpRequest: false, ActiveXObject: false,
  define: false, window: false, process: false, Packages: false,
  java: false, location: false */

define('text',['module'], function (module) {
    

    var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = [],
        masterConfig = module.config(),
        text, fs;

    text = {
        version: '2.0.0',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r");
        },

        createXhr: function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i++) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var strip = false, index = name.indexOf("."),
                modName = name.substring(0, index),
                ext = name.substring(index + 1, name.length);

            index = ext.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = ext.substring(index + 1, ext.length);
                strip = strip === "strip";
                ext = ext.substring(0, index);
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var match = text.xdRegExp.exec(url),
                uProtocol, uHostName, uPort;
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName === hostname) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + '.' +
                                     parsed.ext) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (typeof process !== "undefined" &&
             process.versions &&
             !!process.versions.node) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback) {
            var file = fs.readFileSync(url, 'utf8');
            //Remove BOM (Byte Mark Order) from utf8 files if it is there.
            if (file.indexOf('\uFEFF') === 0) {
                file = file.substring(1);
            }
            callback(file);
        };
    } else if (text.createXhr()) {
        text.get = function (url, callback, errback) {
            var xhr = text.createXhr();
            xhr.open('GET', url, true);

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (typeof Packages !== 'undefined') {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                stringBuffer, line,
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                stringBuffer.append(line);

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    }

    return text;
});

define('text!modules/customers/templates/CustomerEdit.html',[],function () { return '<div data-bind="<%= rc.throttle? \'throttledWith\': \'with\'%>: item">\r\n    <div class="smart-form">\r\n        <div class="tabs" data-bind="tabstripErrorTunnel:{}">\r\n            <ul class="nav nav-tabs" data-bind="htmlTunnel : {id : \'viewbar-tabs\', end: \'entrance\'}">\r\n                <li class="active">\r\n                    <a data-toggle="tab" href="#tab-r1" data-bind="keyTipsGroup: { key : \'VD\', group : \'customer-details\'}">\r\n                        <i class="fa fa-user nav-fa-issue"></i>\r\n                        <span class="hidden-mobile hidden-tablet">Details</span>\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a data-toggle="tab" href="#tab-r2" data-bind="keyTipsGroup: { key : \'VH\', group : \'customer-others\'}">\r\n                        <i class="fa fa-info nav-fa-issue"></i>\r\n                        <span class="hidden-mobile hidden-tablet">Others</span>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div class="tab-content">\r\n                <div id="tab-r1" class="tab-pane active">\r\n                    <div class="field-set">\r\n                        <header>Customer details</header>\r\n                        <div data-bind="field: ContactName, focus: 2000"></div>\r\n                        <div data-bind="field: ContactTitle"></div>\r\n                        <div data-bind="field: CompanyName"></div>\r\n                        <div data-bind="field: Phone"></div>\r\n                        <div data-bind="field: Fax"></div>\r\n                    </div>\r\n                    <div class="field-set">\r\n                        <header>Residence</header>\r\n                        <div data-bind="field: City"></div>\r\n                        <div data-bind="field: Address"></div>\r\n                        <div data-bind="field: PostalCode"></div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id="tab-r2" class="tab-pane fade">\r\n                    <div class="field-set">\r\n                        <header>Other</header>\r\n                        <div data-bind="field: CustomerID"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n';});


define('text!modules/orders/templates/ActiveCustomer.html',[],function () { return '\n<div class="customer-active-record" data-bind="resizeWhen: queryFilter.parameters, \n                                               with: queryFilter.parameters().length && queryFilter.parameters()[0]">\n    <img class="float-left square40" src="images/users.png" />\n\n    <div class="message-item active-record" data-bind="var: { collapsed: ko.observable(true) }">\n\n        <div class="header">\n            <span data-bind="text: ContactName"></span>\n\n            <div class="float-right">\n                <span class="pin-unpin" data-bind="checkbox: collapsed"></span>\n                <a data-bind="click: function() { $parent.queryFilter.clear() }">\n                    <span class="k-icon k-i-close" style="vertical-align: baseline"></span>\n                </a>\n            </div>\n        </div>\n\n        <div data-bind="visible: collapsed()">\n            More info about <span data-bind="text: ContactName"></span> <a data-bind="click: function() {collapsed(false)}">here</a>...\n        </div>\n\n        <div class="expanded-content" data-bind="visible: !collapsed()">\n            <%= rc.customerSummary %>\n        </div>\n\n\n    </div>\n</div>';});


define('text!modules/orders/templates/DataSourceNotificationPanelItem.html',[],function () { return 'Order "<a data-bind="text: Entity.ShipName || \'un-named\', attr: { href: \'#/orders/ShipName/\' + Entity.ShipName }"></a>" was <span data-bind="text: PreviousEntityState === \'Added\'? \'Added\': \'Modified\'"></span>\n\n';});


define('text!modules/orders/templates/QueryFilter.html',[],function () { return 'Displaying Orders for Customer "<a data-bind="text: ContactName, attr: { href: \'#/customers/ContactName/\' + ContactName() }"></a>"';});


define('text!modules/orders/templates/OrderEdit.html',[],function () { return '<div data-bind="<%= rc.throttle? \'throttledWith\': \'with\'%>: item">\r\n    <div>\r\n        <div class="tabs">\r\n            <ul class="nav nav-tabs" data-bind="htmlTunnel : {id : \'viewbar-tabs\', end: \'entrance\'}">\r\n                <li class="active">\r\n                    <a data-toggle="tab" href="#tab-r1" data-bind="keyTipsGroup: { key : \'VD\', group : \'customer-details\'}">\r\n                        <i class="fa fa-user nav-fa-issue"></i>\r\n                        <span class="hidden-mobile hidden-tablet">Details</span>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div class="tab-content">\r\n                <div id="tab-r1" class="tab-pane active">\r\n                    <div class="field-set">\r\n                        <header>Ship details</header>\r\n                        <div data-bind="field: ShipName"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n\r\n<!--<div data-bind="<%= rc.throttle? \'throttledWith\': \'with\'%>: item">\r\n    <div data-bind="tabstripErrorTunnel: { animation: { open: {effects: \'\' } } }">\r\n        <ul>\r\n            <li><img src="images/users.png" /> Details</li>\r\n        </ul>\r\n        <div>\r\n            <div class="field-set">\r\n                <header>Ship details</header>\r\n                <div>\r\n                    <label data-bind="label: {}">ShipName</label>\r\n                    <input data-bind="value: ShipName, focus: 200" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>-->\r\n\r\n';});


define('text!modules/orders/assets/styles.css',[],function () { return '/* data - Customers Main*/\n.customer-active-record .expanded-content {\n  height: 100px;\n  overflow-y: auto;\n}\n';});

/// <amd-dependency path="text!modules/customers/templates/CustomerEdit.html" />
/// <amd-dependency path="text!modules/orders/templates/ActiveCustomer.html" />
/// <amd-dependency path="text!modules/orders/templates/DataSourceNotificationPanelItem.html" />
/// <amd-dependency path="text!modules/orders/templates/QueryFilter.html" />
/// <amd-dependency path="text!modules/orders/templates/OrderEdit.html" />
/// <amd-dependency path="text!modules/orders/assets/styles.css" />
define('modules/orders/js/helpers',["require", "exports", 'modules/data', 'app', 'metadata/northwind', "text!modules/customers/templates/CustomerEdit.html", "text!modules/orders/templates/ActiveCustomer.html", "text!modules/orders/templates/DataSourceNotificationPanelItem.html", "text!modules/orders/templates/QueryFilter.html", "text!modules/orders/templates/OrderEdit.html", "text!modules/orders/assets/styles.css"], function(require, exports, _data, _app, metadata) {
    var customersTemplateCustomerEdit = require('text!modules/customers/templates/CustomerEdit.html');
    var ordersTemplateDataSrcNotiPanelItem = require('text!modules/orders/templates/DataSourceNotificationPanelItem.html');
    var ordersTemplateQueryFilter = require('text!modules/orders/templates/QueryFilter.html');
    var ordersTemplateOrderEdit = require('text!modules/orders/templates/OrderEdit.html');
    var ordersTemplateActiveCustomer = require('text!modules/orders/templates/ActiveCustomer.html');

    var ordersTemplateStyles = require('text!modules/orders/assets/styles.css');

    (function (orders) {
        function addRibbonButton(ribbon) {
            var _this = this;
            ribbon.tab("Users").group("Northwind").add(new _app.Jigsaw.Ribbon.RibbonButton("Orders", function () {
                _app.history.navigate(_this.url);
            }, "Loads the Order Module", "fa fa-user"), 2);

            // add contextual Users Tab if there's any user filter applied
            var disposable;
            this.itemsViewModel.queryFilter.parameters.subscribe(function (x) {
                if (x.length) {
                    disposable = ribbon.tab("Customers", 90).group("Sample").addAll([
                        new _app.Jigsaw.Ribbon.RibbonButton("Test"),
                        new _app.Jigsaw.Ribbon.RibbonButton("Erase"),
                        new _app.Jigsaw.Ribbon.RibbonButton("More Info")
                    ]);
                } else {
                    disposable && disposable.dispose();
                }
            });
        }
        orders.addRibbonButton = addRibbonButton;

        (function (Notifications) {
            // register templates of notifications without template
            _app.Jigsaw.Notifications.notificationTemplate.candidate(ordersTemplateDataSrcNotiPanelItem, function (x) {
                return x.Owner === 'order-data';
            });
        })(orders.Notifications || (orders.Notifications = {}));
        var Notifications = orders.Notifications;

        orders.url = "/orders", orders.manager = _data.Server.createManager('api/northwind', metadata.metadata), orders.dataSource = new _data.Server.DataSource({
            manager: orders.manager,
            endPoint: new breeze.EntityQuery("orders"),
            typeName: "Order"
        }), orders.itemsViewModel = new _data.DataItemsViewModel(orders.dataSource, {
            jumpToSearchUri: 'api/northwind/nextOrder',
            jumpToSearchProperty: 'ShipName',
            columns: ['ShipName', 'ShipAddress', 'ShipCity'],
            savedSearchesGroup: 'Orders',
            queryFilter: function (query, customer) {
                return query.where('CustomerID', breeze.FilterQueryOp.Equals, customer.CustomerID());
            }
        }), orders.dataView = _data.Templates.DataItems({
            title: "Orders",
            addNew: false,
            excelExport: false,
            viewModel: orders.itemsViewModel,
            filterTemplate: ordersTemplateQueryFilter
        }), orders.barView = _data.Templates.ViewBar(_.template(ordersTemplateOrderEdit)), orders.activeView = new _app.Marionette.View({
            viewModel: orders.itemsViewModel,
            template: function () {
                return _.template(ordersTemplateActiveCustomer)({
                    customerSummary: _data.Templates.SummaryTab(_.template(customersTemplateCustomerEdit)({ throttle: false }))
                });
            }
        }), orders.stylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(ordersTemplateStyles);

        function barViewModel(sizeController) {
            return new _data.PanelBarEditViewModel(orders.itemsViewModel, {
                panelBarViewModel: sizeController
            });
        }
        orders.barViewModel = barViewModel;
    })(exports.orders || (exports.orders = {}));
    var orders = exports.orders;
});


define('text!modules/customers/templates/DataSourceNotificationPanelItem.html',[],function () { return 'Customer "<a data-bind="text: Entity.ContactName || \'un-named\', attr: { href: \'#/customers/ContactName/\' + Entity.ContactName }"></a>" was <span data-bind="text: PreviousEntityState === \'Added\'? \'Added\': \'Modified\'"></span>';});


define('text!modules/customers/templates/MyCustomerItem.html',[],function () { return '\r\n<div data-bind="dtext: ContactName">un-named</div>\r\n\r\n';});


define('text!modules/customers/templates/MyCustomerItemTitle.html',[],function () { return '\n<span id="myitems-customer-title">My Customers</span>\n\n';});


define('text!modules/customers/templates/MyCustomerNotificationPanelItem.html',[],function () { return '\r\nCustomer "<a data-bind="text: Entity.ContactName, attr: { href: \'#/customers/ContactName/\' + Entity.ContactName }"></a>"\r\n was <span data-bind="text: itemAdded? \'added to\':\'removed from\'"></span> My Items';});


define('text!modules/customers/templates/mobile/CustomerListViewItem.html',[],function () { return '<div>\r\n    <div><%= rc.ContactName || "un-named" %></div>\r\n</div>\r\n';});


define('text!modules/customers/assets/styles.css',[],function () { return '/* data - Customers Main*/\n#viewLayout-content {\n  /*header {\n        .background-image(url(\'images/users.png\'), 22px, left, 3px);\n        margin: 4px;\n    }*/\n}\n#viewLayout-content .jarviswidget div[role="content"] > div {\n  margin-top: -15px;\n}\n#viewLayout-content .jarviswidget #advanced-search-container {\n  margin-top: 5px;\n}\n.k-pane.viewbar-right {\n  overflow-y: hidden;\n}\n';});


define('text!modules/customers/assets/myCustomerStyles.css',[],function () { return '/* data.customers - MyItems */\n#myitems-customer-title {\n  background-image: url(images/users.png);\n  background-position: 3px center;\n  background-repeat: no-repeat;\n  padding: 3px 3px 3px 25px;\n  -moz-background-size: 22px auto;\n  -o-background-size: 22px auto;\n  -webkit-background-size: 22px auto;\n  background-size: 22px auto;\n  background-color: transparent;\n  border: none;\n}\n#sidebar-collapsed #myitems-customer-title {\n  font-size: 0;\n  padding-bottom: 5px;\n  padding-top: 15px;\n}\n.customer-wizzard .add-new {\n  background-image: url(images/users.png);\n  background-position: 3px center;\n  background-repeat: no-repeat;\n  padding: 3px 3px 3px 25px;\n  -moz-background-size: 22px auto;\n  -o-background-size: 22px auto;\n  -webkit-background-size: 22px auto;\n  background-size: 22px auto;\n  background-color: transparent;\n}\n';});

/* These are not commented */
/// <amd-dependency path="text!modules/customers/templates/CustomerEdit.html" />
/// <amd-dependency path="text!modules/customers/templates/DataSourceNotificationPanelItem.html" />
/// <amd-dependency path="text!modules/customers/templates/MyCustomerItem.html" />
/// <amd-dependency path="text!modules/customers/templates/MyCustomerItemTitle.html" />
/// <amd-dependency path="text!modules/customers/templates/MyCustomerNotificationPanelItem.html" />
/// <amd-dependency path="text!modules/customers/templates/mobile/CustomerListViewItem.html" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/customers/js/helpers',["require", "exports", 'app', 'modules/data', 'metadata/northwind', 'modules/orders/js/helpers', "text!modules/customers/templates/CustomerEdit.html", "text!modules/customers/templates/DataSourceNotificationPanelItem.html", "text!modules/customers/templates/MyCustomerItem.html", "text!modules/customers/templates/MyCustomerItemTitle.html", "text!modules/customers/templates/MyCustomerNotificationPanelItem.html", "text!modules/customers/templates/mobile/CustomerListViewItem.html", "text!modules/customers/assets/styles.css", "text!modules/customers/assets/myCustomerStyles.css"], function(require, exports, _app, _data, metadata, helpers) {
    var customersTemplateCustomerEdit = require('text!modules/customers/templates/CustomerEdit.html');
    var customersTemplateDataSourceNotificationPanelItem = require('text!modules/customers/templates/DataSourceNotificationPanelItem.html');
    var customersTemplateMyCustomerItem = require('text!modules/customers/templates/MyCustomerItem.html');
    var customersTemplateMyCustomerItemTitle = require('text!modules/customers/templates/MyCustomerItemTitle.html');
    var customersTemplateMyCustomerNotificationPanelItem = require('text!modules/customers/templates/MyCustomerNotificationPanelItem.html');
    var customersTemplateMobileCustomerListViewItem = require('text!modules/customers/templates/mobile/CustomerListViewItem.html');

    var customersTemplateStyles = require('text!modules/customers/assets/styles.css');
    var customersTemplateMyCustomerStyles = require('text!modules/customers/assets/myCustomerStyles.css');

    (function (customers) {
        var CustomerDataSource = (function (_super) {
            __extends(CustomerDataSource, _super);
            function CustomerDataSource(manager) {
                _super.call(this, {
                    manager: manager,
                    endPoint: new breeze.EntityQuery("customers"),
                    typeName: "Customer"
                });
            }
            CustomerDataSource.prototype.createEntity = function (props) {
                // ensure that the 'CustomerID' is always set on the new entity
                var options = _.defaults(props || {}, { CustomerID: breeze.core.getUuid() });
                return _super.prototype.createEntity.call(this, options);
            };
            return CustomerDataSource;
        })(_data.Server.DataSource);
        customers.CustomerDataSource = CustomerDataSource;

        (function (Notifications) {
            var customerSidebarNotification = 'customer-sidebar-notification';

            var CustomerSidebarNotification = (function () {
                function CustomerSidebarNotification(Entity, itemAdded) {
                    if (typeof itemAdded === "undefined") { itemAdded = true; }
                    this.Entity = Entity;
                    this.itemAdded = itemAdded;
                    this.Owner = customerSidebarNotification;
                    this.Author = 'me';
                    this.TimeStamp = new Date();
                    this.Level = 0 /* Success */;
                }
                return CustomerSidebarNotification;
            })();
            Notifications.CustomerSidebarNotification = CustomerSidebarNotification;
            _app.Jigsaw.Notifications.notificationTemplate.candidate(customersTemplateMyCustomerNotificationPanelItem, function (x) {
                return x instanceof CustomerSidebarNotification;
            });

            var CustomerSidebarNotificationCollection = (function (_super) {
                __extends(CustomerSidebarNotificationCollection, _super);
                function CustomerSidebarNotificationCollection(myItems) {
                    var _this = this;
                    _super.call(this, customerSidebarNotification);

                    _app.Knockout.watchObservableArray(myItems.items, function (element) {
                        if (!element.entityAspect.entityState.isDetached()) {
                            _this.add(new CustomerSidebarNotification(element));
                        }
                    }, function (element) {
                        if (!element.entityAspect.entityState.isDetached()) {
                            _this.add(new CustomerSidebarNotification(element, false));
                        }
                    });
                }
                return CustomerSidebarNotificationCollection;
            })(_app.Jigsaw.Notifications.NotificationSetCollection);
            Notifications.CustomerSidebarNotificationCollection = CustomerSidebarNotificationCollection;

            // register templates of notifications without template
            _app.Jigsaw.Notifications.notificationTemplate.candidate(customersTemplateDataSourceNotificationPanelItem, function (x) {
                return x.Owner === 'customer-data';
            });
        })(customers.Notifications || (customers.Notifications = {}));
        var Notifications = customers.Notifications;

        customers.url = "/customers", customers.manager = _data.Server.createManager('api/northwind', metadata.metadata), customers.dataSource = new CustomerDataSource(customers.manager), customers.ensureMetadataFetchedModule = new _data.EnsureMetadataFetchedModule(customers.dataSource), customers.columns = ['ContactName', 'ContactTitle', 'City', 'Country', 'Phone', 'Fax'], customers.jumpToSearchProperty = 'ContactName', customers.itemsViewModel = new _data.DataItemsViewModel(customers.dataSource, {
            jumpToSearchUri: 'api/northwind/nextCustomer',
            jumpToSearchProperty: customers.jumpToSearchProperty,
            excelExportPath: 'api/northwind/ExcelExportCustomers',
            columns: customers.columns,
            savedSearchesGroup: 'Customers',
            wizzardViewBuilder: function () {
                return _data.Templates.WizzardView(_.template(customersTemplateCustomerEdit), {
                    title: 'Customer',
                    classIdentifier: 'fa fa-user'
                });
            },
            wizzardSaveDraft: function (item) {
                return customers.myItemsCollectionModule.collection.addDraft(item);
            },
            messageQueueType: 1 /* Inline */
        }), customers.dataView = _data.Templates.DataItems({
            title: "Customers",
            addNew: true,
            excelExport: true,
            advancedSearchSettingsUrl: 'api/northwind/LoadCodeRuleCustomerSearchSettings',
            advancedSearchSettings: metadata.loadCodeRuleCustomerSearchSettings,
            dragHint: customersTemplateMyCustomerItem,
            viewModel: customers.itemsViewModel,
            columns: customers.columns.concat({
                title: "Orders",
                command: [{
                        name: "view", click: (function (e) {
                            e.preventDefault();

                            var customer = customers.dataView.grid.entityForElement(e.currentTarget);

                            // load the orders module and filter entities by the customer
                            _app.history.navigateSilent(helpers.orders.url).then(function () {
                                return helpers.orders.itemsViewModel.filter(customer);
                            }).done();
                        })
                    }],
                width: "80px",
                groupable: false, filterable: false, sortable: false
            })
        }), customers.barView = _data.Templates.ViewbarWithSummary(_.template(customersTemplateCustomerEdit)), customers.stylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(customersTemplateStyles);

        function barViewModel(sizeController) {
            return new _data.PanelBarEditViewModel(customers.itemsViewModel, {
                panelBarViewModel: sizeController,
                wordExportUrl: 'export/wordExportCustomer',
                pdfExportUrl: 'export/pdfExportCustomer'
            });
        }
        customers.barViewModel = barViewModel;

        customers.myItemsCollectionModule;

        function addRibbonButton(ribbon, menu) {
            var _this = this;
            ribbon.tab("Users").group("Northwind").add(new _app.Jigsaw.Ribbon.RibbonButton("Customers", function () {
                _app.history.navigate(_this.url);
            }, "Loads the Customer Module", "fa fa-user"), 1);

            if (menu) {
                menu.group("Customers", 10).addAll([
                    new _app.Jigsaw.Ribbon.RibbonButton("Add New", function () {
                        _app.history.navigateSilent('#' + _this.url).done(function () {
                            _this.itemsViewModel.addNew();
                        });
                    }),
                    new _app.Jigsaw.Ribbon.RibbonButton("Add New Wizzard", function () {
                        _this.itemsViewModel.addNewWizzard();
                    })
                ]);
            }
        }
        customers.addRibbonButton = addRibbonButton;

        function setUp(options) {
            customers.myItemsCollectionModule = new _data.Sidebar.MyItems.MyItemsCollectionModule({
                itemTemplate: function () {
                    return customersTemplateMyCustomerItem;
                },
                itemTitleTemplate: function () {
                    return customersTemplateMyCustomerItemTitle;
                },
                dataSource: customers.dataSource,
                styles: customersTemplateMyCustomerStyles,
                myItemsModule: options.myItemsModule,
                navigate: function (item) {
                    return options.that.sidebarItemNavigate(item);
                },
                ensureMetadataFetchedModule: customers.ensureMetadataFetchedModule
            });
        }
        customers.setUp = setUp;

        var Module = (function (_super) {
            __extends(Module, _super);
            function Module(customerOptions) {
                _super.call(this, {
                    url: customers.url,
                    itemsViewModel: customers.itemsViewModel,
                    barViewModel: barViewModel(customerOptions.sizeController),
                    breadcrumbTitle: 'Customers'
                });
                this.customerOptions = customerOptions;

                customers.barView.withViewModel(this.barViewModel);

                //setUp({
                //    that: this,
                //    myItemsModule: customerOptions.myItemsModule
                //});
                addRibbonButton(customerOptions.coreModule.ribbon, customerOptions.coreModule.menu);
            }
            Module.prototype.requiredModules = function () {
                return _super.prototype.requiredModules.call(this).concat(customers.stylesModule, customers.ensureMetadataFetchedModule).concat.apply(this, this.customerOptions.requiredModules);
            };

            Module.prototype.load = function () {
                this.customerOptions.coreModule.breadcrumb.next(this.breadcrumb);

                // reset selected item on the data grid.
                this.itemsViewModel.reset();

                return this.customerOptions.load();
            };
            return Module;
        })(_data.DataModule);
        customers.Module = Module;
    })(exports.customers || (exports.customers = {}));
    var customers = exports.customers;
});

/// <reference path="../../../definitions/_definitions.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/customers/js/customers-desktop',["require", "exports", 'modules/data', 'modules/data-desktop', 'app-desktop', './helpers'], function(require, exports, _data, data, app, helpers) {
    var CustomersModule = (function (_super) {
        __extends(CustomersModule, _super);
        function CustomersModule() {
            _super.call(this, {
                url: helpers.customers.url,
                itemsViewModel: helpers.customers.itemsViewModel,
                barViewModel: helpers.customers.barViewModel(app.viewLayoutModule.viewModel),
                myItemsModule: data.myItemsModule,
                coreModule: app.coreModule,
                breadcrumbTitle: 'Customers'
            });

            helpers.customers.barView.withViewModel(this.barViewModel);
            this.sidebarItemNavigate;

            helpers.customers.setUp({
                that: this,
                myItemsModule: data.myItemsModule
            });

            helpers.customers.addRibbonButton(app.coreModule.ribbon, app.coreModule.menu);
        }
        CustomersModule.prototype.requiredModules = function () {
            return _super.prototype.requiredModules.call(this).concat(helpers.customers.myItemsCollectionModule, app.coreModule, app.viewLayoutModule, app.sidebarModule, data.myItemsModule, app.notificationsModule, helpers.customers.stylesModule, helpers.customers.ensureMetadataFetchedModule);
        };

        CustomersModule.prototype.load = function () {
            app.coreModule.breadcrumb.next(this.breadcrumb);

            // reset selected item on the data grid.
            this.itemsViewModel.reset();

            // when base modules are loaded show load this module
            return Q.all([
                app.viewLayoutModule.viewbar.show(helpers.customers.barView),
                app.viewLayoutModule.content.show(helpers.customers.dataView),
                app.viewLayoutModule.viewModel.collapseViewbar()
            ]);
        };
        return CustomersModule;
    })(_data.BarDataModule);
    exports.CustomersModule = CustomersModule;

    exports.customersModule = new CustomersModule();

    function __init__() {
        exports.customersModule.initialize();

        app.notificationsModule.localNotifications.blendWith(new helpers.customers.Notifications.CustomerSidebarNotificationCollection(helpers.customers.myItemsCollectionModule.collection));

        data.mySearchesModule.registerCollection(exports.customersModule.itemsViewModel.searchManager.savedSearches);
    }
    exports.__init__ = __init__;
});


define('text!modules/employees/assets/myItemStyles.css',[],function () { return '/* data.employee - MyItems */\n#myitems-employee-title {\n  background-image: url(images/users.png);\n  background-position: 3px center;\n  background-repeat: no-repeat;\n  padding: 3px 3px 3px 25px;\n  -moz-background-size: 22px auto;\n  -o-background-size: 22px auto;\n  -webkit-background-size: 22px auto;\n  background-size: 22px auto;\n  background-color: transparent;\n  border: none;\n}\n#sidebar-collapsed #myitems-employee-title {\n  font-size: 0;\n  padding-bottom: 5px;\n  padding-top: 15px;\n}\n';});


define('text!modules/employees/templates/MyItem.html',[],function () { return '\n<div>\n    <span data-bind="text: TitleOfCourtesy"></span> <span data-bind="text: FirstName"></span> <span data-bind="text: LastName"></span>\n</div>\n\n';});


define('text!modules/employees/templates/MyItemTitle.html',[],function () { return '\n<span id="myitems-employee-title">My Employees</span>\n\n';});


define('text!modules/employees/templates/DataSourceNotificationPanelItem.html',[],function () { return 'Employee "<a data-bind="text: Entity.TitleOfCourtesy + \' \' + Entity.LastName || \'un-named\', attr: { href: \'#/employees/EmployeeID/\' + Entity.EmployeeID }"></a>" was <span data-bind="text: PreviousEntityState === \'Added\'? \'Added\': \'Modified\'"></span>';});

/// <amd-dependency path="text!modules/customers/templates/CustomerEdit.html" />
/// <amd-dependency path="text!modules/employees/assets/myItemStyles.css" />
/// <amd-dependency path="text!modules/employees/templates/MyItem.html" />
/// <amd-dependency path="text!modules/employees/templates/MyItemTitle.html" />
/// <amd-dependency path="text!modules/employees/templates/DataSourceNotificationPanelItem.html" />
define('modules/employees/js/helpers',["require", "exports", 'modules/data', 'app', 'metadata/northwind', "text!modules/customers/templates/CustomerEdit.html", "text!modules/employees/assets/myItemStyles.css", "text!modules/employees/templates/MyItem.html", "text!modules/employees/templates/MyItemTitle.html", "text!modules/employees/templates/DataSourceNotificationPanelItem.html"], function(require, exports, _data, _app, metadata) {
    //import orderTemplates = require('templates/data.order');
    //import employeeTemplates = require('templates/data.employee');
    var employeeTemplateMyItemStyles = require('text!modules/employees/assets/myItemStyles.css');
    var employeeTemplateMyItem = require('text!modules/employees/templates/MyItem.html');
    var employeeTemplateMyItemTitle = require('text!modules/employees/templates/MyItemTitle.html');
    var employeeTemplateDataSourceNotificationPanelItem = require('text!modules/employees/templates/DataSourceNotificationPanelItem.html');
    var customersTemplateCustomerEdit = require('text!modules/customers/templates/CustomerEdit.html');

    (function (employees) {
        //var templates = employeeTemplates;
        function addRibbonButton(ribbon) {
            var _this = this;
            ribbon.tab("Users").group("Northwind").add(new _app.Jigsaw.Ribbon.RibbonButton("Employees", function () {
                _app.history.navigate(_this.url);
            }, "Loads the Employee Module", "fa fa-user"), 10);
        }
        employees.addRibbonButton = addRibbonButton;

        function loadViews(layoutModule) {
            return Q.all([
                layoutModule.content.show(employees.dataView),
                layoutModule.viewbar.show(employees.barView)
            ]);
        }
        employees.loadViews = loadViews;

        function downloadTemplates() {
            return Q.all([
                employees.viewbarReadOnlyTemplate.download(),
                employees.viewbarTemplate.download()
            ]);
        }
        employees.downloadTemplates = downloadTemplates;

        var DataPopup = (function () {
            function DataPopup(template, readOnlyTemplate) {
                this.template = _app.Marionette.remoteSourceTemplate(template);
                this.readOnlyTemplate = _app.Marionette.remoteSourceTemplate(readOnlyTemplate);
            }
            DataPopup.prototype.show = function (entity, dataSource, options) {
                var selectedTemplate = options && options.readOnly ? this.readOnlyTemplate : this.template, view = _data.Templates.PopupLayout(selectedTemplate), window = new _app.Views.WindowView(view, { close: close, size: 2 /* LARGE */ }), viewModel = new _data.DataPopupViewModel(entity, dataSource, window, {
                    wordExportUrl: 'export/wordExportEmployee',
                    pdfExportUrl: 'export/pdfExportEmployee'
                });

                view.options.viewModel = viewModel;

                viewModel.isReadOnly(options && options.readOnly);
                viewModel.customCommands.group("Custom").add([
                    new _app.Jigsaw.Ribbon.RibbonButton("Export to Pdf", function () {
                        viewModel.pdfExport().done();
                    }),
                    new _app.Jigsaw.Ribbon.RibbonButton("Export to Word", function () {
                        viewModel.wordExport().done();
                    })
                ]);

                return window.showDialog();

                /** called when the window is to be closed */
                function close() {
                    viewModel.close().fail(function () {
                    }).done();
                }
            };
            return DataPopup;
        })();
        employees.DataPopup = DataPopup;

        (function (Notifications) {
            // register templates of notifications without template
            _app.Jigsaw.Notifications.notificationTemplate.candidate(employeeTemplateDataSourceNotificationPanelItem, function (x) {
                return x.Owner === 'employee-data';
            });
        })(employees.Notifications || (employees.Notifications = {}));
        var Notifications = employees.Notifications;

        employees.url = '/employees', employees.manager = _data.Server.createManager('api/northwind', metadata.metadata), employees.endPoint = new breeze.EntityQuery("employees"), employees.dataSource = new _data.Server.DataSource({ manager: employees.manager, endPoint: employees.endPoint, typeName: "Employee" }), employees.itemsViewModel = new _data.DataItemsViewModel(employees.dataSource, {
            jumpToSearchUri: 'api/northwind/nextEmployee',
            jumpToSearchProperty: 'EmployeeID',
            excelExportPath: 'api/northwind/ExcelExportEmployees',
            savedSearchesGroup: 'Employee',
            columns: ['Title', 'FirstName', 'LastName', 'Country', 'City', 'HomePhone']
        }), employees.dataView = _data.Templates.DataItems({
            title: 'Employees',
            excelExport: true,
            advancedSearchSettingsUrl: 'api/northwind/LoadCodeRuleEmployeeSearchSettings',
            dragHint: employeeTemplateMyItem,
            viewModel: employees.itemsViewModel
        }), employees.viewbarReadOnlyTemplate = new _app.Common.RemoteResource('template/employeeviewbar', { readOnly: true }), employees.viewbarTemplate = new _app.Common.RemoteResource('template/employeeviewbar', { readOnly: false }), employees.barView = _data.Templates.ViewBar(_app.Marionette.remoteSourceTemplate(employees.viewbarReadOnlyTemplate)), employees.stylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(employeeTemplateMyItemStyles);

        function barViewModel(sizeController) {
            return new _data.PanelBarEditViewModel(employees.itemsViewModel, {
                panelBarViewModel: sizeController,
                dataPopup: new DataPopup(employees.viewbarTemplate, employees.viewbarReadOnlyTemplate),
                readOnly: true,
                wordExportUrl: 'export/wordExportEmployee',
                pdfExportUrl: 'export/pdfExportEmployee'
            });
        }
        employees.barViewModel = barViewModel;
    })(exports.employees || (exports.employees = {}));
    var employees = exports.employees;
});

/// <amd-dependency path="text!modules/employees/assets/myItemStyles.css" />
/// <amd-dependency path="text!modules/employees/templates/MyItem.html" />
/// <amd-dependency path="text!modules/employees/templates/MyItemTitle.html" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/employees/js/employees',["require", "exports", 'modules/data', 'modules/data-desktop', 'app-desktop', './helpers', "text!modules/employees/assets/myItemStyles.css", "text!modules/employees/templates/MyItem.html", "text!modules/employees/templates/MyItemTitle.html"], function(require, exports, _data, data, app, helpers) {
    //import templates = require('templates/data.employee');
    var employeeTemplateMyItemStyles = require('text!modules/employees/assets/myItemStyles.css');
    var employeeTemplateMyItem = require('text!modules/employees/templates/MyItem.html');
    var employeeTemplateMyItemTitle = require('text!modules/employees/templates/MyItemTitle.html');

    var EmployeeModule = (function (_super) {
        __extends(EmployeeModule, _super);
        function EmployeeModule() {
            _super.call(this, {
                url: helpers.employees.url,
                itemsViewModel: helpers.employees.itemsViewModel,
                barViewModel: helpers.employees.barViewModel(app.viewLayoutModule.viewModel),
                myItemsModule: data.myItemsModule,
                coreModule: app.coreModule,
                breadcrumbTitle: 'Employees'
            });

            helpers.employees.barView.withViewModel(this.barViewModel);
            helpers.employees.addRibbonButton(app.coreModule.ribbon);
        }
        EmployeeModule.prototype.initialize = function () {
            _super.prototype.initialize.call(this);

            this.registerMyItemsSet({
                itemTitleTemplate: _.template(employeeTemplateMyItemTitle),
                itemTemplate: _.template(employeeTemplateMyItem),
                styles: employeeTemplateMyItemStyles
            });
        };

        EmployeeModule.prototype.requiredModules = function () {
            return _super.prototype.requiredModules.call(this).concat(app.coreModule, app.viewLayoutModule, app.sidebarModule, data.myItemsModule, helpers.employees.stylesModule);
        };

        EmployeeModule.prototype.load = function () {
            app.coreModule.breadcrumb.next(this.breadcrumb);

            // reset selected item on the data grid.
            this.itemsViewModel.selectedItem(null);

            return Q.all([
                helpers.employees.downloadTemplates(),
                app.viewLayoutModule.viewModel.collapseViewbar()
            ]).then(function () {
                return helpers.employees.loadViews(app.viewLayoutModule);
            });
        };
        return EmployeeModule;
    })(_data.BarDataModule);
    exports.EmployeeModule = EmployeeModule;

    exports.employeeModule = new EmployeeModule();

    function __init__() {
        exports.employeeModule.initialize();
    }
    exports.__init__ = __init__;
});


define('text!modules/supplier/templates/DataItems.html',[],function () { return '\r\n<div data-bind="markErrorCollection: {}">\r\n\r\n    <div data-bind="messageQueue: messageQueue"></div>\r\n\r\n    <div data-bind="validationSummary: {}"></div>\r\n\r\n    <section class="all-space" data-bind="measurePrev: \'top\'">\r\n        <!-- row -->\r\n        <div class="row">\r\n            <!-- SINGLE GRID -->\r\n            <article>\r\n                <div class="jarviswidget jarviswidget-sortable">\r\n                    <header role="heading">\r\n                        <div class="jarviswidget-ctrls" role="menu">\r\n                            <a class="button-icon" href="javascript:void(0);" data-bind="toogleFullScreen : { wrapperSelector : \'.jarviswidget\', class : \'fa fa-expand | fa fa-compress\'}">\r\n                                <i></i>\r\n                            </a>\r\n                        </div>\r\n\r\n                        <div class="widget-toolbar" role="menu">\r\n                            <a class="btn btn-default" href="javascript:void(0);" data-bind="qclick: rejectAllChanges, keyTips : { key : \'GR\' }">Reject All Changes</a>\r\n                        </div>\r\n\r\n                        <div class="widget-toolbar" role="menu">\r\n                           <a class="btn btn-default" href="javascript:void(0);" data-bind="qclick: save, keyTips : { key : \'GS\' }">Save All Changes</a>\r\n                        </div>\r\n                        <div class="widget-toolbar" role="menu">\r\n                            <a class="btn btn-default" href="javascript:void(0);" data-bind="click: addNew, keyTips : { key : \'GA\' }">Add New</a>\r\n                        </div>\r\n\r\n                        <div class="widget-toolbar hidden-xs">\r\n                            <span class="jumpto-search" data-bind="with: jumpToSearch">\r\n                                <input type="text" data-bind="value: searchTerm, pressEnter: quickJump, keyTipsInput : { key : \'GS\'} ">\r\n                                <a class="btn btn-default" data-bind="qclick: quickJump">\r\n                                    <i class="fa fa-step-forward"></i>\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n\r\n                        <h2>\r\n                            <strong>Suppliers</strong> &nbsp;\r\n                        </h2>\r\n\r\n                    </header>\r\n\r\n                    <!-- widget div-->\r\n                    <div role="content">\r\n\r\n                        <!-- widget content -->\r\n                        <div id="grid-container" class="widget-body all-space">\r\n                            <!--      <div class="k-grid" data-bind="keyTipsGrid: {key : \'GG\'}"></div>-->\r\n                            <div data-bind="feedParentErrorCollection: errorCollection,\r\n                            breezeKendoGrid: {\r\n                                dataSource: dataSource,\r\n                                selected: selectedItem,\r\n                                inlineEditable: true,\r\n                                defaultSort: \'ContactName\',\r\n                                ignoredColumns: [\'RowVersion\', \'UserSessionId\', \'Products\'],\r\n                                columns: [\'CompanyName\',\'ContactName\',\'ContactTitle\',\'Address\',\'City\',\'Country\',\'Phone\']\r\n                            }, keyTipsGrid: {key : \'GG\'}"></div>\r\n\r\n\r\n                        </div>\r\n                        <!-- end widget content -->\r\n\r\n\r\n                    </div>\r\n                    <!-- end widget div -->\r\n\r\n                </div>\r\n\r\n            </article><!-- GRID END -->\r\n        </div><!-- end row -->\r\n    </section>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n';});


define('text!modules/supplier/templates/DataSourceNotificationPanelItem.html',[],function () { return 'Suplier "<a data-bind="text: Entity.ContactName || \'un-named\', attr: { href: \'#/supplier/SupplierID/\' + Entity.SupplierID }"></a>" was <span data-bind="text: PreviousEntityState === \'Added\'? \'Added\': \'Modified\'"></span>';});


define('text!modules/supplier/templates/MyItem.html',[],function () { return '\n<div>\n    <span data-bind="text: TitleOfCourtesy"></span> <span data-bind="text: FirstName"></span> <span data-bind="text: LastName"></span>\n</div>\n\n';});


define('text!modules/supplier/templates/MyItemTitle.html',[],function () { return '\n<div id="myitems-employee-title">My Employees</div>\n\n';});


define('text!modules/supplier/assets/myItemStyles.css',[],function () { return '/* data.customers - MyItems */\n#myitems-supplier-title {\n  background-image: url(images/users.png);\n  background-position: 3px center;\n  background-repeat: no-repeat;\n  padding: 3px 3px 3px 25px;\n  -moz-background-size: 22px auto;\n  -o-background-size: 22px auto;\n  -webkit-background-size: 22px auto;\n  background-size: 22px auto;\n  background-color: transparent;\n  border: none;\n}\n';});


define('text!modules/supplier/assets/styles.css',[],function () { return '/* data */\n';});

/// <amd-dependency path="text!modules/supplier/templates/DataItems.html" />
/// <amd-dependency path="text!modules/supplier/templates/DataSourceNotificationPanelItem.html" />
/// <amd-dependency path="text!modules/supplier/templates/MyItem.html" />
/// <amd-dependency path="text!modules/supplier/templates/MyItemTitle.html" />
/// <amd-dependency path="text!modules/supplier/assets/myItemStyles.css" />
/// <amd-dependency path="text!modules/supplier/assets/styles.css" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/supplier/js/supplier',["require", "exports", 'modules/data', 'modules/data-desktop', 'app', 'app-desktop', 'metadata/northwind', "text!modules/supplier/templates/DataItems.html", "text!modules/supplier/templates/DataSourceNotificationPanelItem.html", "text!modules/supplier/templates/MyItem.html", "text!modules/supplier/templates/MyItemTitle.html", "text!modules/supplier/assets/myItemStyles.css", "text!modules/supplier/assets/styles.css"], function(require, exports, _data, data, _app, app, metadata) {
    var supplierTemplateDataItems = require('text!modules/supplier/templates/DataItems.html');
    var supplierTemplateDataSourceNotificationPanelItem = require('text!modules/supplier/templates/DataSourceNotificationPanelItem.html');
    var supplierTemplateMyItem = require('text!modules/supplier/templates/MyItem.html');
    var supplierTemplateMyItemTitle = require('text!modules/supplier/templates/MyItemTitle.html');
    var supplierStylemMyItemStyles = require('text!modules/supplier/assets/myItemStyles.css');
    var supplierStyles = require('text!modules/supplier/assets/styles.css');

    var SupplierModule = (function (_super) {
        __extends(SupplierModule, _super);
        function SupplierModule() {
            var manager = _data.Server.createManager('api/northwind', metadata.metadata), dataSource = new _data.Server.DataSource({
                manager: manager,
                endPoint: new breeze.EntityQuery("suppliers"),
                typeName: "Supplier"
            });

            var itemsViewModel = new data.InlineDataItemsViewModel(dataSource, {
                jumpToSearchUri: 'api/northwind/nextSupplier',
                jumpToSearchProperty: 'SupplierID'
            });

            _super.call(this, {
                url: "/supplier",
                itemsViewModel: itemsViewModel,
                breadcrumbTitle: 'Suppliers'
            });

            this.dataView = new data.InlineDataItemsView({
                template: _.template(supplierTemplateDataItems),
                viewModel: itemsViewModel
            });
            itemsViewModel.view = this.dataView;

            this.addRibbonButton();
            this.stylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(supplierStyles);

            // register templates of notifications without template
            _app.Jigsaw.Notifications.notificationTemplate.candidate(supplierTemplateDataSourceNotificationPanelItem, function (x) {
                return x.Owner === 'suplier-data';
            });
        }
        SupplierModule.prototype.canUnload = function () {
            return this.itemsViewModel.promisePageChanged();
        };

        SupplierModule.prototype.addRibbonButton = function () {
            var _this = this;
            app.coreModule.ribbon.tab("Users").group("Northwind").add(new _app.Jigsaw.Ribbon.RibbonButton("Suppliers", function () {
                _app.history.navigate(_this.url);
            }, "Loads the Suppliers Module", "fa fa-calendar"), 20);
        };

        SupplierModule.prototype.requiredModules = function () {
            return _super.prototype.requiredModules.call(this).concat(app.coreModule, app.viewLayoutModule, app.sidebarModule, data.myItemsModule, this.stylesModule);
        };

        SupplierModule.prototype.load = function () {
            app.coreModule.breadcrumb.next(this.breadcrumb);

            return Q.all([
                app.viewLayoutModule.content.show(this.dataView),
                app.viewLayoutModule.viewModel.collapseViewbar()
            ]);
        };
        return SupplierModule;
    })(_data.DataModule);
    exports.SupplierModule = SupplierModule;

    exports.customersModule = new SupplierModule();

    function __init__() {
        exports.customersModule.initialize();
    }
    exports.__init__ = __init__;
});

define('metadata/task',["require", "exports"], function(require, exports) { 
    
    exports.metadata = "{\r\n  \"schema\": {\r\n    \"namespace\": \"Jigsaw.Data.Task\",\r\n    \"alias\": \"Self\",\r\n    \"annotation:UseStrongSpatialTypes\": \"false\",\r\n    \"xmlns:annotation\": \"http://schemas.microsoft.com/ado/2009/02/edm/annotation\",\r\n    \"xmlns\": \"http://schemas.microsoft.com/ado/2009/11/edm\",\r\n    \"cSpaceOSpaceMapping\": \"[[\\\"Jigsaw.Data.Task.TaskVersionTracker\\\",\\\"Jigsaw.Data.Task.TaskVersionTracker\\\"],[\\\"Jigsaw.Data.Task.TaskVersion\\\",\\\"Jigsaw.Data.Task.TaskVersion\\\"],[\\\"Jigsaw.Data.Task.Approval\\\",\\\"Jigsaw.Server.VersionPager.Approval\\\"],[\\\"Jigsaw.Data.Task.Task\\\",\\\"Jigsaw.Data.Task.Task\\\"],[\\\"Jigsaw.Data.Task.TaskTag\\\",\\\"Jigsaw.Data.Task.TaskTag\\\"],[\\\"Jigsaw.Data.Task.Tag\\\",\\\"Jigsaw.Data.Task.Tag\\\"]]\",\r\n    \"entityType\": [\r\n      {\r\n        \"name\": \"TaskVersionTracker\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"Guid\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"Guid\",\r\n            \"type\": \"Edm.Guid\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"VersionTrackerCurrent\",\r\n            \"type\": \"Edm.Guid\",\r\n            \"nullable\": \"false\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": [\r\n          {\r\n            \"name\": \"Current\",\r\n            \"relationship\": \"Self.TaskVersionTracker_Current\",\r\n            \"fromRole\": \"TaskVersionTracker_Current_Source\",\r\n            \"toRole\": \"TaskVersionTracker_Current_Target\"\r\n          },\r\n          {\r\n            \"name\": \"Historical\",\r\n            \"relationship\": \"Self.TaskVersionTracker_Historical\",\r\n            \"fromRole\": \"TaskVersionTracker_Historical_Source\",\r\n            \"toRole\": \"TaskVersionTracker_Historical_Target\"\r\n          },\r\n          {\r\n            \"name\": \"Pending\",\r\n            \"relationship\": \"Self.TaskVersionTracker_Pending\",\r\n            \"fromRole\": \"TaskVersionTracker_Pending_Source\",\r\n            \"toRole\": \"TaskVersionTracker_Pending_Target\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"TaskVersion\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"Guid\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"Guid\",\r\n            \"type\": \"Edm.Guid\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"VersionEntity\",\r\n            \"type\": \"Edm.Guid\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"ModifiedBy\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"Max\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ModifiedDate\",\r\n            \"type\": \"Edm.DateTime\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"VersionTrackerPending\",\r\n            \"type\": \"Edm.Guid\"\r\n          },\r\n          {\r\n            \"name\": \"VersionTrackerHistorical\",\r\n            \"type\": \"Edm.Guid\"\r\n          },\r\n          {\r\n            \"name\": \"Audit\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"Max\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": [\r\n          {\r\n            \"name\": \"Approval\",\r\n            \"relationship\": \"Self.TaskVersion_Approval\",\r\n            \"fromRole\": \"TaskVersion_Approval_Source\",\r\n            \"toRole\": \"TaskVersion_Approval_Target\"\r\n          },\r\n          {\r\n            \"name\": \"Entity\",\r\n            \"relationship\": \"Self.TaskVersion_Entity\",\r\n            \"fromRole\": \"TaskVersion_Entity_Source\",\r\n            \"toRole\": \"TaskVersion_Entity_Target\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"Approval\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"Guid\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"Guid\",\r\n            \"type\": \"Edm.Guid\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"ApprovedBy\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"Max\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"ApprovedDate\",\r\n            \"type\": \"Edm.DateTime\"\r\n          },\r\n          {\r\n            \"name\": \"Version\",\r\n            \"type\": \"Edm.Guid\"\r\n          },\r\n          {\r\n            \"name\": \"Step\",\r\n            \"type\": \"Edm.Int32\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"name\": \"Task\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"Guid\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"Guid\",\r\n            \"type\": \"Edm.Guid\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"Name\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"Max\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          },\r\n          {\r\n            \"name\": \"Description\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"Max\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\",\r\n            \"custom\": {\r\n              \"displayName\": \"Description!\",\r\n              \"description\": null\r\n            }\r\n          },\r\n          {\r\n            \"name\": \"BeginDate\",\r\n            \"type\": \"Edm.DateTime\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"EndDate\",\r\n            \"type\": \"Edm.DateTime\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"IsPerformed\",\r\n            \"type\": \"Edm.Boolean\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"IsSuspended\",\r\n            \"type\": \"Edm.Boolean\",\r\n            \"nullable\": \"false\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": {\r\n          \"name\": \"TaskTags\",\r\n          \"relationship\": \"Self.Task_TaskTags\",\r\n          \"fromRole\": \"Task_TaskTags_Source\",\r\n          \"toRole\": \"Task_TaskTags_Target\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"TaskTag\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"TaskTagID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"TaskTagID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"TaskGuid\",\r\n            \"type\": \"Edm.Guid\",\r\n            \"nullable\": \"false\"\r\n          },\r\n          {\r\n            \"name\": \"TagID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\"\r\n          }\r\n        ],\r\n        \"navigationProperty\": {\r\n          \"name\": \"Tag\",\r\n          \"relationship\": \"Self.TaskTag_Tag\",\r\n          \"fromRole\": \"TaskTag_Tag_Source\",\r\n          \"toRole\": \"TaskTag_Tag_Target\"\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Tag\",\r\n        \"key\": {\r\n          \"propertyRef\": {\r\n            \"name\": \"ID\"\r\n          }\r\n        },\r\n        \"property\": [\r\n          {\r\n            \"name\": \"ID\",\r\n            \"type\": \"Edm.Int32\",\r\n            \"nullable\": \"false\",\r\n            \"annotation:StoreGeneratedPattern\": \"Identity\"\r\n          },\r\n          {\r\n            \"name\": \"Name\",\r\n            \"type\": \"Edm.String\",\r\n            \"maxLength\": \"Max\",\r\n            \"fixedLength\": \"false\",\r\n            \"unicode\": \"true\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"association\": [\r\n      {\r\n        \"name\": \"TaskVersion_Approval\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"TaskVersion_Approval_Source\",\r\n            \"type\": \"Edm.Self.TaskVersion\",\r\n            \"multiplicity\": \"0..1\"\r\n          },\r\n          {\r\n            \"role\": \"TaskVersion_Approval_Target\",\r\n            \"type\": \"Edm.Self.Approval\",\r\n            \"multiplicity\": \"*\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"TaskVersion_Approval_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"Guid\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"TaskVersion_Approval_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"Version\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"TaskTag_Tag\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"TaskTag_Tag_Source\",\r\n            \"type\": \"Edm.Self.TaskTag\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"TaskTag_Tag_Target\",\r\n            \"type\": \"Edm.Self.Tag\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"TaskTag_Tag_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"ID\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"TaskTag_Tag_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"TagID\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Task_TaskTags\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"Task_TaskTags_Source\",\r\n            \"type\": \"Edm.Self.Task\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          },\r\n          {\r\n            \"role\": \"Task_TaskTags_Target\",\r\n            \"type\": \"Edm.Self.TaskTag\",\r\n            \"multiplicity\": \"*\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"Task_TaskTags_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"Guid\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"Task_TaskTags_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"TaskGuid\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"TaskVersion_Entity\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"TaskVersion_Entity_Source\",\r\n            \"type\": \"Edm.Self.TaskVersion\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"TaskVersion_Entity_Target\",\r\n            \"type\": \"Edm.Self.Task\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"TaskVersion_Entity_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"Guid\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"TaskVersion_Entity_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"VersionEntity\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"TaskVersionTracker_Current\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"TaskVersionTracker_Current_Source\",\r\n            \"type\": \"Edm.Self.TaskVersionTracker\",\r\n            \"multiplicity\": \"*\"\r\n          },\r\n          {\r\n            \"role\": \"TaskVersionTracker_Current_Target\",\r\n            \"type\": \"Edm.Self.TaskVersion\",\r\n            \"multiplicity\": \"1\",\r\n            \"onDelete\": {\r\n              \"action\": \"Cascade\"\r\n            }\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"TaskVersionTracker_Current_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"Guid\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"TaskVersionTracker_Current_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"VersionTrackerCurrent\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"TaskVersionTracker_Historical\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"TaskVersionTracker_Historical_Source\",\r\n            \"type\": \"Edm.Self.TaskVersionTracker\",\r\n            \"multiplicity\": \"0..1\"\r\n          },\r\n          {\r\n            \"role\": \"TaskVersionTracker_Historical_Target\",\r\n            \"type\": \"Edm.Self.TaskVersion\",\r\n            \"multiplicity\": \"*\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"TaskVersionTracker_Historical_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"Guid\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"TaskVersionTracker_Historical_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"VersionTrackerHistorical\"\r\n            }\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"TaskVersionTracker_Pending\",\r\n        \"end\": [\r\n          {\r\n            \"role\": \"TaskVersionTracker_Pending_Source\",\r\n            \"type\": \"Edm.Self.TaskVersionTracker\",\r\n            \"multiplicity\": \"0..1\"\r\n          },\r\n          {\r\n            \"role\": \"TaskVersionTracker_Pending_Target\",\r\n            \"type\": \"Edm.Self.TaskVersion\",\r\n            \"multiplicity\": \"*\"\r\n          }\r\n        ],\r\n        \"referentialConstraint\": {\r\n          \"principal\": {\r\n            \"role\": \"TaskVersionTracker_Pending_Source\",\r\n            \"propertyRef\": {\r\n              \"name\": \"Guid\"\r\n            }\r\n          },\r\n          \"dependent\": {\r\n            \"role\": \"TaskVersionTracker_Pending_Target\",\r\n            \"propertyRef\": {\r\n              \"name\": \"VersionTrackerPending\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    ],\r\n    \"entityContainer\": {\r\n      \"name\": \"TaskContext\",\r\n      \"entitySet\": [\r\n        {\r\n          \"name\": \"TaskVersion1\",\r\n          \"entityType\": \"Self.TaskVersionTracker\"\r\n        },\r\n        {\r\n          \"name\": \"TaskVersions\",\r\n          \"entityType\": \"Self.TaskVersion\"\r\n        },\r\n        {\r\n          \"name\": \"Approvals\",\r\n          \"entityType\": \"Self.Approval\"\r\n        },\r\n        {\r\n          \"name\": \"Tasks\",\r\n          \"entityType\": \"Self.Task\"\r\n        },\r\n        {\r\n          \"name\": \"TaskTags\",\r\n          \"entityType\": \"Self.TaskTag\"\r\n        },\r\n        {\r\n          \"name\": \"Tags\",\r\n          \"entityType\": \"Self.Tag\"\r\n        }\r\n      ],\r\n      \"associationSet\": [\r\n        {\r\n          \"name\": \"TaskVersion_Approval\",\r\n          \"association\": \"Self.TaskVersion_Approval\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"TaskVersion_Approval_Source\",\r\n              \"entitySet\": \"TaskVersions\"\r\n            },\r\n            {\r\n              \"role\": \"TaskVersion_Approval_Target\",\r\n              \"entitySet\": \"Approvals\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"TaskTag_Tag\",\r\n          \"association\": \"Self.TaskTag_Tag\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"TaskTag_Tag_Source\",\r\n              \"entitySet\": \"TaskTags\"\r\n            },\r\n            {\r\n              \"role\": \"TaskTag_Tag_Target\",\r\n              \"entitySet\": \"Tags\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"Task_TaskTags\",\r\n          \"association\": \"Self.Task_TaskTags\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"Task_TaskTags_Source\",\r\n              \"entitySet\": \"Tasks\"\r\n            },\r\n            {\r\n              \"role\": \"Task_TaskTags_Target\",\r\n              \"entitySet\": \"TaskTags\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"TaskVersion_Entity\",\r\n          \"association\": \"Self.TaskVersion_Entity\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"TaskVersion_Entity_Source\",\r\n              \"entitySet\": \"TaskVersions\"\r\n            },\r\n            {\r\n              \"role\": \"TaskVersion_Entity_Target\",\r\n              \"entitySet\": \"Tasks\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"TaskVersionTracker_Current\",\r\n          \"association\": \"Self.TaskVersionTracker_Current\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"TaskVersionTracker_Current_Source\",\r\n              \"entitySet\": \"TaskVersion1\"\r\n            },\r\n            {\r\n              \"role\": \"TaskVersionTracker_Current_Target\",\r\n              \"entitySet\": \"TaskVersions\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"TaskVersionTracker_Historical\",\r\n          \"association\": \"Self.TaskVersionTracker_Historical\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"TaskVersionTracker_Historical_Source\",\r\n              \"entitySet\": \"TaskVersion1\"\r\n            },\r\n            {\r\n              \"role\": \"TaskVersionTracker_Historical_Target\",\r\n              \"entitySet\": \"TaskVersions\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          \"name\": \"TaskVersionTracker_Pending\",\r\n          \"association\": \"Self.TaskVersionTracker_Pending\",\r\n          \"end\": [\r\n            {\r\n              \"role\": \"TaskVersionTracker_Pending_Source\",\r\n              \"entitySet\": \"TaskVersion1\"\r\n            },\r\n            {\r\n              \"role\": \"TaskVersionTracker_Pending_Target\",\r\n              \"entitySet\": \"TaskVersions\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}";
    
});


define('text!modules/task/templates/DataSourceNotificationPanelItem.html',[],function () { return 'Task "<a data-bind="text: Entity.Name || \'un-named\', attr: { href: \'#tasks\' }"></a>" was <span data-bind="text: PreviousEntityState === \'Added\'? \'Added\': \'Modified\'"></span>';});


define('text!modules/task/templates/TaskEdit.html',[],function () { return '<div data-bind="throttledWith: selectedVersion">\r\n    <div data-bind="with: Entity">\r\n\r\n        <div class="tabs" data-bind="tabstrip: {}">\r\n            <ul class="nav nav-tabs" data-bind="htmlTunnel : {id : \'versionpager-viewbar-tabs\', end: \'entrance\'}">\r\n\r\n                <li class="active">\r\n                    <a data-toggle="tab" href="#tab-r1" data-bind="keyTipsGroup: { key : \'VD\', group : \'task-details\'}">\r\n                        <i class="fa fa-user nav-fa-issue" style="margin-right: 5px;"></i>\r\n                        <span class="hidden-mobile hidden-tablet">Details</span>\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a data-toggle="tab" href="#tab-r2" data-bind="keyTipsGroup: { key : \'VO\', group : \'task-others\'}">\r\n                        <i class="fa fa-info nav-fa-issue"></i>\r\n                        <span class="hidden-mobile hidden-tablet">Others</span>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div class="tab-content">\r\n                <div id="tab-r1" class="tab-pane active">\r\n                    <div class="field-set">\r\n                        <header>Task details</header>\r\n                        <div>\r\n                            <label data-bind="label: {}">Name</label>\r\n                            <input data-bind="dvalue: Name, focus: 200" />\r\n                        </div>\r\n                        <div>\r\n                            <label data-bind="label: {}">Description</label>\r\n                            <input data-bind="dvalue: Description" />\r\n                        </div>\r\n                    </div>\r\n                    <div class="field-set">\r\n                        <header>Metadata</header>\r\n                        <div>\r\n                            <label data-bind="">Tags</label>\r\n                            <span data-bind="dforeach: Tags">\r\n                                <span class="task-tag" data-bind="text: Name"></span>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div id="tab-r2" class="tab-pane">\r\n                    <div class="field-set">\r\n                        <header>Other</header>\r\n                        <div>\r\n                            <label data-bind="label: {}">Guid</label>\r\n                            <input data-bind="dvalue: Guid" readonly="readonly" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n';});


define('text!modules/task/assets/styles.css',[],function () { return '/* data */\n#viewLayout-content {\n  /*header {\n        .background-image(url(\'images/task.png\'), 22px, left, 3px);\n        margin: 4px;\n    }\n\n    #data-titlebar {\n        height: 27px;\n    }*/\n}\n#viewLayout-viewbar .field-set .k-menu {\n  margin-left: 8em;\n}\n.task-tag {\n  margin-right: 3px;\n  padding: 2px;\n}\n#viewLayout-viewbar.viewbar-bottom .k-content {\n  top: 28px;\n}\n';});

/// <amd-dependency path='text!modules/task/templates/DataSourceNotificationPanelItem.html' />
/// <amd-dependency path='text!modules/task/templates/TaskEdit.html' />
/// <amd-dependency path='text!modules/task/assets/styles.css' />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/task/js/task-helpers',["require", "exports", 'modules/data', 'app', 'metadata/task', "text!modules/task/templates/DataSourceNotificationPanelItem.html", "text!modules/task/templates/TaskEdit.html", "text!modules/task/assets/styles.css"], function(require, exports, _data, _app, metadata) {
    var taskTemplateDataSourceNotificationPanelItem = require('text!modules/task/templates/DataSourceNotificationPanelItem.html');
    var taskTemplateTaskEdit = require('text!modules/task/templates/TaskEdit.html');
    var taskTemplateStyles = require('text!modules/task/assets/styles.css');

    (function (task) {
        var TaskDataSource = (function (_super) {
            __extends(TaskDataSource, _super);
            function TaskDataSource(manager) {
                _super.call(this, {
                    manager: manager,
                    endPoint: new breeze.EntityQuery("taskversion"),
                    typeName: "TaskVersionTracker",
                    entityVersionTypeName: "TaskVersion",
                    versionedTypeName: "Task"
                });
            }
            TaskDataSource.prototype.createEntity = function (props) {
                return _super.prototype.createEntity.call(this);
            };

            TaskDataSource.prototype.initializeVersionedEntity = function (entity) {
                _super.prototype.initializeVersionedEntity.call(this, entity);

                entity.Tags = entity.TaskTags.map(function (x) {
                    return x.Tag();
                });
            };
            return TaskDataSource;
        })(_data.VersionPager.DataSource);
        task.TaskDataSource = TaskDataSource;

        (function (Notifications) {
            // register templates of notifications without template
            _app.Jigsaw.Notifications.notificationTemplate.candidate(taskTemplateDataSourceNotificationPanelItem, function (x) {
                return x.Owner === 'task-data';
            });
        })(task.Notifications || (task.Notifications = {}));
        var Notifications = task.Notifications;

        task.url = "/tasks", task.manager = _data.Server.createManager('api/task', metadata.metadata), task.dataSource = new TaskDataSource(task.manager), task.columns = ['Current.Entity.Name', 'Current.Entity.Description'], task.itemsViewModel = new _data.DataItemsViewModel(task.dataSource, {
            jumpToSearchUri: 'api/task/nextTaskVersion',
            jumpToSearchProperty: 'Guid',
            //excelExportPath: 'api/northwind/ExcelExportTasks',
            columns: task.columns
        }), task.barViewModelOptions = {
            //wordExportUrl: 'export/wordExportCustomer',
            //pdfExportUrl: 'export/pdfExportCustomer',
            approveUri: 'api/task/approve',
            rejectUri: 'api/task/reject',
            revertUri: 'api/task/revert'
        }, task.dataView = _data.Templates.DataItems({
            title: "Tasks",
            jumpTo: false,
            columns: [_data.VersionPager.hasPendingColumn].concat(task.columns),
            //addNew: true,
            //excelExport: true,
            //dragHint: templates.MyCustomerItem,
            viewModel: task.itemsViewModel
        }), task.barView = _data.Templates.VersionPager(_.template(taskTemplateTaskEdit)), task.stylesModule = new _app.Jigsaw.Theming.ContentStyleSheet(taskTemplateStyles);

        function addRibbonButton(ribbon) {
            ribbon.tab("Users").group("Versions", 10).add(new _app.Jigsaw.Ribbon.RibbonButton("Tasks", function () {
                _app.history.navigate(task.url);
            }, "Loads the Tasks Module", "fa fa-university"));
        }
        task.addRibbonButton = addRibbonButton;
    })(exports.task || (exports.task = {}));
    var task = exports.task;
});

/// <reference path="../../../definitions/_definitions.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/task/js/tasks',["require", "exports", 'modules/data', 'modules/data-desktop', 'app-desktop', './task-helpers'], function(require, exports, _data, data, app, helpers) {
    var TasksModule = (function (_super) {
        __extends(TasksModule, _super);
        function TasksModule() {
            _super.call(this, {
                url: helpers.task.url,
                itemsViewModel: helpers.task.itemsViewModel,
                barViewModel: new _data.VersionPager.VersionPagerPanelBarEditViewModel(helpers.task.itemsViewModel, _.defaults({
                    panelBarViewModel: app.viewLayoutModule.viewModel
                }, helpers.task.barViewModelOptions)),
                myItemsModule: data.myItemsModule,
                coreModule: app.coreModule,
                breadcrumbTitle: 'Tasks'
            });

            helpers.task.barView.withViewModel(this.barViewModel);
            helpers.task.addRibbonButton(app.coreModule.ribbon);
        }
        TasksModule.prototype.requiredModules = function () {
            return _super.prototype.requiredModules.call(this).concat(app.coreModule, app.viewLayoutModule, app.sidebarModule, data.myItemsModule, app.notificationsModule, helpers.task.stylesModule);
        };

        TasksModule.prototype.load = function () {
            // reset selected item on the data grid.
            this.itemsViewModel.reset();

            app.coreModule.breadcrumb.next(this.breadcrumb);

            // when base modules are loaded show load this module
            return Q.all([
                app.viewLayoutModule.viewbar.show(helpers.task.barView),
                app.viewLayoutModule.content.show(helpers.task.dataView),
                app.viewLayoutModule.viewModel.collapseViewbar()
            ]);
        };
        return TasksModule;
    })(_data.BarDataModule);
    exports.TasksModule = TasksModule;

    exports.tasksModule = new TasksModule();

    function __init__() {
        exports.tasksModule.initialize();
    }
    exports.__init__ = __init__;
});

/// <reference path="../../../definitions/_definitions.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define('modules/orders/js/orders-desktop',["require", "exports", 'modules/data', 'modules/data-desktop', 'app-desktop', './helpers'], function(require, exports, _data, data, app, helpers) {
    var Module = (function (_super) {
        __extends(Module, _super);
        function Module() {
            _super.call(this, {
                url: helpers.orders.url,
                itemsViewModel: helpers.orders.itemsViewModel,
                barViewModel: helpers.orders.barViewModel(app.viewLayoutModule.viewModel),
                myItemsModule: data.myItemsModule,
                coreModule: app.coreModule,
                breadcrumbTitle: 'Orders'
            });

            this.barView = helpers.orders.barView.withViewModel(this.barViewModel);

            helpers.orders.addRibbonButton(app.coreModule.ribbon);
        }
        Module.prototype.requiredModules = function () {
            return _super.prototype.requiredModules.call(this).concat(app.coreModule, app.viewLayoutModule, app.sidebarModule, data.myItemsModule, app.notificationsModule, helpers.orders.stylesModule);
        };

        Module.prototype.unload = function () {
            app.coreModule.active.close();
            return _super.prototype.unload.call(this);
        };

        Module.prototype.load = function () {
            app.coreModule.breadcrumb.next(this.breadcrumb);

            // reset selected item on the data grid.
            this.itemsViewModel.reset();

            // when base modules are loaded show load this module
            return Q.all([
                app.viewLayoutModule.viewbar.show(this.barView),
                app.viewLayoutModule.content.show(helpers.orders.dataView),
                app.coreModule.active.show(helpers.orders.activeView),
                app.viewLayoutModule.viewModel.collapseViewbar()
            ]);
        };
        return Module;
    })(_data.BarDataModule);
    exports.Module = Module;

    exports.instance = new Module();

    function __init__() {
        exports.instance.initialize();

        data.mySearchesModule.registerCollection(exports.instance.itemsViewModel.searchManager.savedSearches);
    }
    exports.__init__ = __init__;
});

