/// <reference path="../definitions/breeze.d.ts" />
/// <reference path="../definitions/knockout.d.ts" />

/// <reference path="../definitions/knockout.d.ts" />

export var TAG = 'Tag';

//1st step
var dataService = new breeze.DataService({
    serviceName: "mockDataService",
    hasServerMetadata: false
});
export var metadataStore = new breeze.MetadataStore({
    namingConvention: breeze.NamingConvention.camelCase
});
var queryOptions = new breeze.QueryOptions({
    fetchStrategy: breeze.FetchStrategy.FromLocalCache
});


// 2nd step
export var tagType = new breeze.EntityType({
    shortName: TAG,
    namespace: "Sample.Entity",
    autoGeneratedKeyType: breeze.AutoGeneratedKeyType.Identity,
    defaultResourceName: TAG
});
tagType.addProperty(new breeze.DataProperty({
    name: "id",
    dataType: breeze.DataType.Int32,
    isNullable: false,
    isPartOfKey: true
}));
var nameProperty = new breeze.DataProperty({
    name: "name",
    dataType: breeze.DataType.String,
    isNullable: false,
    maxLength: 10,
    validators: [breeze.Validator.stringLength({ maxLength: 10, minLength: 0 })]
});

tagType.addProperty(nameProperty);
metadataStore.addEntityType(tagType);
metadataStore.registerEntityTypeCtor(TAG, null);

export class MockEntityManager extends breeze.EntityManager {
    saveChanges(entities?: breeze.Entity[], saveOptions?: breeze.SaveOptions,
    callback?: breeze.SaveChangesSuccessCallback, errorCallback?: breeze.SaveChangesErrorCallback): Q.Promise<breeze.SaveResult> {

        var rows = entities || this.getChanges();
        _.each(rows, (entity: breeze.Entity) => {
            if (entity.entityAspect.validateEntity()) {
                entity.entityAspect.setUnchanged();
            }
        });

        return Q({
            entities: rows,
            keyMappings: null,
            XHR: null
        });
    }

}

export function newEm(metadataStoreArgs?) {
    return new MockEntityManager({
        dataService: dataService,
        metadataStore: metadataStore,
        queryOptions: queryOptions
    });
}


export function createTag(id=1, name='tag') {
    var etType = metadataStore.getEntityType(TAG);
    var newTag = etType['createEntity']({ id: id, name: name });
    return newTag;
}

export function fillEm(em: breeze.EntityManager, count = 10) {
    for (var i = 0; i < count; i++) {
        em.createEntity(TAG, { id: i, name: 'name' + i }, breeze.EntityState.Unchanged);
    }
}

/**
    Below are customizations for the form editor functionality
 */

import _data = require('../modules/data');

export var EDITOR = 'FormTemplates';
export var FORM_ITEM = 'FormItem';

export var defaultCount = 10;

export var metadataStoreWithNoNamingConvention = new breeze.MetadataStore({
    namingConvention: breeze.NamingConvention.none
});

export function newEntityManager(customDataService = dataService, metadataStoreArgs?) {
    return new MockEntityManager({
            dataService: customDataService,
            metadataStore: metadataStoreWithNoNamingConvention,
            queryOptions: queryOptions
        });
}

export function createEditor(id= 1, formName= 'form') {
    var etType = metadataStoreWithNoNamingConvention.getEntityType(EDITOR);
    var newTag = etType['createEntity']({ Id: id, FormName: formName });
    return newTag;
}

/*Could be used to replace form-spec.MockDataSource*/
export class MockCustomDataSource extends _data.Server.DataSource {
    constructor(entityManager, querySource = TAG, cacheData = false) {
        super({
            manager: entityManager,
            endPoint: breeze.EntityQuery.from(querySource),
            typeName: querySource,
            cacheData: cacheData
        });
    }
}

export function fillEntityManager(em: breeze.EntityManager, count: number = defaultCount, entityType = EDITOR) {
    for (var i = 0; i < count; i++) {
        var editor = em.createEntity(entityType, { Id: (i + 1), FormName: 'formName' + i }, breeze.EntityState.Unchanged);
        editor['FormSections'](fillWithFormItems(em, i, 5));
    }
}

export function fillWithFormItems(em: breeze.EntityManager, parentId, count: number = defaultCount) {
    var formItems = [],
        currentTimestamp = Math.floor((new Date()).getTime() * Math.random()),
        insertedIds = [];
    formItems.push(em.createEntity(FORM_ITEM,
        {
            id: (currentTimestamp + 1), fieldType: 'input', addonText: '@',
            label: 'Username', size: 'md', placeholder: 'Username', required: false, order: 0
        },
        breeze.EntityState.Unchanged));
    formItems.push(em.createEntity(FORM_ITEM,
        {
            id: (currentTimestamp + 2), fieldType: 'password', addonText: '@',
            label: 'Password', size: 'md', placeholder: 'Password', required: false, order: 1
        },
        breeze.EntityState.Unchanged));
    formItems.push(em.createEntity(FORM_ITEM,
        {
            id: (currentTimestamp + 3), fieldType: 'checkbox', addonText: '@',
            label: 'Stay Signed In', size: 'md', placeholder: '', required: false, order: 2
        },
        breeze.EntityState.Unchanged));
    formItems.push(em.createEntity(FORM_ITEM,
        {
            id: (currentTimestamp + 4), fieldType: 'button', addonText: '',
            label: 'Submit', size: 'md', placeholder: '', required: false, order: 3
        },
        breeze.EntityState.Unchanged));
    return formItems;
}

export var editorType = new breeze.EntityType({
    shortName: EDITOR,
    namespace: 'Form.Template',
    autoGeneratedKeyType: breeze.AutoGeneratedKeyType.Identity,
    defaultResourceName: EDITOR
});

editorType.addProperty(new breeze.DataProperty({
    name: "Id",
    dataType: breeze.DataType.Int32,
    isNullable: false,
    isPartOfKey: true
}));
editorType.addProperty(new breeze.DataProperty({
    name: "FormName",
    dataType: breeze.DataType.String,
    isNullable: false,
    maxLength: 10,
    validators: [breeze.Validator.stringLength({ maxLength: 10, minLength: 0 })]
}));
editorType.addProperty(new breeze.DataProperty({
    name: "FormTitle",
    dataType: breeze.DataType.String,
    isNullable: true,
    maxLength: 10,
    validators: [breeze.Validator.stringLength({ maxLength: 10, minLength: 0 })]
}));
editorType.addProperty(new breeze.DataProperty({
    name: "FormDescription",
    dataType: breeze.DataType.String,
    isNullable: true,
    maxLength: 20,
    validators: [breeze.Validator.stringLength({ maxLength: 20, minLength: 0 })]
}));
editorType.addProperty(new breeze.DataProperty({
    name: "Author",
    dataType: breeze.DataType.String,
    isNullable: false,
    maxLength: 10,
    validators: [breeze.Validator.stringLength({ maxLength: 10, minLength: 0 })]
}));
editorType.addProperty(new breeze.DataProperty({
    name: "CreatedDate",
    dataType: breeze.DataType.DateTime,
    isNullable: false,
    maxLength: 60, // Date that was automatically inserted was 55 chars long
    validators: [breeze.Validator.date()]
}));
editorType.addProperty(new breeze.DataProperty({
    name: "LastModified",
    dataType: breeze.DataType.DateTime,
    isNullable: false,
    maxLength: 60, // Date that was automatically inserted was 55 chars long
    validators: [breeze.Validator.date()]
}));

export var formItemType = new breeze.EntityType({
    shortName: FORM_ITEM,
    namespace: 'Form.Item',
    autoGeneratedKeyType: breeze.AutoGeneratedKeyType.Identity,
    defaultResourceName: FORM_ITEM
});

formItemType.addProperty(new breeze.DataProperty({
    name: "id",
    dataType: breeze.DataType.String,
    isNullable: false,
    isPartOfKey: true,
    maxLength: 10,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "fieldType",
    dataType: breeze.DataType.String,
    isNullable: false,
    maxLength: 10,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "addonText",
    dataType: breeze.DataType.String,
    isNullable: true,
    maxLength: 5,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "placeholder",
    dataType: breeze.DataType.String,
    isNullable: true,
    maxLength: 15,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "required",
    dataType: breeze.DataType.Boolean,
    isNullable: false,
    maxLength: 10,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "label",
    dataType: breeze.DataType.String,
    isNullable: false,
    maxLength: 10,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "size",
    dataType: breeze.DataType.String,
    isNullable: true,
    defaultValue: 'md',
    maxLength: 2,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "order",
    dataType: breeze.DataType.Int16,
    isNullable: false,
    defaultValue: 1,
    maxLength: 2,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "maxLength",
    dataType: breeze.DataType.Int16,
    isNullable: false,
    defaultValue: 10,
    maxLength: 2,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "minLength",
    dataType: breeze.DataType.Int16,
    isNullable: false,
    defaultValue: 0,
    maxLength: 2,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "defaultValue",
    dataType: breeze.DataType.String,
    isNullable: true,
    defaultValue: '',
    maxLength: 20,
    validators: []
}));
formItemType.addProperty(new breeze.DataProperty({
    name: "instructionsText",
    dataType: breeze.DataType.String,
    isNullable: true,
    defaultValue: '',
    maxLength: 50,
    validators: []
}));


var editorConstructor = function () {
    this.FormSections = ko.observableArray([]);
};

var formItemConstructor = function () {
    this.possibleFieldTypes = ko.observableArray(["input", "password", "checkbox"]);
    this.possibleSizes = ko.observableArray(["md", "xs", "sm", "lg"]);
    this.requiredValues = ko.observableArray([true, false]);
};

metadataStoreWithNoNamingConvention.addEntityType(editorType);
metadataStoreWithNoNamingConvention.addEntityType(formItemType);

metadataStoreWithNoNamingConvention.registerEntityTypeCtor(EDITOR, editorConstructor);
metadataStoreWithNoNamingConvention.registerEntityTypeCtor(FORM_ITEM, formItemConstructor);
